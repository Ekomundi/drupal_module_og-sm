<?php

/**
 * @file
 * Tests for the og_sm_user_create module.
 */

/**
 * Tests about the OG SM User Create module.
 */
class OgSmUserCreateTestCase extends OgSmWebTestCase {

  /**
   * Test data.
   */
  protected $site;
  protected $siteType;
  protected $admin;
  protected $siteManager;
  protected $siteUser;
  protected $roleSiteManager;

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => t('Site User : Create users'),
      'description' => t('Tests the Create users from within a site functionality.'),
      'group' => t('Organic Groups Site Manager'),
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    // Enable required modules.
    $modules = array('og_sm_user_create', 'og_sm_context');
    parent::setUp($modules);

    // Setup OG context.
    $context_enabled = array(
      'og_sm_context_node' => new stdClass(),
      'og_sm_context_admin' => new stdClass(),
    );
    variable_set('og_context_negotiation_group_context', $context_enabled);
    $context_order = array(
      'og_sm_context_node' => -50,
      'og_sm_context_admin' => -49,
    );
    variable_set('og_context_providers_weight_group_context', $context_order);

    // Create site.
    $this->siteType = $this->ogSmCreateGroupNodeType();
    og_sm_site_type_add($this->siteType);
    $this->site = $site = $this->ogSmCreateGroup($this->siteType);
    $sites = array($site);

    // Create global admin.
    $this->admin = $this->ogSmCreateGroupUser(array('administer users'), $sites);

    // Create Site manager.
    $this->roleSiteManager = og_role_create('role site manager', 'node', 0, $this->siteType);
    og_role_save($this->roleSiteManager);
    og_role_grant_permissions($this->roleSiteManager->rid, array(OG_SM_USER_CREATE_OG_PERM_CREATE_ACCOUNT));
    $this->siteManager = $this->ogSmCreateGroupUser(array(), $sites);
    og_role_grant('node', $this->site->nid, $this->siteManager->uid, $this->roleSiteManager->rid);

    // Create site user.
    $this->siteUser = $this->ogSmCreateGroupUser(array(), $sites);
  }

  /**
   * Test the og_sm_user_create_access access callback.
   */
  public function testUserCreateAccess() {
    $this->assertTrue(og_sm_user_create_access($this->site, $this->admin), 'The global admin has access to the user create form within a site.');
    $this->assertTrue(og_sm_user_create_access($this->site, $this->siteManager), 'The site manager has access to the user create form within a site.');
    $this->assertFalse(og_sm_user_create_access($this->site, $this->siteUser), "A normal user doesn't have access to the user create form within a site.");
  }

  /**
   * Tests the user create form within a site.
   */
  public function testUserCreateForm() {
    $this->drupalLogin($this->siteManager);

    $password = $this->randomName(10);
    $edit = array(
      'name' => 'test-user',
      'mail' => 'test@example.com',
      'og_roles[' . $this->roleSiteManager->rid . ']'=> $this->roleSiteManager->rid,
      'pass[pass1]' => $password,
      'pass[pass2]' => $password,
      'status' => 1,
    );
    $this->drupalPost('group/node/' . $this->site->nid . '/admin/people/add-user/create', $edit, 'Create new account');

    $this->assertText(format_string('Created a new user account for @name. No e-mail has been sent.', array('@name' => $edit['name'])), 'User created message found');
    $this->assertText(format_string('@name has been added to the group @site.', array(
      '@name' => $edit['name'],
      '@site' => $this->site->title,
    )), 'User was added to site message found');

    $user = user_load_by_name($edit['name']);
    $this->assertTrue((bool) $user, 'The user was created');
    $this->assertTrue(og_is_member('node', $this->site->nid, 'user', $user), 'The newly created user is a member of the site.');

    $user_site_roles = og_get_user_roles('node', $this->site->nid, $user->uid);
    $this->assertEqual(isset($user_site_roles[$this->roleSiteManager->rid]), 'The newly created has the site manager role.');
  }

}
