<?php
/**
 * @file
 * Tests for the og_sm_content module.
 */

/**
 * Tests about the OG SM Content functionality.
 */
class OgSmContentTypeTestCase extends OgSmWebTestCase {
  /**
   * Site to run tests with.
   *
   * @var object
   */
  protected $nodeSite;

  /**
   * Content type outside Sites.
   *
   * @var object
   */
  protected $noNodeTypeSiteContent;

  /**
   * Content type inside Sites.
   *
   * @var object
   */
  protected $nodeTypeSiteContent;

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => t('Site Content : Types'),
      'description' => t('Tests the Site Content types functionality.'),
      'group' => t('Organic Groups Site Manager'),
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    // Enable required modules.
    $modules = array('og_sm_content', 'og_sm_context');
    parent::setUp($modules);

    // Setup OG context.
    $context_enabled = array(
      'og_sm_context_node' => new stdClass(),
      'og_sm_context_admin' => new stdClass(),
    );
    variable_set('og_context_negotiation_group_context', $context_enabled);
    $context_order = array(
      'og_sm_context_node' => -50,
      'og_sm_context_admin' => -49,
    );
    variable_set('og_context_providers_weight_group_context', $context_order);

    // Create Site node.
    $type_site = node_type_load($this->ogSmCreateGroupNodeType());
    og_sm_site_type_add($type_site->type);
    $this->nodeSite = $this->ogSmCreateGroup($type_site->type);

    // Create content type outside Sites.
    $this->noNodeTypeSiteContent = $this->drupalCreateContentType();

    // Create content type inside Sites.
    $this->nodeTypeSiteContent = node_type_load(
      $this->ogSmCreateGroupContentNodeType()
    );
  }

  /**
   * Test getting the Site specific content type settings.
   */
  public function testGetTypeInfoBySite() {
    // Content type outside Sites.
    $this->verbose('Global content type : Info retrieved from node_type.');
    drupal_static_reset('og_sm_content_get_type_info_by_site');
    $noNodeTypeSiteContent = og_sm_content_get_type_info_by_site(
      $this->nodeSite,
      $this->noNodeTypeSiteContent
    );
    $this->assertEqual(
      $this->noNodeTypeSiteContent->type,
      $noNodeTypeSiteContent->site_type,
      'Default site_type = global content type Machine name.'
    );
    $this->assertEqual(
      $this->noNodeTypeSiteContent->name,
      $noNodeTypeSiteContent->name,
      'Default name = global content type Name.'
    );
    $this->assertEqual(
      $this->noNodeTypeSiteContent->name,
      $noNodeTypeSiteContent->name_plural,
      'Default name_plural = global content type Name.'
    );

    // Site content type without settings.
    $this->verbose('Site content type : Info retrieved from node_type.');
    drupal_static_reset('og_sm_content_get_type_info_by_site');
    $nodeTypeSiteContent = og_sm_content_get_type_info_by_site(
      $this->nodeSite,
      $this->nodeTypeSiteContent
    );
    $this->assertEqual(
      $this->nodeTypeSiteContent->type,
      $nodeTypeSiteContent->site_type,
      'Default site_type = global content type Machine name.'
    );
    $this->assertEqual(
      $this->nodeTypeSiteContent->name,
      $nodeTypeSiteContent->name,
      'Default name = global content type Name.'
    );
    $this->assertEqual(
      $this->nodeTypeSiteContent->name,
      $nodeTypeSiteContent->name_plural,
      'Default name_plural = global content type Name.'
    );

    // Site content with Site specific settings.
    $this->verbose('Site content type : Info overwritten by Site config.');
    $key_base = 'og_sm_content_' . $this->nodeTypeSiteContent->type . '_';
    og_sm_variable_set(
      $this->nodeSite->nid, $key_base . 'machine_name', 'machine_name_test'
    );
    og_sm_variable_set($this->nodeSite->nid, $key_base . 'name', 'name_test');
    og_sm_variable_set(
      $this->nodeSite->nid, $key_base . 'name_plural', 'name_plural_test'
    );

    drupal_static_reset('og_sm_content_get_type_info_by_site');
    $nodeTypeSiteContent = og_sm_content_get_type_info_by_site(
      $this->nodeSite,
      $this->nodeTypeSiteContent
    );
    $this->assertEqual(
      'machine_name_test',
      $nodeTypeSiteContent->site_type,
      'Machine name (type) is overridden by Site config.'
    );
    $this->assertEqual(
      'name_test',
      $nodeTypeSiteContent->name,
      'Human name (name) is overridden by Site config.'
    );
    $this->assertEqual(
      'name_plural_test',
      $nodeTypeSiteContent->name_plural,
      'Human name plural (name_plural) is overridden by Site config.'
    );

    // The info can be retrieved by the type instead of the object.
    $by_object = $noNodeTypeSiteContent = og_sm_content_get_type_info_by_site(
      $this->nodeSite,
      $this->nodeTypeSiteContent
    );
    $by_type   = $noNodeTypeSiteContent = og_sm_content_get_type_info_by_site(
      $this->nodeSite,
      $this->nodeTypeSiteContent->type
    );

    $this->assertEqual(
      $by_object, $by_type,
      'Information is retrieved by content type machine name.'
    );
  }

  /**
   * Test the content type settings form.
   */
  public function testContentTypeSettingsForm() {
    $path = sprintf(
      'group/node/%d/admin/structure/types/%s',
      $this->nodeSite->nid,
      drupal_html_class($this->nodeTypeSiteContent->type)
    );

    $admin = $this->ogSmCreateAdminUser();
    $this->drupalLogin($admin);

    // Check if the content type fields are available.
    $this->drupalGet($path);
    $this->assertResponse(200, 'Administrator can access the Site specific node type settings.');
    $this->assertFieldById(
      'edit-og-sm-content-og-sm-node-type-is-group-content-machine-name',
      $this->nodeTypeSiteContent->type,
      'Field in the form to override the content type machine name (type).'
    );
    $this->assertFieldById(
      'edit-og-sm-content-og-sm-node-type-is-group-content-name',
      $this->nodeTypeSiteContent->name,
      'Field in the form to override the content type name (name).'
    );
    $this->assertFieldById(
      'edit-og-sm-content-og-sm-node-type-is-group-content-name-plural',
      $this->nodeTypeSiteContent->name,
      'Field in the form to override the content type name in plural form (name_plural).'
    );

    // Update the form & check if the new values are in place.
    $edit = array(
      'og_sm_content_og_sm_node_type_is_group_content_machine_name' => 'test_site_type',
      'og_sm_content_og_sm_node_type_is_group_content_name' => 'test_site_name',
      'og_sm_content_og_sm_node_type_is_group_content_name_plural' => 'test_site_name_plural',
    );
    $this->drupalPost($path, $edit, 'Save configuration');
    $this->assertResponse(200, 'Site settings are changed.');
    $this->assertFieldById(
      'edit-og-sm-content-og-sm-node-type-is-group-content-machine-name',
      $edit['og_sm_content_og_sm_node_type_is_group_content_machine_name'],
      'Field in the form to override the content type machine name (type).'
    );
    $this->assertFieldById(
      'edit-og-sm-content-og-sm-node-type-is-group-content-name',
      $edit['og_sm_content_og_sm_node_type_is_group_content_name'],
      'Field in the form to override the content type name (name).'
    );
    $this->assertFieldById(
      'edit-og-sm-content-og-sm-node-type-is-group-content-name-plural',
      $edit['og_sm_content_og_sm_node_type_is_group_content_name_plural'],
      'Field in the form to override the content type name in plural form (name_plural).'
    );
  }

  /**
   * Test setting site specific info for a content type.
   */
  public function testSiteSpecificContentType() {
    $admin = $this->ogSmCreateAdminUser();
    $this->drupalLogin($admin);

    $this->drupalGet('admin/config/group/context');

    $site_id = $this->nodeSite->nid;
    $base_path = 'group/node/' . $site_id;

    // Site specific overrides.
    $type = $this->nodeTypeSiteContent->type;
    $type_machine_name = 'test_machine_name';
    $type_name = 'test name';
    $type_name_plural = 'test name plural';

    $key_base = 'og_sm_content_' . $type . '_';
    og_sm_variable_set($site_id, $key_base . 'machine_name', $type_machine_name);
    og_sm_variable_set($site_id, $key_base . 'name', $type_name);
    og_sm_variable_set($site_id, $key_base . 'name_plural', $type_name_plural);
    drupal_static_reset('og_sm_content_get_type_info_by_site');

    // Check if the content type name on the node add page has been replaced.
    $path_add_article = $base_path . '/content/add/' . drupal_html_class($type);
    $this->drupalGet($path_add_article);
    $this->assertResponse(200);
    $this->assertText(t('Create @name', array('@name' => $type_name)));

    // Check if the content type name on the node edit page has been replaced.
    $node = $this->ogSmCreateGroupContent($type, array($this->nodeSite));
    $this->drupalGet('node/' . $node->nid . '/edit');
    $this->assertRaw(t('<em>Edit @type</em> @title', array(
      '@type' => $type_name,
      '@title' => $node->title,
    )));
  }

}
