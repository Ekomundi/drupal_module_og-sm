<?php
/**
 * @file
 * Tests for the og_sm_content module.
 */

/**
 * Tests about the OG SM Content functionality.
 */
class OgSmContentTestCase extends OgSmWebTestCase {
  /**
   * Test artifacts.
   */
  protected $userAdmin;
  protected $userDefault;

  protected $site;
  protected $siteType;

  protected $siteUserPageArticle;
  protected $siteUserArticle;

  protected $siteContentTypeNamePage = 'og_sm_site_content_type_page';
  protected $siteContentTypePage;
  protected $siteContentTypeNameArticle = 'og_sm_site_content_type_article';
  protected $siteContentTypeArticle;

  protected $permissionCreatePage = 'create og_sm_site_content_type_page content';
  protected $permissionCreateArticle = 'create og_sm_site_content_type_article content';

  protected $roleTypesPageArticle;
  protected $roleTypesArticle;

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => t('Site Content : Management'),
      'description' => t('Tests the Site Content management functionality.'),
      'group' => t('Organic Groups Site Manager'),
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    // Enable required modules.
    $modules = array('og_sm_content');
    parent::setUp($modules);
  }

  /**
   * Helper to setup the content items.
   */
  private function setUpContent() {
    // Create the site.
    $this->siteType = $this->ogSmCreateGroupNodeType();
    og_sm_site_type_add($this->siteType);
    $this->site = $this->ogSmCreateGroup($this->siteType);

    // Create site content types.
    $this->siteContentTypePage = node_type_load(
      $this->ogSmCreateGroupContentNodeType($this->siteContentTypeNamePage)
    );
    $this->siteContentTypeArticle = node_type_load(
      $this->ogSmCreateGroupContentNodeType($this->siteContentTypeNameArticle)
    );
  }

  /**
   * Helper to setup the users.
   */
  private function setUpUsers() {
    // Create site roles.
    $this->roleTypesPageArticle = og_role_create('role1', 'node', 0, $this->siteType);
    og_role_save($this->roleTypesPageArticle);
    $this->roleTypesArticle = og_role_create('role2', 'node', 0, $this->siteType);
    og_role_save($this->roleTypesArticle);

    // Grant permissions to the roles.
    og_role_grant_permissions(
      $this->roleTypesPageArticle->rid,
      array($this->permissionCreatePage, $this->permissionCreateArticle)
    );
    og_role_grant_permissions(
      $this->roleTypesArticle->rid,
      array($this->permissionCreateArticle)
    );

    // Create users.
    $this->userAdmin = $this->ogSmCreateAdminUser();
    $this->userDefault = $this->drupalCreateUser();
    $this->siteUserPageArticle = $this->ogSmCreateGroupUser(array(), array($this->site));
    $this->siteUserArticle = $this->ogSmCreateGroupUser(array(), array($this->site));

    // Grant permissions.
    og_role_grant('node', $this->site->nid, $this->siteUserPageArticle->uid, $this->roleTypesPageArticle->rid);
    og_role_grant('node', $this->site->nid, $this->siteUserArticle->uid, $this->roleTypesArticle->rid);
  }

  /**
   * Overwrites a content type basic info to be site specific.
   *
   * @param object $site
   *   The site node.
   * @param string $content_type
   *   The content type's machine name.
   * @param array $info
   *   A key value array with site specific info for the content type.
   */
  private function setupSiteSpecificContentType($site, $content_type, $info) {
    $variable_base = 'og_sm_content_' . $content_type . '_';
    foreach ($info as $name => $value) {
      og_sm_variable_set($site->nid, $variable_base . $name, $value);
    }
    drupal_static_reset('og_sm_content_get_type_info_by_site');
  }

  /**
   * Test the helper to create the content/add/type path.
   */
  public function testContentAddUri() {
    $site = new stdClass();
    $site->nid = 555;
    $type = 'test_type';

    $this->assertEqual(
      'group/node/555/content/add/test-type',
      og_sm_content_add_uri($site, $type)
    );
  }

  /**
   * Tests the helper to get all Site content types a user can create.
   */
  public function testGetTypesBySite() {
    // Setup test data.
    $this->setUpContent();
    $this->setUpUsers();

    // Test for default user.
    $this->assertEqual(array(), og_sm_content_get_types_by_site($this->site, $this->userDefault));

    $this->siteContentTypeArticle = og_sm_content_get_type_info_by_site($this->site, $this->siteContentTypeArticle);
    $this->siteContentTypePage = og_sm_content_get_type_info_by_site($this->site, $this->siteContentTypePage);
    // Test getting the types for an admin user.
    $expected = array(
      $this->siteContentTypeNameArticle => $this->siteContentTypeArticle,
      $this->siteContentTypeNamePage => $this->siteContentTypePage,
    );
    $this->assertEqual($expected, og_sm_content_get_types_by_site($this->site, $this->userAdmin));

    // Test for user 1.
    $this->assertEqual($expected, og_sm_content_get_types_by_site($this->site, $this->siteUserPageArticle));

    // Test for user 2.
    $expected = array(
      $this->siteContentTypeNameArticle => $this->siteContentTypeArticle,
    );
    $this->assertEqual($expected, og_sm_content_get_types_by_site($this->site, $this->siteUserArticle));
  }

  /**
   * Test og_sm_content_get_types_by_site() function for anonymous users.
   *
   * If the non-site-member role is granted to create content, the anonymous
   * user also gets access to create that content within a Site context.
   * This is not the exptected behaviour. This test checks the fix for this
   * issue.
   *
   * See DMOGSM-67.
   */
  public function testGetTypesBySiteWhenNonMembersAreAllowedToCreateContent() {
    // Setup test data.
    $this->setUpContent();
    $this->setUpUsers();

    // Grant non-members permissions to create new content.
    og_role_grant_permissions(
      1,
      array($this->permissionCreatePage, $this->permissionCreateArticle)
    );

    // Test function as anonymous user.
    $anonymous = drupal_anonymous_user();
    $this->assertEqual(
      array(),
      og_sm_content_get_types_by_site($this->site, $anonymous),
      'Anonymous users do not have access to create Site content.'
    );

    // Test with non-site-member.
    $this->siteContentTypeArticle = og_sm_content_get_type_info_by_site($this->site, $this->siteContentTypeArticle);
    $this->siteContentTypePage = og_sm_content_get_type_info_by_site($this->site, $this->siteContentTypePage);
    $expected = array(
      $this->siteContentTypeNameArticle => $this->siteContentTypeArticle,
      $this->siteContentTypeNamePage => $this->siteContentTypePage,
    );
    $this->assertEqual(
      $expected,
      og_sm_content_get_types_by_site($this->site, $this->userDefault),
      'Non Site members can create Site content.'
    );

    // Check interface access.
    $path_add_overview = 'group/node/' . $this->site->nid . '/content/add';
    $path_add_page = $path_add_overview . '/' . preg_replace('/_/', '-', $this->siteContentTypeNamePage);
    $path_add_article = $path_add_overview . '/' . preg_replace('/_/', '-', $this->siteContentTypeNameArticle);

    // As anonymous user.
    $this->drupalLogout();
    $this->drupalGet($path_add_overview);
    $this->assertResponse(403, 'Anonymous user can not access add overview page within Site.');
    $this->drupalGet($path_add_page);
    $this->assertResponse(403, 'Anonymous user can not create pages within Site.');
    $this->drupalGet($path_add_article);
    $this->assertResponse(403, 'Anonymous user can not create articles within Site.');

    // As authenticated but non-site-member user.
    $this->drupalLogin($this->userDefault);
    $this->drupalGet($path_add_overview);
    $this->assertResponse(200, 'Authenticated, non member user can access add overview page within Site.');
    $this->drupalGet($path_add_page);
    $this->assertResponse(200, 'Authenticated, non member can create pages within Site.');
    $this->drupalGet($path_add_article);
    $this->assertResponse(200, 'Authenticated, non member can create articles within Site.');
  }

  /**
   * Test the access callbacks.
   */
  public function testAccessCallbacks() {
    // Setup test data.
    $this->setUpContent();
    $this->setUpUsers();

    $path_overview = 'group/node/' . $this->site->nid . '/content/add';
    $path_add_page = $path_overview . '/' . preg_replace('/_/', '-', $this->siteContentTypeNamePage);
    $path_add_article = $path_overview . '/' . preg_replace('/_/', '-', $this->siteContentTypeNameArticle);
    $global_path_add_page = 'node/add/' . preg_replace('/_/', '-', $this->siteContentTypeNamePage);
    $global_path_add_article = 'node/add/' . preg_replace('/_/', '-', $this->siteContentTypeNameArticle);

    // Not logged in.
    $this->drupalGet($path_overview);
    $this->assertResponse(403, 'User is not allowed to view the node/add page.');
    $this->drupalGet($path_add_page);
    $this->assertResponse(403, 'User is not allowed to add Page content.');
    $this->drupalGet($path_add_article);
    $this->assertResponse(403, 'User is not allowed to add Article content.');

    // Default user.
    $this->verbose('Log in as Default user.');
    $this->drupalLogin($this->userDefault);
    $this->drupalGet($path_overview);
    $this->assertResponse(403, 'User is not allowed to view the node/add page.');
    $this->drupalGet($path_add_page);
    $this->assertResponse(403, 'User is not allowed to add Page content.');
    $this->drupalGet($path_add_article);
    $this->assertResponse(403, 'User is not allowed to add Article content.');

    // Admin user.
    $this->verbose('Log in as Admin user.');
    $this->drupalLogin($this->userAdmin);
    $this->drupalGet($path_overview);
    $this->assertResponse(200, 'User is allowed to view the node/add page.');
    $this->drupalGet($path_add_page);
    $this->assertResponse(200, 'User is allowed to add Page content.');
    $this->drupalGet($path_add_article);
    $this->assertResponse(200, 'User is allowed to add Article content.');
    $this->drupalGet($global_path_add_page);
    $this->assertResponse(200, 'User is allowed to add Page content via the global node add form.');
    $this->drupalGet($global_path_add_article);
    $this->assertResponse(200, 'User is allowed to add Article content via the global node add form.');

    // User with access to all content.
    $this->verbose('Log in as user who can create pages & articles.');
    $this->drupalLogin($this->siteUserPageArticle);
    $this->drupalGet($path_overview);
    $this->assertResponse(200, 'User is allowed to view the node/add page.');
    $this->drupalGet($path_add_page);
    $this->assertResponse(200, 'User is allowed to add Page content.');
    $this->drupalGet($path_add_article);
    $this->assertResponse(200, 'User is allowed to add Article content.');
    $this->drupalGet($global_path_add_page);
    $this->assertResponse(403, 'User is not allowed to add Page content via the global node add form.');
    $this->drupalGet($global_path_add_article);
    $this->assertResponse(403, 'User is not allowed to add Article content via the global node add form.');

    // User with access to only articles.
    $this->verbose('Log in as user who can create only articles.');
    $this->drupalLogin($this->siteUserArticle);
    $this->drupalGet($path_overview);
    $this->assertResponse(200, 'User is allowed to view the node/add page.');
    $this->drupalGet($path_add_page);
    $this->assertResponse(403, 'User is not allowed to add Page content.');
    $this->drupalGet($path_add_article);
    $this->assertResponse(200, 'User is allowed to add Article content.');
    $this->drupalGet($global_path_add_page);
    $this->assertResponse(403, 'User is not allowed to add Page content via the global node add form.');
    $this->drupalGet($global_path_add_article);
    $this->assertResponse(403, 'User is not allowed to add Article content via the global node add form.');
  }

  /**
   * Test the hook_url_outbound_alter() implementation.
   */
  public function testUrlOutboundAlter() {
    // Enable the og_sm_path module.
    module_enable(array('og_sm_path'), TRUE);

    // Setup test data.
    $this->setUpContent();
    $site_path = 'site-path-test';
    og_sm_path_set($this->site, $site_path, FALSE);

    $site_nid = $this->site->nid;
    $options = array();

    // Test rewriting for non Site paths.
    $path = $path_expected = 'group/node/987654321/content/add';
    og_sm_content_url_outbound_alter($path, $options, 'foo/bar');
    $this->assertEqual($path_expected, $path);

    // Test rewriting admin path rewrite for a Site.
    $path = 'group/node/' . $site_nid . '/content/add/page';
    $path_expected = $site_path . '/content/add/page';
    og_sm_content_url_outbound_alter($path, $options, 'foo/bar');
    $this->assertEqual($path_expected, $path);

    // Setup site specific content type info.
    $this->setupSiteSpecificContentType($this->site, $this->siteContentTypeNameArticle, array(
      'machine_name' => 'llama',
    ));

    // Verify that the add content path is now uses the site specific content
    // type alias.
    $path = 'group/node/' . $site_nid . '/content/add/' . preg_replace('/_/', '-', $this->siteContentTypeNameArticle);
    $path_expected = $site_path . '/content/add/llama';
    og_sm_content_url_outbound_alter($path, $options, 'foo/bar');
    $this->assertEqual($path_expected, $path);

    // Verify that the content type alias is not used for another site.
    $llama_site = $this->ogSmCreateGroup($this->siteType);
    $site_path = 'site-llamas';
    og_sm_path_set($llama_site, $site_path, FALSE);
    $path = 'group/node/' . $llama_site->nid . '/content/add/' . preg_replace('/_/', '-', $this->siteContentTypeNameArticle);
    $path_expected = $site_path . '/content/add/' . preg_replace('/_/', '-', $this->siteContentTypeNameArticle);
    og_sm_content_url_outbound_alter($path, $options, 'foo/bar');
    $this->assertEqual($path_expected, $path);

    // Unless we also set an alias to the article content type for that site.
    $this->setupSiteSpecificContentType($llama_site, $this->siteContentTypeNameArticle, array(
      'machine_name' => 'llama',
    ));
    $path_expected = $site_path . '/content/add/llama';
    $path = 'group/node/' . $llama_site->nid . '/content/add/' . preg_replace('/_/', '-', $this->siteContentTypeNameArticle);
    og_sm_content_url_outbound_alter($path, $options, 'foo/bar');
    $this->assertEqual($path_expected, $path);

    // Verify that if the machine name has underscores in it, it is replaced
    // with dashes.
    $this->setupSiteSpecificContentType($llama_site, $this->siteContentTypeNameArticle, array(
      'machine_name' => 'llama_group',
    ));
    $path = 'group/node/' . $llama_site->nid . '/content/add/' . preg_replace('/_/', '-', $this->siteContentTypeNameArticle);
    $path_expected = $site_path . '/content/add/llama-group';
    og_sm_content_url_outbound_alter($path, $options, 'foo/bar');
    $this->assertEqual($path_expected, $path);
  }

  /**
   * Test the hook_url_inbound_alter() implementation.
   */
  public function testUrlInboundAlter() {
    // Enable the og_sm_path module.
    module_enable(array('og_sm_path'), TRUE);

    // Setup test data.
    $this->setUpContent();
    $site_path = 'site-path-test';
    og_sm_path_set($this->site, $site_path, FALSE);

    // Not a Site path.
    $path = $path_expected = 'content/test/45687266/content/add/article';
    og_sm_content_url_inbound_alter($path, 'foo/bar', 'en');
    $this->assertEqual($path_expected, $path);

    // Site path.
    $path = $site_path . '/content/add';
    $path_expected = 'group/node/' . $this->site->nid . '/content/add';
    og_sm_content_url_inbound_alter($path, 'foo/bar', 'nl');
    $this->assertEqual($path_expected, $path);

    // Setup site specific content type info.
    $this->setupSiteSpecificContentType($this->site, $this->siteContentTypeNameArticle, array(
      'machine_name' => 'llama',
    ));

    // Verify that add content path finds the correct content type based on its
    // alias name.
    $path = $site_path . '/content/add/llama';
    $path_expected = 'group/node/' . $this->site->nid . '/content/add/' . preg_replace('/_/', '-', $this->siteContentTypeNameArticle);
    og_sm_content_url_inbound_alter($path, 'foo/bar', 'nl');
    $this->assertEqual($path_expected, $path);

    // Set a site specific content type name with multiple words.
    $this->setupSiteSpecificContentType($this->site, $this->siteContentTypeNameArticle, array(
      'machine_name' => 'llama_group',
    ));
    // Verify that when the underscores are replaced with dashes the original
    // content type is still found.
    $path = $site_path . '/content/add/llama-group';
    og_sm_content_url_inbound_alter($path, 'foo/bar', 'nl');
    $this->assertEqual($path_expected, $path);
  }

  /**
   * Test the og_sm_content_add_content_access() callback.
   */
  public function testAddContentAccessCallback() {
    // Setup test data.
    $this->setUpContent();
    $this->setUpUsers();

    // Default user.
    $access = og_sm_content_add_content_access($this->site, $this->siteContentTypeNamePage, $this->userDefault);
    $this->assertFalse($access, 'Default user is not allowed to add Page content.');

    // Admin user.
    $access = og_sm_content_add_content_access($this->site, $this->siteContentTypeNamePage, $this->userAdmin);
    $this->assertTrue($access, 'Admin user is allowed to add Page content.');
    $access = og_sm_content_add_content_access($this->site, $this->siteContentTypeNameArticle, $this->userAdmin);
    $this->assertTrue($access, 'Admin user is allowed to add Article content.');

    // User with access to all content.
    $access = og_sm_content_add_content_access($this->site, $this->siteContentTypeNamePage, $this->siteUserPageArticle);
    $this->assertTrue($access, 'User 1 is allowed to add Page content.');
    $access = og_sm_content_add_content_access($this->site, $this->siteContentTypeNameArticle, $this->siteUserPageArticle);
    $this->assertTrue($access, 'User 1 is allowed to add Article content.');

    // User with access to only articles.
    $access = og_sm_content_add_content_access($this->site, $this->siteContentTypeNamePage, $this->siteUserArticle);
    $this->assertFalse($access, 'User 2 is not allowed to add Page content.');
    $access = og_sm_content_add_content_access($this->site, $this->siteContentTypeNameArticle, $this->siteUserArticle);
    $this->assertTrue($access, 'User 2 is allowed to add Article content.');
  }

  /**
   * Test the hook_node_access() implementation in og_sm_content.
   *
   * We don't need to test this for users with special roles/permissions as
   * these are already granted access on Drupal level.
   *
   * We are testing here on unit-level.
   */
  public function testNodeAccessCallback() {
    // Setup test data.
    $this->setUpContent();
    $this->setUpUsers();
    $site_content_node = $this->ogSmCreateGroupContent(
      $this->siteContentTypeNamePage,
      array($this->site)
    );

    // Function does not check other operations then create.
    $this->assertEqual(
      NODE_ACCESS_IGNORE,
      og_sm_content_node_access($site_content_node, 'update', $this->siteUserPageArticle),
      'No Node Access check for update.'
    );
    $this->assertEqual(
      NODE_ACCESS_IGNORE,
      og_sm_content_node_access($site_content_node, 'delete', $this->siteUserPageArticle),
      'No Node Access check for delete.'
    );

    // No check if not a Site content type.
    $this->assertEqual(
      NODE_ACCESS_IGNORE,
      og_sm_content_node_access($this->siteType, 'create', $this->siteUserPageArticle),
      'No Node Access check for non Site content types.'
    );

    // User should not be allowed to create content outside a Site context.
    $this->assertEqual(
      NODE_ACCESS_DENY,
      og_sm_content_node_access($this->siteContentTypeNamePage, 'create', $this->siteUserPageArticle),
      'Users are not allowed to create Site content outside a Site context.'
    );

    // No check when Site context is active.
    $this->ogSmSetOgContextToGroup($this->site);
    $this->assertEqual(
      NODE_ACCESS_IGNORE,
      og_sm_content_node_access($this->siteContentTypeNamePage, 'create', $this->siteUserPageArticle),
      'No Node Access check when inside a Site context.'
    );
  }

}
