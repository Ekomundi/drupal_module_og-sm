<?php
/**
 * @file
 * Tests for the og_sm_path module.
 */

/**
 * Tests about the OG Context provider.
 */
class OgSmPathContextTestCase extends OgSmWebTestCase {
  /**
   * Site node type.
   *
   * @var string
   */
  protected $siteType;

  /**
   * Site content node type.
   *
   * @var string
   */
  protected $siteContentType;

  /**
   * Default node outside any group.
   *
   * @var object
   */
  protected $nodeGlobal;

  /**
   * Node of a group type that is not a Site.
   *
   * @var object
   */
  protected $nodeGroup;

  /**
   * Content within a group that is not a Site.
   *
   * @var object
   */
  protected $nodeGroupContent;

  /**
   * Site node.
   *
   * @var object
   */
  protected $nodeSite;

  /**
   * Site Content node.
   *
   * @var object
   */
  protected $nodeSiteContent;

  /**
   * Site node path.
   *
   * @var string
   */
  protected $nodeSitePath;

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => t('Site Path context'),
      'description' => t('Tests OG Context provider based on the Site Path.'),
      'group' => t('Organic Groups Site Manager'),
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    // Enable required modules.
    $modules = array('og_sm_path');
    parent::setUp($modules);

    // Create non Site content.
    $this->nodeGlobal = $this->drupalCreateNode();

    // Create a default group content.
    $group_type = $this->ogSmCreateGroupNodeType('default_group');
    $this->nodeGroup = $this->ogSmCreateGroup($group_type);
    $group_content_type = $this->ogSmCreateGroupContentNodeType('default_group_content');
    $this->nodeGroupContent = $this->ogSmCreateGroupContent($group_content_type, array($this->nodeGroup));

    // Create the Site node.
    $this->siteType = $this->ogSmCreateGroupNodeType();
    og_sm_site_type_add($this->siteType);
    $settings = array(
      'site_path' => 'my-test-path',
    );
    $this->nodeSite = $this->ogSmCreateGroup($this->siteType, $settings);
    $this->nodeSitePath = og_sm_path($this->nodeSite);

    // Create the Site content node.
    $this->siteContentType = $this->ogSmCreateGroupContentNodeType();
    variable_set('pathauto_node_' . $this->siteContentType . '_pattern', $this->nodeSitePath . '/[node:title]');
    $this->nodeSiteContent = $this->ogSmCreateGroupContent($this->siteContentType, array($this->nodeSite));
  }

  /**
   * Test the Context Path handler that reacts on paths like [site-path]/...
   */
  public function testOgContextHandlerPath() {
    // Content outside Site context.
    $_GET['q'] = 'node/' . $this->nodeGlobal->nid;
    $this->assertNull(og_sm_path_context_handler_path());
    $_GET['q'] = 'node/' . $this->nodeGroup->nid;
    $this->assertNull(og_sm_path_context_handler_path());
    $_GET['q'] = 'node/' . $this->nodeGroupContent->nid;
    $this->assertNull(og_sm_path_context_handler_path());

    // Test Site & Site content.
    $expected = array('node' => array((int) $this->nodeSite->nid));

    $_GET['q'] = 'node/' . $this->nodeSite->nid;
    $this->assertEqual($expected, og_sm_path_context_handler_path());
    $_GET['q'] = 'node/' . $this->nodeSiteContent->nid;
    $this->assertEqual($expected, og_sm_path_context_handler_path());

    // Test with custom paths.
    $_GET['q'] = 'whatever/foo/bar/biz/baz';
    $this->assertNull(og_sm_path_context_handler_path());
    $_GET['q'] = $this->nodeSitePath . '/whatever/foo/bar/biz/baz';
    $this->assertEqual($expected, og_sm_path_context_handler_path());
  }

}
