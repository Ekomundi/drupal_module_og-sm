<?php
/**
 * @file
 * Tests for the og_sm_path module.
 */

/**
 * Tests about the Site node forms.
 */
class OgSmPathNodeFormTestCase extends OgSmWebTestCase {
  /**
   * None Site content type.
   */
  private $typeNotSite;

  /**
   * Site content type.
   */
  private $typeIsSite;

  /**
   * The Site node to test with.
   */
  private $siteNode;

  /**
   * Extra Site node to test with.
   */
  private $siteNode2;

  /**
   * The admin user to test with.
   */
  private $userAdministrator;

  /**
   * The user that is the owner to test with.
   */
  private $site2OwnerWithoutPermission;

  /**
   * The user that is the owner to test with.
   */
  private $siteOwnerWithPermission;

  /**
   * Global user with Change All permission.
   */
  private $userWithoutChangeAllPermission;

  /**
   * Global user with Change All permission.
   */
  private $userWithChangeAllPermission;

  /**
   * Site user with admin rights.
   */
  private $siteAdministrator;

  /**
   * The user with permission to test with.
   */
  private $siteUserWithoutChangePermissions;

  /**
   * The site user without the permission to test with.
   */
  private $siteUserWithChangePermission;

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => t('Site Path node form'),
      'description' => t('Tests Site Path node form settings.'),
      'group' => t('Organic Groups Site Manager'),
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    // Enable required modules.
    $modules = array('og_sm_path');
    parent::setUp($modules);

    // Create users.
    $this->userAdministrator = $this->ogSmCreateAdminUser();
    $this->userWithoutChangeAllPermission = $this->drupalCreateUser(
      array('administer nodes')
    );
    $this->userWithChangeAllPermission = $this->drupalCreateUser(
      array('administer nodes', OG_SM_PATH_PERM_CHANGE_PATH_ALL)
    );

    // Site owner.
    $this->site2OwnerWithoutPermission = $this->drupalCreateUser();
    $this->siteOwnerWithPermission = $this->drupalCreateUser(
      array(OG_SM_PATH_PERM_CHANGE_PATH_OWN)
    );

    // Create Sites.
    $this->typeNotSite = $this->ogSmCreateGroupNodeType('not_site_type');
    $this->typeIsSite  = $this->ogSmCreateGroupNodeType('is_site_type');
    og_sm_site_type_add($this->typeIsSite);
    $this->siteNode = $this->ogSmCreateGroup(
      $this->typeIsSite,
      array('uid' => $this->siteOwnerWithPermission->uid)
    );
    $this->siteNode2 = $this->ogSmCreateGroup(
      $this->typeIsSite,
      array('uid' => $this->site2OwnerWithoutPermission->uid)
    );

    // Site user with admin permissions.
    $site_role_admin = og_role_create('site admin', $this->typeIsSite);
    og_role_save($site_role_admin);
    og_role_grant_permissions($site_role_admin->rid, array('administer group'));
    $this->siteAdministrator = $this->ogSmCreateGroupUser(
      array(),
      array($this->siteNode)
    );
    og_role_grant(
      'node',
      $this->siteNode->nid,
      $this->siteAdministrator->uid,
      $site_role_admin->rid
    );

    // Site user with edit but NO path change permissions.
    $site_role_edit = og_role_create('site edit', $this->typeIsSite);
    og_role_save($site_role_edit);
    og_role_grant_permissions($site_role_edit->rid, array('update group'));
    $this->siteUserWithoutChangePermissions = $this->ogSmCreateGroupUser(
      array(),
      array($this->siteNode)
    );
    og_role_grant(
      'node',
      $this->siteNode->nid,
      $this->siteAdministrator->uid,
      $site_role_edit->rid
    );

    // Site user with change path permissions.
    $site_role_change_path = og_role_create('site change path', $this->typeIsSite);
    og_role_save($site_role_change_path);
    og_role_grant_permissions(
      $site_role_change_path->rid,
      array('update group', OG_SM_PATH_OG_PERM_CHANGE_PATH)
    );
    $this->siteUserWithChangePermission = $this->ogSmCreateGroupUser(
      array(),
      array($this->siteNode)
    );
    og_role_grant(
      'node',
      $this->siteNode->nid,
      $this->siteAdministrator->uid,
      $site_role_change_path->rid
    );
  }

  /**
   * Test the permissions helper.
   */
  public function testAccessChangePath() {
    // Global permissions.
    $this->assertTrue(
      og_sm_path_access_change_path($this->siteNode, $this->userAdministrator)
    );
    $this->assertFalse(
      og_sm_path_access_change_path($this->siteNode, $this->userWithoutChangeAllPermission)
    );
    $this->assertTrue(
      og_sm_path_access_change_path($this->siteNode, $this->userWithChangeAllPermission)
    );

    // Site owner without change path permission.
    $this->assertFalse(
      og_sm_path_access_change_path($this->siteNode2, $this->site2OwnerWithoutPermission)
    );

    // Site owner with permission.
    $this->assertTrue(
      og_sm_path_access_change_path($this->siteNode, $this->siteOwnerWithPermission)
    );

    // TODO!
  }

  /**
   * Test the node form.
   */
  public function _testSiteNodeForm() {
    // As Administrator.
    $this->drupalLogin($this->userAdministrator);

    // Test non-site node forms.
    $this->drupalGet('node/add/not-site-type');
    $this->assertNoFieldById('edit-site-path');
    $this->assertFieldById('edit-path-alias');

    // Test site node form.
    $this->drupalGet('node/add/is-site-type');
    $this->assertFieldById('edit-site-path');
    $this->assertNoFieldById('edit-path-alias');

    // Create a new Site, check if the path is saved.
    $edit = array(
      'title' => 'Site node test 1',
      'site_path' => 'site-node-test-me',
    );
    $this->drupalPost('node/add/is-site-type', $edit, 'Save');
    $site_nid = db_select('node', 'n')
      ->condition('n.type', $this->typeIsSite)
      ->condition('n.title', $edit['title'])
      ->fields('n', array('nid'))
      ->execute()
      ->fetchField();
    $this->assertEqual($edit['site_path'], og_sm_variable_get($site_nid, 'path'));

    // Creating a new Site with an existing path should result in a form error.
    $edit = array(
      'title' => 'Site node test 2',
      'site_path' => 'site-node-test-me',
    );
    $this->drupalPost('node/add/is-site-type', $edit, 'Save');
    $this->assertText('The Site path site-node-test-me is already in use.');

    // Creating a new Site with an invalid path should result in a form error.
    $edit = array(
      'title' => 'Site node test 2',
      'site_path' => 'site path not valid',
    );
    $this->drupalPost('node/add/is-site-type', $edit, 'Save');
    $this->assertText('The Site path may contain only lowercase letters, numbers and dashes.');
  }

}
