<?php
/**
 * @file
 * Tests for the og_sm_admin_menu module.
 */

/**
 * Tests about the OG SM Administration Menu.
 */
class OgSmAdminMenuTestCase extends OgSmWebTestCase {

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => t('Site Administration menu'),
      'description' => t('Tests the Site Administration Menu functionality.'),
      'group' => t('Organic Groups Site Manager'),
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    // Enable required modules.
    $modules = array('og_sm_admin_menu');
    parent::setUp($modules);
  }

  /**
   * Test the hook_admin_menu_output_alter() implementation.
   */
  public function testAdminMenuOutputAlter() {
    $node_type = $this->drupalCreateContentType()->type;
    $group_type = $this->ogSmCreateGroupNodeType('test_normal_group_type');

    $site_type = $this->ogSmCreateGroupNodeType();
    $site_content_type = $this->ogSmCreateGroupContentNodeType();

    og_sm_site_type_add($site_type);
    $site = $this->ogSmCreateGroup($site_type);

    // Create a menu content array.
    $content = array(
      '#components' => array(
        'og_sm_admin_menu.site' => TRUE,
      ),
      'responsive-menu' => array(
        'admin/index' => array('foo' => 'bar'),
      ),
      'icon' => array(
        'icon' => array(
          '#href' => '<front>',
        ),
      ),
      'menu' => array(
        'node/add' => array(
          '#options' => array(),
          'node/add/' . str_replace('_', '-', $site_type) => array(
            '#options' => array(),
          ),
          'node/add/' . str_replace('_', '-', $site_content_type) => array(
            '#options' => array(),
          ),
          'node/add/' . str_replace('_', '-', $group_type) => array(
            '#options' => array(),
          ),
          'node/add/' . str_replace('_', '-', $node_type) => array(
            '#options' => array(),
          ),
        ),
      ),
      'shortcut' => array(),
    );

    // Create the expected content array.
    $expected = array(
      '#components' => array(
        'og_sm_admin_menu.site' => TRUE,
      ),
      'responsive-menu' => array(),
      'icon' => array(
        'icon' => array(
          '#href' => 'node/' . $site->nid,
        ),
      ),
      'menu' => array(
        'node/add' => array(
          '#options' => array(
            'query' => array('og_group_ref' => $site->nid),
          ),
          'node/add/' . str_replace('_', '-', $site_content_type) => array(
            '#options' => array(
              'query' => array('og_group_ref' => $site->nid),
            ),
          ),
        ),
      ),
    );

    // No changes when not in Site context.
    $content_test1 = $content;
    og_sm_admin_menu_admin_menu_output_alter($content_test1);
    $this->assertEqual($content, $content_test1);

    // Set the site context.
    global $user;
    $this->ogSmSetOgContextToGroup($site);

    // Changed when in Site context.
    $content_test2 = $content;
    og_sm_admin_menu_admin_menu_output_alter($content_test2);
    $this->assertEqual($expected, $content_test2);

    // No changes when site menu plugin is not enabled.
    $content_test3 = $content;
    unset($content_test3['#components']['og_sm_admin_menu.site']);
    $original = $content_test3;
    og_sm_admin_menu_admin_menu_output_alter($content_test3);
    $this->assertEqual($original, $content_test3);
  }

  /**
   * Test the helper to fill in the Site Node ID in an admin path.
   */
  public function testMenuRouterPathFromAdminPath() {
    $site = new stdClass();
    $site->nid = 555;

    $path = 'group/node/[site:nid]/admin';
    $expected = 'group/node/555/admin';
    $this->assertEqual(
      $expected,
      og_sm_admin_menu_router_path_from_admin_path($site, $path)
    );

    $path = '/group/node/[site:nid]';
    $expected = 'group/node/555';
    $this->assertEqual(
      $expected,
      og_sm_admin_menu_router_path_from_admin_path($site, $path)
    );
  }

  /**
   * Test the og_sm_admin_menu_load_site_switcher() function.
   */
  public function testLoadSiteSwitcher() {
    // Create Sites.
    $siteType = $this->ogSmCreateGroupNodeType();
    og_sm_site_type_add($siteType);
    $site1 = $this->ogSmCreateGroup($siteType, array('title' => 'Site 1'));
    $site2 = $this->ogSmCreateGroup($siteType, array('title' => 'Site 2'));

    // Create Users.
    $administrator = $this->ogSmCreateAdminUser('access administration pages');
    $userCanAdministerNodes = $this->drupalCreateUser(array('administer nodes'));
    $userDefault = $this->drupalCreateUser();
    $userSite1Admin = $this->ogSmCreateGroupUser(array(), array($site1));
    $userSite1And2Admin = $this->ogSmCreateGroupUser(array(), array($site1, $site2));
    $roleAdministerGroup = og_role_create('admin_group', 'node', 0, $siteType);
    $roleAdministerSite = og_role_create('admin_site', 'node', 0, $siteType);
    og_role_save($roleAdministerGroup);
    og_role_save($roleAdministerSite);
    og_role_grant_permissions($roleAdministerGroup->rid, array('administer group'));
    og_role_grant_permissions($roleAdministerSite->rid, array('administer site'));
    og_role_grant('node', $site1->nid, $userSite1Admin->uid, $roleAdministerGroup->rid);
    og_role_grant('node', $site1->nid, $userSite1And2Admin->uid, $roleAdministerSite->rid);
    og_role_grant('node', $site2->nid, $userSite1And2Admin->uid, $roleAdministerSite->rid);

    // As administrator outside Sites.
    $GLOBALS['user'] = $administrator;
    $this->ogSmResetOgContext();
    $structure = og_sm_admin_menu_load_site_switcher();
    $expected = array(
      '#theme' => 'admin_menu_links',
      '#wrapper_attributes' => array(
        'id' => 'admin-menu-site-switcher',
      ),
      '#weight' => 50,
      'current' => array(
        '#title' => 'Platform',
        '#weight' => 1000,
        '#href' => 'admin',
        'site-1' => array(
          '#title' => 'Site 1',
          '#href' => 'node/1',
        ),
        'site-2' => array(
          '#title' => 'Site 2',
          '#href' => 'node/2',
        ),
        '#attributes' => array(
          'class' => array(
            0 => 'admin-menu-toolbar-category',
          ),
        ),
      ),
    );
    $this->assertEqual(
      $expected,
      $structure,
      'Administrator gets menu with all Sites, plaform is current item.'
    );

    // As admin user outside Sites.
    $GLOBALS['user'] = $userCanAdministerNodes;
    $structure = og_sm_admin_menu_load_site_switcher();
    $expected_current = array(
      '#title' => 'Select Site',
      '#weight' => 0,
      'site-1' => array(
        '#title' => 'Site 1',
        '#href' => 'node/1',
      ),
      'site-2' => array(
        '#title' => 'Site 2',
        '#href' => 'node/2',
      ),
      '#attributes' => array(
        'class' => array(
          0 => 'admin-menu-toolbar-category',
        ),
      ),
    );
    $this->assertEqual(
      $expected_current,
      $structure['current'],
      'User who can administer content gets menu with all Sites, the current item is the "Select Site" label.'
    );

    // Default user outside Sites.
    $GLOBALS['user'] = $userDefault;
    $structure = og_sm_admin_menu_load_site_switcher();
    $this->assertEqual(array(), $structure, "Users who can't administer Sites don't have the menu item.");

    // As admin inside a Site.
    $GLOBALS['user'] = $administrator;
    $this->ogSmSetOgContextToGroup($site1);
    $structure = og_sm_admin_menu_load_site_switcher();
    $expected_current = array(
      '#title' => 'Site 1',
      '#weight' => 0,
      '#href' => 'node/1',
      'admin' => array(
        '#title' => 'Platform',
        '#weight' => 1000,
        '#href' => 'admin',
        '#attributes' => array(
          'class' => array(
            0 => 'separated',
          ),
        ),
      ),
      'site-2' => array(
        '#title' => 'Site 2',
        '#href' => 'node/2',
      ),
      '#attributes' => array(
        'class' =>
          array(
            0 => 'admin-menu-toolbar-category',
          ),
      ),
    );
    $this->assertEqual(
      $expected_current,
      $structure['current'],
      'Administrator gets menu with all Sites, Site 1 is current item.'
    );

    // As user 1 within Site 1.
    $GLOBALS['user'] = $userSite1Admin;
    $this->ogSmSetOgContextToGroup($site1, $userSite1Admin);
    $structure = og_sm_admin_menu_load_site_switcher();
    $this->assertEqual(array(), $structure, 'User 1 has only 1 Site, no need for Site switcher.');

    // As user 2 within Site 1.
    $GLOBALS['user'] = $userSite1And2Admin;
    $this->ogSmSetOgContextToGroup($site1, $userSite1And2Admin);
    $structure = og_sm_admin_menu_load_site_switcher();
    $expected_current = array(
      '#title' => 'Site 1',
      '#weight' => 0,
      '#href' => 'node/1',
      'site-2' => array(
        '#title' => 'Site 2',
        '#href' => 'node/2',
      ),
      '#attributes' => array(
        'class' => array(
          0 => 'admin-menu-toolbar-category',
        ),
      ),
    );
    $this->assertEqual(
      $expected_current,
      $structure['current'],
      'User 2 gets menu with all the Sites he has access to, Site 1 is current item.'
    );
  }

}
