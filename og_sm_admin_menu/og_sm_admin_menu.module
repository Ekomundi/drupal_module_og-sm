<?php

/**
 * @file
 * Site Manager Administration module.
 */

use Drupal\og_sm\OgSm;
use Drupal\Core\Menu\MenuTreeParameters;
use Drupal\Core\Url;

/**
 * Implements hook_hook_info().
 */
function og_sm_admin_menu_hook_info() {
  return [
    'og_sm_site_menu_links_discovered_alter' => [
      'group' => 'og_sm',
    ],
  ];
}

/**
 * Implements hook_local_tasks_alter().
 */
function og_sm_admin_menu_local_tasks_alter(&$local_tasks) {
  // We are taking over the admin route and don't want it to be a local task for
  // site nodes.
  unset($local_tasks['og.og_admin_routes:node.og_admin_routes']);
}

/**
 * Implements hook_menu_links_discovered_alter().
 */
function og_sm_admin_menu_menu_links_discovered_alter(array &$links) {
  \Drupal::moduleHandler()->alter('og_sm_site_menu_links_discovered', $links);
}

/**
 * Implements hook_toolbar().
 */
function og_sm_admin_menu_toolbar() {
  $site_manager = OgSm::siteManager();
  $links = [];

  $tab_title = t('Platform');
  $tab_url = Url::fromRoute('<front>');

  $current_site = $site_manager->currentSite();
  if ($current_site) {
    $links['platform'] = [
      'title' => $tab_title,
      'url' => $tab_url,
    ];

    $tab_title = $current_site->label();
    $tab_url = $site_manager->getSiteHomePage($current_site);
  }

  $switch_sites = $site_manager->getUserManageableSites();
  if (count($switch_sites) < 2) {
    return [];
  }

  foreach ($switch_sites as $site) {
    if ($current_site && $current_site->id() === $site->id()) {
      continue;
    }

    $links['site-' . $site->id()] = [
      'title' => $site->label(),
      'url' => $site_manager->getSiteHomePage($site),
    ];
  }

  $items['site_switcher'] = [
    '#type' => 'toolbar_item',
    'tab' => [
      '#type' => 'link',
      '#title' => $tab_title,
      '#url' => $tab_url,
      '#attributes' => [
        'title' => t('Return to site content'),
        'class' => ['toolbar-site-switcher'],
      ],
      '#cache' => [
        'contexts' => [
          'og_group_context',
          'user',
        ],
      ],
    ],
    'tray' => [
      '#heading' => t('Site switcher'),
      'site_switcher' => [
        '#theme' => 'links__toolbar',
        '#links' => $links,
        '#attributes' => [
          'class' => ['toolbar-menu'],
        ],
      ],
    ],
    '#attached' => [
      'library' => [
        'og_sm_admin_menu/og_sm.site_switcher',
      ],
    ],
    '#weight' => 200,
  ];

  return $items;
}

/**
 * Implements hook_toolbar_alter().
 */
function og_sm_admin_menu_toolbar_alter(&$items) {
  $items['administration']['tray']['toolbar_administration']['#pre_render'] = ['og_sm_admin_menu_prerender_toolbar_administration_tray'];
  $items['administration']['#cache']['contexts'][] = 'og_group_context';
}

/**
 * Renders the toolbar's site administration tray.
 *
 * @param array $element
 *   A renderable array.
 *
 * @return array
 *   The updated renderable array.
 */
function og_sm_admin_menu_prerender_toolbar_administration_tray(array $element) {
  $site_manager = OgSm::siteManager();

  $admin_toolbar_exists = \Drupal::moduleHandler()->moduleExists('admin_toolbar');

  if (!$site_manager->currentSite()) {
    // If there's no site context, render the toolbar as usual.
    return $admin_toolbar_exists ? admin_toolbar_prerender_toolbar_administration_tray($element) : toolbar_prerender_toolbar_administration_tray($element);
  }

  /* @var \Drupal\Core\Menu\MenuLinkTreeInterface $menu_tree */
  $menu_tree = \Drupal::service('toolbar.menu_tree');
  $parameters = new MenuTreeParameters();
  // Depending on whether the 'admin_toolbar' module exists we should change the
  // menu depth shown in the toolbar.
  $max_depth = $admin_toolbar_exists ? 4 : 2;
  $parameters->setMinDepth(2)->setMaxDepth($max_depth)->onlyEnabledLinks();
  $tree = $menu_tree->load('og_sm_admin_menu', $parameters);
  $manipulators = array(
    array('callable' => 'menu.default_tree_manipulators:checkAccess'),
    array('callable' => 'menu.default_tree_manipulators:generateIndexAndSort'),
    array('callable' => 'toolbar_tools_menu_navigation_links'),
  );
  $tree = $menu_tree->transform($tree, $manipulators);
  $element['administration_menu'] = $menu_tree->build($tree);

  return $element;
}
