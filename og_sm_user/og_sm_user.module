<?php
/**
 * @file
 * OG SM User.
 */

/**
 * Permissions.
 */
define('OG_SM_USER_FEATURE_PROFILE', 'og_sm_user_profile');

/**
 * Implements hook_hook_info().
 */
function og_sm_user_hook_info() {
  $hooks = array(
    'og_sm_user_profile_info' => array(
      'group' => 'og_sm',
    ),
    'og_sm_user_profile_info_alter' => array(
      'group' => 'og_sm',
    ),
  );
  return $hooks;
}

/**
 * Implements hook_menu().
 */
function og_sm_user_menu() {
  $items = array();

  $items['group/node/%og_sm_site/profile'] = array(
    'title callback' => 'user_menu_title',
    'page callback' => 'og_sm_user_page',
    'page arguments' => array(2),
    'access callback' => 'og_sm_user_page_access',
    'access arguments' => array('view', 2),
    'file' => 'og_sm_user.pages.inc',
    'type' => MENU_CALLBACK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['group/node/%og_sm_site/profile/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  // Don't use node/x/x/edit, the path will trigger the theme setting that
  // enabled the admin theme.
  $items['group/node/%og_sm_site/profile/modify'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('og_sm_user_edit_form', 2),
    'access callback' => 'og_sm_user_page_access',
    'access arguments' => array('edit', 2),
    'file' => 'og_sm_user.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  $items['group/node/%og_sm_site/profile/%user'] = array(
    'title callback' => 'user_page_title',
    'title arguments' => array(4),
    'page callback' => 'og_sm_user_page',
    'page arguments' => array(2, 4),
    'access callback' => 'og_sm_user_page_access',
    'access arguments' => array('view', 2, 4),
    'file' => 'og_sm_user.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['group/node/%og_sm_site/profile/%user/modify'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('og_sm_user_edit_form', 2, 4),
    'access callback' => 'og_sm_user_page_access',
    'access arguments' => array('edit', 2, 4),
    'file' => 'og_sm_user.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['group/%/%og_sm_site/admin/features/user'] = array(
    'title' => 'User profile',
    'description' => 'Configure the user settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('og_sm_user_og_admin_feature', 2),
    'access callback' => 'og_sm_site_permission_access',
    'access arguments' => array(2, 'administer features'),
    'file' => 'og_sm_user.admin.inc',
  );

  $items['group/node/%og_sm_site/logout'] = array(
    'title' => 'Log out',
    'access callback' => 'user_is_logged_in',
    'page callback' => 'og_sm_user_logout_page',
    'file' => 'og_sm_user.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/group/features/user'] = array(
    'title' => 'User',
    'description' => 'Default user configuration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('og_sm_user_admin_feature'),
    'access arguments' => array('administer site features'),
    'file' => 'og_sm_user.admin.inc',
  );

  return $items;
}

/**
 * Custom access check to see if we can see the profile page.
 *
 * @param string $op
 *   The access operation, "view", "edit" or "cancel".
 * @param object $site
 *   The site node.
 * @param object|NULL $account
 *   (optional) The user profile object.
 *
 * @return bool
 *   Whether the user can access the page.
 */
function og_sm_user_page_access($op, $site, $account = NULL) {

  if (!module_exists('og_sm_feature')) {
    return FALSE;
  }
  if (!og_sm_feature_site_is_enabled($site, OG_SM_USER_FEATURE_PROFILE)) {
    return FALSE;
  }

  global $user;
  // An anonymous use can never have his own profile page so a profile should
  // always be supplied.
  if ($user->uid === 0 && empty($account)) {
    return FALSE;
  }
  if (!isset($account)) {
    $account = $user;
  }

  switch ($op) {
    case 'view':
      return user_view_access($account);

    case 'edit':
      if (!og_sm_variable_get($site->nid, 'og_sm_user_profile_editable')) {
        return FALSE;
      }
      return user_edit_access($account);
  }

  return FALSE;
}

/**
 * Get the path to the user profile page.
 *
 * If within Site context with the User Profile enabled > Site User profile.
 * Else the default Account page.
 *
 * @param object $account
 *   The user to get the path for.
 *
 * @return string
 *   The path to the profile page.
 */
function og_sm_user_profile_path($account) {
  $default = 'user/' . $account->uid;

  $site = og_sm_current_site();
  if (!$site) {
    return $default;
  }

  // Alter the link of the account item if the user Feature is active for the
  // current Site.
  if (!module_exists('og_sm_feature')) {
    return $default;
  }
  if (!og_sm_feature_site_is_enabled($site, OG_SM_USER_FEATURE_PROFILE)) {
    return $default;
  }

  // Point link to Site user profile.
  return 'group/node/' . $site->nid . '/profile';
}

/**
 * Implements hook_theme().
 */
function og_sm_user_theme() {
  return array(
    'og_sm_user_page' => array(
      'template' => 'templates/og_sm_user_page',
      'variables' => array(
        'sections' => array(),
        'user' => NULL,
      ),
    ),
    'og_sm_user_page_section' => array(
      'variables' => array(
        'label' => NULL,
        'elements' => NULL,
      ),
      'file' => 'og_sm_user.theme.inc',
    ),
  );
}

/**
 * Render callback for the basic info profile section.
 *
 * @param object $site
 *   The site node.
 * @param object $account
 *   The user object.
 *
 * @return array
 *   Renderable array to build the section markup.
 */
function og_sm_user_section_basic_info($site, $account) {
  return array(
    '#theme' => 'og_sm_user_page_section',
    '#label' => t('Profile'),
    '#elements' => array(
      'basic_info' => array(
        '#type' => 'html_tag',
        '#tag' => 'address',
        '#value' => $account->mail,
        '#label' => $account->name,
      ),
    ),
  );
}

/**
 * Implements hook_url_outbound_alter().
 */
function og_sm_user_url_outbound_alter(&$path, &$options, $original_path) {
  if (!module_exists('og_sm_path')) {
    return;
  }
  // Rewrite all outgoing unaliased profile paths and the logout path.
  if (preg_match('#^group/node/([0-9]+)(/profile.*|/logout)#', $path, $parts)) {
    $site = og_sm_site_load($parts[1]);
    if ($site) {
      $path = og_sm_path($site) . $parts[2];
    }
  }
}

/**
 * Implements hook_url_inbound_alter().
 */
function og_sm_user_url_inbound_alter(&$path, $original_path, $path_language) {
  if (!module_exists('og_sm_path')) {
    return;
  }
  if (preg_match('#^([\w/_-]+)(/profile.*|/logout)#', $path, $parts)) {
    $site = og_sm_path_load_site($parts[1]);
    if ($site) {
      $path = sprintf('group/node/%d%s', $site->nid, $parts[2]);
    }
  }
}

/**
 * Implements hook_admin_menu_output_alter().
 */
function og_sm_user_admin_menu_output_alter(&$content) {
  global $user;
  $content['account']['account']['#href'] = og_sm_user_profile_path($user);

  $site = og_sm_current_site();
  if ($site) {
    if (isset($content['account']['logout'])) {
      $content['account']['logout']['#href'] = 'group/node/' . $site->nid . '/logout';
    }
  }
}

/**
 * Implements hook_views_data_alter().
 */
function pp_group_profile_views_data_alter(&$data) {
  // Replace the username handler with our own version so we can link to the
  // Site profile page.
  $data['users']['name']['field']['handler'] = 'og_sm_user_views_handler_field_user_name';
}
