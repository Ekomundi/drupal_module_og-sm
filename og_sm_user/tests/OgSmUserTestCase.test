<?php
/**
 * @file
 * Tests for the og_sm_user module.
 */

/**
 * Tests about the OG SM User module.
 */
class OgSmUserTestCase extends OgSmWebTestCase {
  /**
   * Test data.
   */
  protected $site;
  protected $siteType;
  protected $siteAdmin;
  protected $siteUser1;
  protected $siteUser2;

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => t('Site User : Profile'),
      'description' => t('Tests the Site User Profile functionality.'),
      'group' => t('Organic Groups Site Manager'),
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    // Enable required modules.
    $modules = array('og_sm_user');
    parent::setUp($modules);

    // Create site.
    $this->siteType = $this->ogSmCreateGroupNodeType();
    og_sm_site_type_add($this->siteType);
    $this->site = $site = $this->ogSmCreateGroup($this->siteType);
    $sites = array($site);

    $roles = array_flip(og_roles('node', $this->siteType));

    // Create Site admin.
    $this->siteAdmin = $this->ogSmCreateGroupUser(array('administer users'), $sites);
    og_role_grant('node', $this->site->nid, $this->siteAdmin->uid, $roles[OG_ADMINISTRATOR_ROLE]);

    // Create Site users.
    $this->siteUser1 = $this->ogSmCreateGroupUser(array(), $sites);
    $this->siteUser2 = $this->ogSmCreateGroupUser(array(), $sites);
  }

  /**
   * Test viewing and editing site user profiles.
   */
  public function testViewUserProfile() {
    module_enable(array('og_sm_feature', 'og_sm_user_test'));

    $site_path = 'group/node/' . $this->site->nid;

    // Enable the user profile for this site.
    og_sm_feature_site_enable($this->site, OG_SM_USER_FEATURE_PROFILE);
    // Set the default value for the feature.
    og_sm_variable_set($this->site->nid, 'og_sm_user_profile_editable', TRUE);

    $this->drupalGet($site_path . '/profile');
    $this->assertResponse(403, 'An anonymous user cannot access his own profile page.');

    $this->drupalLogin($this->siteUser1);
    $this->drupalGet($site_path . '/profile');
    $this->assertResponse(200, 'An authenticated user can access his own profile page.');
    $this->assertText($this->siteUser1->name);

    $this->drupalGet($site_path . '/profile/modify');
    $this->assertResponse(200, 'An authenticated user can access his own profile edit form.');
    $edit = array(
      'favorite_animal' => 'ElePHPant',
    );
    $this->drupalPost(NULL, $edit, t('Save'));
    $this->drupalGet($site_path . '/profile');
    $this->assertText('ElePHPant', 'An authenticated user can change his favorite animal');

    og_sm_variable_set($this->site->nid, 'og_sm_user_profile_editable', FALSE);
    $this->drupalGet($site_path . '/profile/modify');
    $this->assertResponse(403, 'An authenticated user can not access his own profile edit form when editing is disabled.');
    og_sm_variable_set($this->site->nid, 'og_sm_user_profile_editable', TRUE);

    og_sm_feature_site_disable($this->site, OG_SM_USER_FEATURE_PROFILE);
    $this->drupalGet($site_path . '/profile');
    $this->assertResponse(403, 'An authenticated user cannot access his own profile page when the profile feature is disabled.');
    og_sm_feature_site_enable($this->site, OG_SM_USER_FEATURE_PROFILE);

    $this->drupalGet($site_path . '/profile/' . $this->siteUser1->uid);
    $this->assertResponse(200, 'An authenticated user can access his own profile page via the path containing the user ID.');
    $this->assertText($this->siteUser1->name);

    $this->drupalGet($site_path . '/profile/' . $this->siteUser2->uid);
    $this->assertResponse(403, 'An authenticated user cannot access another user his profile page.');

    $this->drupalLogin($this->siteAdmin);
    $this->drupalGet($site_path . '/profile');
    $this->assertResponse(200, 'An admin user can access his own profile page.');
    $this->assertText($this->siteAdmin->name);

    $this->drupalGet($site_path . '/profile/' . $this->siteUser2->uid);
    $this->assertResponse(200, 'An authenticated user can access another user his profile page.');
    $this->assertText($this->siteUser2->name);

    $this->drupalGet($site_path . '/profile/' . $this->siteUser2->uid . '/modify');
    $this->assertResponse(200, 'An admin user can access the profile edit form of another user.');
    $edit = array(
      'favorite_animal' => 'Llama',
    );
    $this->drupalPost(NULL, $edit, t('Save'));
    $this->drupalGet($site_path . '/profile/' . $this->siteUser2->uid);
    $this->assertText('Llama', 'An admin user can change the favorite animal of another user.');
  }

  /**
   * Test the hook_url_outbound_alter() implementation.
   */
  public function testUrlOutboundAlter() {
    // Enable the og_sm_path module.
    module_enable(array('og_sm_path'), TRUE);

    $site_path = 'site-path-test';
    og_sm_path_set($this->site, $site_path, FALSE);

    $site_nid = $this->site->nid;
    $options = array();

    // Test rewriting for non Site paths.
    $path = $path_expected = 'group/node/987654321/profile';
    og_sm_user_url_outbound_alter($path, $options, 'foo/bar');
    $this->assertEqual($path_expected, $path);

    // Test rewriting the profile page.
    $path = 'group/node/' . $site_nid . '/profile';
    $path_expected = $site_path . '/profile';
    og_sm_user_url_outbound_alter($path, $options, 'foo/bar');
    $this->assertEqual($path_expected, $path);

    // Test rewriting the profile edit page.
    $path = 'group/node/' . $site_nid . '/profile/modify';
    $path_expected = $site_path . '/profile/modify';
    og_sm_user_url_outbound_alter($path, $options, 'foo/bar');
    $this->assertEqual($path_expected, $path);

    // Test rewriting the profile page containing a user ID.
    $path = 'group/node/' . $site_nid . '/profile/' . $this->siteAdmin->uid;
    $path_expected = $site_path . '/profile/' . $this->siteAdmin->uid;
    og_sm_user_url_outbound_alter($path, $options, 'foo/bar');
    $this->assertEqual($path_expected, $path);

    // Test rewriting the profile edit page containing a user ID.
    $path = 'group/node/' . $site_nid . '/profile/' . $this->siteAdmin->uid . '/modify';
    $path_expected = $site_path . '/profile/' . $this->siteAdmin->uid . '/modify';
    og_sm_user_url_outbound_alter($path, $options, 'foo/bar');
    $this->assertEqual($path_expected, $path);

    // Test rewriting the logout page.
    $path = 'group/node/' . $site_nid . '/logout';
    $path_expected = $site_path . '/logout';
    og_sm_user_url_outbound_alter($path, $options, 'foo/bar');
    $this->assertEqual($path_expected, $path);
  }

  /**
   * Test the hook_url_inbound_alter() implementation.
   */
  public function testUrlInboundAlter() {
    // Enable the og_sm_path module.
    module_enable(array('og_sm_path'), TRUE);

    $site_path = 'site-path-test';
    og_sm_path_set($this->site, $site_path, FALSE);

    $site_nid = $this->site->nid;

    // Not a Site path.
    $path = $path_expected = 'content/test/45687266/profile';
    og_sm_user_url_inbound_alter($path, 'foo/bar', 'en');
    $this->assertEqual($path_expected, $path);

    // The profile page.
    $path = $site_path . '/profile';
    $path_expected = 'group/node/' . $site_nid . '/profile';
    og_sm_user_url_inbound_alter($path, 'foo/bar', 'nl');
    $this->assertEqual($path_expected, $path);

    // The profile edit page.
    $path = $site_path . '/profile/modify';
    $path_expected = 'group/node/' . $site_nid . '/profile/modify';
    og_sm_user_url_inbound_alter($path, 'foo/bar', 'nl');
    $this->assertEqual($path_expected, $path);

    // The profile page containing a user ID.
    $path = $site_path . '/profile/' . $this->siteAdmin->uid;
    $path_expected = 'group/node/' . $site_nid . '/profile/' . $this->siteAdmin->uid;
    og_sm_user_url_inbound_alter($path, 'foo/bar', 'nl');
    $this->assertEqual($path_expected, $path);

    // The profile edit page containing a user ID.
    $path = $site_path . '/profile/' . $this->siteAdmin->uid . '/modify';
    $path_expected = 'group/node/' . $site_nid . '/profile/' . $this->siteAdmin->uid . '/modify';
    og_sm_user_url_inbound_alter($path, 'foo/bar', 'nl');
    $this->assertEqual($path_expected, $path);

    // The user logout page.
    $path = $site_path . '/logout';
    $path_expected = 'group/node/' . $site_nid . '/logout';
    og_sm_user_url_inbound_alter($path, 'foo/bar', 'nl');
    $this->assertEqual($path_expected, $path);
  }

  /**
   * Test the og_sm_user_page_access() callback.
   */
  public function testUserPageCallback() {
    module_enable(array('og_sm_feature'));
    // Enable the user profile for this site.
    og_sm_feature_site_enable($this->site, OG_SM_USER_FEATURE_PROFILE);
    og_sm_variable_set($this->site->nid, 'og_sm_user_profile_editable', TRUE);

    $GLOBALS['user'] = $this->siteUser1;
    $access = og_sm_user_page_access('view', $this->site, $this->siteUser1);
    $this->assertTrue($access, 'User 1 is allowed to view his own profile.');
    $access = og_sm_user_page_access('edit', $this->site, $this->siteUser1);
    $this->assertTrue($access, 'User 1 is allowed to edit his own profile.');
    $access = og_sm_user_page_access('view', $this->site, $this->siteUser2);
    $this->assertFalse($access, 'User 1 is not allowed to view the profile of another user.');
    $access = og_sm_user_page_access('edit', $this->site, $this->siteUser2);
    $this->assertFalse($access, 'User 1 is not allowed to edit the profile of another user.');

    $profile_viewer = $this->ogSmCreateGroupUser(array('access user profiles'), array($this->site));
    $GLOBALS['user'] = $profile_viewer;
    drupal_static_reset('user_access');
    $access = og_sm_user_page_access('view', $this->site, $this->siteUser2);
    $this->assertTrue($access, 'Profile viewer is allowed to view the profile of another user.');
    $access = og_sm_user_page_access('edit', $this->site, $this->siteUser2);
    $this->assertFalse($access, 'Profile viewer is not allowed to edit the profile of another user.');

    $GLOBALS['user'] = $this->siteAdmin;
    drupal_static_reset('user_access');
    $access = og_sm_user_page_access('view', $this->site, $this->siteUser2);
    $this->assertTrue($access, 'Admin user is allowed to view the profile of another user.');
    $access = og_sm_user_page_access('edit', $this->site, $this->siteUser2);
    $this->assertTrue($access, 'Admin user is allowed to edit the profile of another user.');
    og_sm_variable_set($this->site->nid, 'og_sm_user_profile_editable', FALSE);
    $access = og_sm_user_page_access('edit', $this->site, $this->siteUser2);
    $this->assertFalse($access, 'Admin user is not allowed to edit the profile of another user when editing is disabled.');
  }

  /**
   * Test the helper to get the user profile path.
   */
  public function testProfilePath() {
    module_enable(array('og_sm_feature'));

    $default_path = 'user/' . $this->siteUser1->uid;
    $site_path = 'group/node/' . $this->site->nid . '/profile';

    $this->assertEqual(
      $default_path,
      og_sm_user_profile_path($this->siteUser1),
      'Path outside Sites links to the drupal account page.'
    );

    $this->ogSmSetOgContextToGroup($this->site, $this->siteUser1);
    $this->assertEqual(
      $default_path,
      og_sm_user_profile_path($this->siteUser1),
      'Path within Sites without enabled User profile feature links to the drupal account page.'
    );

    // Enable the user profile for the site.
    og_sm_feature_site_enable($this->site, OG_SM_USER_FEATURE_PROFILE);
    $this->ogSmResetOgContext();
    $this->assertEqual(
      $default_path,
      og_sm_user_profile_path($this->siteUser1),
      'Path outside Sites links to the drupal account page.'
    );

    $this->ogSmSetOgContextToGroup($this->site);
    $this->assertEqual(
      $site_path,
      og_sm_user_profile_path($this->siteUser1),
      'Path within Sites with enabled User profile feature links to the Site account page.'
    );
  }

}
