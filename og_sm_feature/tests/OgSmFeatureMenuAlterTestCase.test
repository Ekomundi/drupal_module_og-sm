<?php

/**
 * @file
 * Tests about the Site Feature menu alters.
 */

/**
 * Tests about the menu alters.
 */
class OgSmFeatureMenuAlterTestCase extends OgSmWebTestCase {
  /**
   * Site node object.
   *
   * @var object
   */
  private $siteNode;

  /**
   * Vocabulary "categories" to run tests with.
   *
   * @var object
   */
  private $vocabCategories;

  /**
   * Site administrator.
   *
   * @var object
   */
  private $siteAdministrator;

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => t('Site Feature : Menu alter'),
      'description' => t('Tests OG Site Manager Feature menu alters.'),
      'group' => t('Organic Groups Site Manager'),
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    // Enable required modules.
    $modules = array('og_sm_feature_test', 'og_sm_content', 'og_sm_taxonomy');
    parent::setUp($modules);

    // Create a Site.
    $type = $this->ogSmCreateGroupNodeType();
    og_sm_site_type_add($type);
    $this->siteNode = $this->ogSmCreateGroup($type);

    // Create the news content type.
    $this->ogSmCreateGroupContentNodeType('news');

    // Create vocabularies.
    $this->vocabCategories = $this->ogSmCreateGroupVocabulary('categories');

    // Create site administrator.
    $sites = array($this->siteNode);
    $this->siteAdministrator = $this->ogSmCreateGroupUser(array(), $sites);
    $site_admin_role = og_role_create('site_admin_role', 'node', 0, $type);
    og_role_save($site_admin_role);
    og_role_grant_permissions(
      $site_admin_role->rid,
      array(
        OG_SM_FEATURE_OG_PERM_ADMINISTER_FEATURES,
        OG_SM_CONTENT_OG_PERM_ADMINISTER_CONTENT_TYPES,
        OG_SM_TAXONOMY_OG_PERM_ALL,
        'create news content',
      )
    );
    og_role_grant('node', $this->siteNode->nid, $this->siteAdministrator->uid, $site_admin_role->rid);

    // Disable all contexts to avoid notices.
    variable_set('og_context_negotiation_group_context', array());
    variable_set('og_context_providers_weight_group_context', array());
  }

  /**
   * Test access callback and menu alter to add content & edit content types.
   */
  public function testNodeAccessCallbackAndMenuAlter() {
    $account = $this->siteAdministrator;
    $site = $this->siteNode;
    $url_news_add = 'group/node/' . $site->nid . '/content/add/news';
    $url_news_type = 'group/node/' . $site->nid . '/admin/structure/types/news';

    $this->drupalLogin($account);

    // No feature having the news content type enabled.
    $this->assertFalse(
      og_sm_feature_access_content_add($this->siteNode, 'news', $account),
      'No access to add content when related feature(s) are not enabled.'
    );
    $this->drupalGet($url_news_add);
    $this->assertResponse(403, 'No access to add news content when feature(s) are not enabled.');
    $this->assertFalse(
      og_sm_feature_access_admin_content_type($this->siteNode, 'news'),
      'No access to manage content type when related feature(s) are not enabled.'
    );
    $this->drupalGet($url_news_type);
    $this->assertResponse(403, 'No access to edit news content type when feature(s) are not enabled.');

    // Enable feature having news as content type.
    og_sm_feature_site_enable($site, 'news');
    $this->assertTrue(
      og_sm_feature_access_content_add($this->siteNode, 'news', $account),
      'User has access to add content when related feature(s) are not enabled.'
    );
    $this->drupalGet($url_news_add);
    $this->assertResponse(200, 'Access to add news content when feature(s) are not enabled.');
    $this->assertTrue(
      og_sm_feature_access_admin_content_type($this->siteNode, 'news'),
      'User has access to manage content type when related feature(s) are not enabled.'
    );
    $this->drupalGet($url_news_type);
    $this->assertResponse(200, 'Access to edit news content type when feature(s) are not enabled.');
  }

  /**
   * Test access callback and menu alter to manage Site vocabularies.
   */
  public function testTaxonomyAccessCallbackAndMenuAlter() {
    $account = $this->siteAdministrator;
    $site = $this->siteNode;
    $this->drupalLogin($account);
    $url_edit = 'group/node/' . $site->nid . '/admin/taxonomy/categories';
    $url_add = 'group/node/' . $site->nid . '/admin/taxonomy/categories/add';

    // No feature having the tags vocabulary enabled.
    $this->assertFalse(
      og_sm_feature_access_taxonomy_admin($site, $this->vocabCategories, $account),
      'No access to manage vocabulary if feature is not enabled.'
    );
    $this->drupalGet($url_edit);
    $this->assertResponse(403, 'No access to the vocabulary overview if feature is not enabled.');
    $this->drupalGet($url_add);
    $this->assertResponse(403, 'No access to the add new vocabulary term if feature is not enabled.');

    // Feature is enabled.
    og_sm_feature_site_enable($site, 'articles');
    $this->assertTrue(
      og_sm_feature_access_taxonomy_admin($site, $this->vocabCategories, $account),
      'Use has access to manage vocabulary if feature is enabled.'
    );
    $this->drupalGet($url_edit);
    $this->assertResponse(200, 'Access to the vocabulary overview if feature is enabled.');
    $this->drupalGet($url_add);
    $this->assertResponse(200, 'Access to the add new vocabulary term if feature is enabled.');
  }

}
