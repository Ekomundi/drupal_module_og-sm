<?php

/**
 * @file
 * Tests about the Site Feature menu alters.
 */

/**
 * Tests about the menu alters.
 */
class OgSmFeatureMenuAlterTestCase extends OgSmWebTestCase {
  /**
   * Site node object.
   *
   * @var object
   */
  private $siteNode;

  /**
   * Vocabulary "categories" to run tests with.
   *
   * @var object
   */
  private $vocabCategories;

  /**
   * Site administrator.
   *
   * @var object
   */
  private $siteAdministrator;

  /**
   * Site editor.
   *
   * @var object
   */
  private $siteEditor;

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => t('Site Feature : Menu alter'),
      'description' => t('Tests OG Site Manager Feature menu alters.'),
      'group' => t('Organic Groups Site Manager'),
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    // Enable required modules.
    $modules = array('og_sm_feature_test', 'og_sm_content', 'og_sm_taxonomy');
    parent::setUp($modules);

    // Create a Site.
    $type = $this->ogSmCreateGroupNodeType();
    og_sm_site_type_add($type);
    $this->siteNode = $this->ogSmCreateGroup($type);

    // Create the news content type.
    $this->ogSmCreateGroupContentNodeType('news');
    $this->ogSmCreateGroupContentNodeType('blog_post');

    // Create vocabularies.
    $this->vocabCategories = $this->ogSmCreateGroupVocabulary('categories');

    // Create site administrator.
    $this->siteAdministrator = $this->setUpSiteUserAdministrator($this->siteNode);
    $this->siteEditor = $this->setUpSiteUserEditor($this->siteNode);

    // Disable all contexts to avoid notices.
    variable_set('og_context_negotiation_group_context', array());
    variable_set('og_context_providers_weight_group_context', array());
  }

  /**
   * Helper to setup a Site Administrator user.
   *
   * @param object $site
   *   The Site node.
   *
   * @return object
   *   User object.
   */
  private function setUpSiteUserAdministrator($site) {
    $siteAdministrator = $this->ogSmCreateGroupUser(array(), array($site));

    $siteAdminRole = og_role_create('site_admin_role', 'node', 0, $site->type);
    og_role_save($siteAdminRole);
    og_role_grant_permissions(
      $siteAdminRole->rid,
      array(
        OG_SM_FEATURE_OG_PERM_ADMINISTER_FEATURES,
        OG_SM_CONTENT_OG_PERM_ADMINISTER_CONTENT_TYPES,
        OG_SM_TAXONOMY_OG_PERM_ALL,
        'create news content',
        'create blog_post content',
      )
    );
    og_role_grant('node', $site->nid, $siteAdministrator->uid, $siteAdminRole->rid);

    return $siteAdministrator;
  }

  /**
   * Helper to setup a Site Editor user.
   *
   * Account who can add content but can't manage features.
   *
   * @param object $site
   *   The Site node.
   *
   * @return object
   *   User object.
   */
  private function setUpSiteUserEditor($site) {
    $siteEditor = $this->ogSmCreateGroupUser(array(), array($site));

    $siteEditorRole = og_role_create('site_editor_role', 'node', 0, $site->type);
    og_role_save($siteEditorRole);
    og_role_grant_permissions(
      $siteEditorRole->rid,
      array(
        'create news content',
        'create blog_post content',
      )
    );
    og_role_grant('node', $site->nid, $siteEditor->uid, $siteEditorRole->rid);

    return $siteEditor;
  }

  /**
   * Test access callback and menu alter to add content & edit content types.
   */
  public function testNodeAccessCallbackAndMenuAlter() {
    $account = $this->siteAdministrator;
    $site = $this->siteNode;
    $url_news_add = 'group/node/' . $site->nid . '/content/add/news';
    $url_news_type = 'group/node/' . $site->nid . '/admin/structure/types/news';

    $this->drupalLogin($account);

    // No feature having the news content type enabled.
    $this->assertFalse(
      og_sm_feature_access_content_add($this->siteNode, 'news', $account),
      'No access to add content when related feature(s) are not enabled.'
    );
    $this->drupalGet($url_news_add);
    $this->assertResponse(403, 'No access to add news content when feature(s) are not enabled.');
    $this->assertFalse(
      og_sm_feature_access_admin_content_type($this->siteNode, 'news'),
      'No access to manage content type when related feature(s) are not enabled.'
    );
    $this->drupalGet($url_news_type);
    $this->assertResponse(403, 'No access to edit news content type when feature(s) are not enabled.');

    // Enable feature having news as content type.
    og_sm_feature_site_enable($site, 'news');
    $this->assertTrue(
      og_sm_feature_access_content_add($this->siteNode, 'news', $account),
      'User has access to add content when related feature(s) are not enabled.'
    );
    $this->drupalGet($url_news_add);
    $this->assertResponse(200, 'Access to add news content when feature(s) are not enabled.');
    $this->assertTrue(
      og_sm_feature_access_admin_content_type($this->siteNode, 'news'),
      'User has access to manage content type when related feature(s) are not enabled.'
    );
    $this->drupalGet($url_news_type);
    $this->assertResponse(200, 'Access to edit news content type when feature(s) are not enabled.');
  }

  /**
   * Test access callback and menu alter to manage Site vocabularies.
   */
  public function testTaxonomyAccessCallbackAndMenuAlter() {
    $account = $this->siteAdministrator;
    $site = $this->siteNode;
    $this->drupalLogin($account);
    $url_edit = 'group/node/' . $site->nid . '/admin/taxonomy/categories';
    $url_add = 'group/node/' . $site->nid . '/admin/taxonomy/categories/add';

    // No feature having the tags vocabulary enabled.
    $this->assertFalse(
      og_sm_feature_access_taxonomy_admin($site, $this->vocabCategories, $account),
      'No access to manage vocabulary if feature is not enabled.'
    );
    $this->drupalGet($url_edit);
    $this->assertResponse(403, 'No access to the vocabulary overview if feature is not enabled.');
    $this->drupalGet($url_add);
    $this->assertResponse(403, 'No access to the add new vocabulary term if feature is not enabled.');

    // Feature is enabled.
    og_sm_feature_site_enable($site, 'articles');
    $this->assertTrue(
      og_sm_feature_access_taxonomy_admin($site, $this->vocabCategories, $account),
      'Use has access to manage vocabulary if feature is enabled.'
    );
    $this->drupalGet($url_edit);
    $this->assertResponse(200, 'Access to the vocabulary overview if feature is enabled.');
    $this->drupalGet($url_add);
    $this->assertResponse(200, 'Access to the add new vocabulary term if feature is enabled.');
  }

  /**
   * Test admin menu item alter hook.
   */
  public function testTranslatedMenuLinkAlter() {
    module_enable(array('og_sm_feature_test'), TRUE);
    $this->ogSmSetOgContextToGroup($this->siteNode);

    // Feature is not enabled.
    $item = array(
      'options' => array('og_sm_feature' => 'news'),
      'access' => TRUE,
    );
    $expected = array(
      'options' => array('og_sm_feature' => 'news'),
      'access' => FALSE,
    );
    og_sm_feature_translated_menu_link_alter($item, NULL);
    $this->assertEqual($expected, $item);

    // Feature is enabled.
    og_sm_feature_site_enable($this->siteNode, 'news');
    $item = array(
      'options' => array('og_sm_feature' => 'news'),
      'access' => TRUE,
    );
    $expected = array(
      'options' => array('og_sm_feature' => 'news'),
      'access' => TRUE,
    );
    og_sm_feature_translated_menu_link_alter($item, NULL);
    $this->assertEqual($expected, $item);
  }

  /**
   * Test altering the Add overview page when no features enabled.
   */
  public function testContentAddOverviewAlter() {
    $site = $this->siteNode;
    $siteAdmin = $this->siteAdministrator;
    $siteEditor = $this->siteEditor;
    $url_overview = 'group/node/' . $site->nid . '/content/add';

    // Site Administrator : No features containing content types enabled.
    $this->drupalLogin($siteAdmin);
    $this->drupalGet($url_overview);
    $this->assertText(
      'There are no features active providing content types.',
      'Site Administrator : Text IS shown that there are no features active with content types.'
    );
    $this->assertText(
      'Administer Features',
      'Site Administrator : Link is shown to manage the features.'
    );

    // Site Editor : No features containing content types enabled.
    $this->drupalLogin($siteEditor);
    $this->drupalGet($url_overview);
    $this->assertText(
      'There are no features active providing content types.',
      'Site Editor : Text IS shown that there are no features active with content types.'
    );
    $this->assertNoText(
      'Administer Features',
      'Site Editor : Link to administer features is not shown.'
    );

    // Enable feature.
    og_sm_feature_site_enable($site, 'news and blogs');

    // Site Administrator : Feature containing content types enabled.
    $this->drupalLogin($siteAdmin);
    $this->drupalGet($url_overview);
    $this->assertNoText(
      'There are no features active providing content types.',
      'Site Administrator : Text IS NOT shown that there are no features active with content types.'
    );

    // Site Editor : Feature containing content types enabled.
    $this->drupalLogin($siteEditor);
    $this->drupalGet($url_overview);
    $this->assertNoText(
      'There are no features active providing content types.',
      'Site Editor : Text IS NOT shown that there are no features active with content types.'
    );
  }

}
