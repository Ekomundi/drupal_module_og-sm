<?php

/**
 * @file
 * Tests about the Site Feature Admin interface.
 */

/**
 * Tests about the API to check features.
 */
class OgSmFeatureAdminTestCase extends OgSmWebTestCase {
  /**
   * Site node object.
   *
   * @var object
   */
  private $siteNode;

  /**
   * Admin user to test with.
   *
   * @var object
   */
  private $userAdministrator;

  /**
   * Global user to test the global configuration.
   *
   * @var object
   */
  private $userWithGlobalPermission;

  /**
   * Site member.
   *
   * @var object
   */
  private $siteMember;

  /**
   * Site administrator.
   *
   * @var object
   */
  private $siteAdministrator;

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => t('Site Feature : Administration'),
      'description' => t('Tests OG Site Manager Feature administration page.'),
      'group' => t('Organic Groups Site Manager'),
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    // Enable required modules.
    $modules = array('og_sm_feature_test');
    parent::setUp($modules);

    // Create a Site.
    $type = $this->ogSmCreateGroupNodeType();
    og_sm_site_type_add($type);
    $this->siteNode = $this->ogSmCreateGroup($type);

    // Create global admin user.
    $this->userAdministrator = $this->ogSmCreateAdminUser();

    // Create global user with permission.
    $this->userWithGlobalPermission = $this->drupalCreateUser(
      array(OG_SM_FEATURE_PERM_ADMINISTER_SITE_FEATURES)
    );

    // Create site member.
    $sites = array($this->siteNode);
    $this->siteMember = $this->ogSmCreateGroupUser(array(), $sites);

    // Create site administrator.
    $this->siteAdministrator = $this->ogSmCreateGroupUser(array(), $sites);
    $site_admin_role = og_role_create('site_admin_role', 'node', 0, $type);
    og_role_save($site_admin_role);
    og_role_grant_permissions($site_admin_role->rid, array(OG_SM_FEATURE_OG_PERM_ADMINISTER_FEATURES));
    og_role_grant('node', $this->siteNode->nid, $this->siteAdministrator->uid, $site_admin_role->rid);

    // Disable all contexts to avoid notices.
    variable_set('og_context_negotiation_group_context', array());
    variable_set('og_context_providers_weight_group_context', array());
  }

  /**
   * Test the Global administration page.
   */
  public function testGlobalAdministration() {
    $path = 'admin/config/group/features';

    // Not logged in users have no access.
    $this->drupalGet($path);
    $this->assertResponse(403, 'Not logged in users have no access to the features overview.');

    // Platform administrator has access.
    $this->drupalLogin($this->userAdministrator);
    $this->drupalGet($path);
    $this->assertResponse(200, 'Platform administrator can access the features overview page.');
    $this->assertText(t('OG Features'), 'OG Features title is set.');

    // User with proper permissions has access.
    $this->drupalLogin($this->userWithGlobalPermission);
    $this->drupalGet($path);
    $this->assertResponse(200, 'User with proper permissions can access the features overview page.');

    // Check fields.
    $this->assertRaw(
      '<td><div class="feature"><strong>News</strong></div><div class="description">News content and overviews.</div></td>',
      'Feature "News" and its description are in the form.'
    );
    $this->assertRaw(
      '<td><a href="/admin/config/group/features/news-test?destination=admin/config/group/features">Configuration</a></td>',
      'Feature "News" has a configuration link.'
    );
    $this->assertNoFieldChecked('edit-features-news', 'Feature "News" is not enabled.');
    $this->assertRaw(
      '<td><div class="feature"><strong>Articles</strong></div></td>',
      'Feature "Articles" has no description.'
    );
    $this->assertNoFieldChecked('edit-features-articles', 'Feature "Articles" is not enabled.');

    // Test posting the form.
    $edit = array(
      'features[news]' => FALSE,
      'features[articles]' => TRUE,
    );
    $this->drupalPost($path, $edit, t('Save'));
    $this->assertText(t('Saved default Feature statuses.'), 'Default feature statuses have changed.');
    $this->assertNoFieldChecked('edit-features-news', 'Feature "News" is not enabled.');
    $this->assertFieldChecked('edit-features-articles', 'Feature "Articles" is enabled.');
  }

  /**
   * Test the Site administration page.
   */
  public function testSiteAdministration() {
    $path = sprintf('group/node/%d/admin/features', $this->siteNode->nid);

    // Not logged in users have no access.
    $this->drupalGet($path);
    $this->assertResponse(403, 'Not logged in users have no access to the features overview.');

    // Site member has no access.
    $this->drupalLogin($this->siteMember);
    $this->drupalGet($path);
    $this->assertResponse(403, 'Site members without proper permission can access the features overview.');

    // Site administrator has access.
    $this->drupalLogin($this->siteAdministrator);
    $this->drupalGet($path);
    $this->assertResponse(200, 'Site members with proper permission can access the features overview.');

    // As administrator.
    $this->drupalLogin($this->userAdministrator);
    $this->drupalGet($path);
    $this->assertResponse(200, 'Platform administrator can access the features overview page.');
    $this->assertText(t('Features'), 'Features title is set.');

    // Check fields.
    $this->assertRaw(
      '<td><div class="feature"><strong>News</strong></div><div class="description">News content and overviews.</div></td>',
      'Feature "News" and its description are in the form.'
    );
    $this->assertRaw(
      '<td><a href="/group/node/1/admin/features/news-test?destination=group/node/1/admin/features">Configuration</a></td>',
      'Feature "News" has a configuration link.'
    );
    $this->assertNoFieldChecked('edit-features-news', 'Feature "News" is not enabled.');
    $this->assertRaw(
      '<td><div class="feature"><strong>Articles</strong></div></td>',
      'Feature "Articles" has no description.'
    );
    $this->assertNoFieldChecked('edit-features-articles', 'Feature "Articles" is not enabled.');

    // Test posting the form.
    $edit = array(
      'features[news]' => FALSE,
      'features[articles]' => TRUE,
    );
    $this->drupalPost($path, $edit, t('Save'));
    $this->assertText(t('Saved Feature statuses.'), 'Feature statuses have changed.');
    $this->assertNoFieldChecked('edit-features-news', 'Feature "News" is not enabled.');
    $this->assertFieldChecked('edit-features-articles', 'Feature "Articles" is enabled.');
  }

}
