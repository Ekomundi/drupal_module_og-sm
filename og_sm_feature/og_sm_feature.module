<?php
/**
 * @file
 * Feature module file.
 */

/**
 * Variable "Namespace" to store the og_sm_feature settings.
 */
define('OG_SM_FEATURE_NAMESPACE', 'og_sm_feature_%s');

/**
 * Global permission to manage the default features.
 */
define('OG_SM_FEATURE_PERM_ADMINISTER_SITE_FEATURES', 'administer site features');

/**
 * OG permission to manage the Site features.
 */
define('OG_SM_FEATURE_OG_PERM_ADMINISTER_FEATURES', 'administer features');

/**
 * Implements hook_hook_info().
 */
function og_sm_feature_hook_info() {
  $hooks = array(
    'og_sm_feature_info' => array(
      'group' => 'og_sm',
    ),
    'og_sm_feature_info_alter' => array(
      'group' => 'og_sm',
    ),
  );

  return $hooks;
}

/**
 * Implements hook_permission().
 */
function og_sm_feature_permission() {
  return array(
    OG_SM_FEATURE_PERM_ADMINISTER_SITE_FEATURES => array(
      'title' => t('Administer Features'),
      'description' => t('Manage the global Site features settings.'),
    ),
  );
}

/**
 * Implements hook_og_permission().
 */
function og_sm_feature_og_permission() {
  return array(
    OG_SM_FEATURE_OG_PERM_ADMINISTER_FEATURES => array(
      'title' => t('Administer Features'),
      'description' => t('Enable/disable Site features.'),
      'roles' => array(OG_AUTHENTICATED_ROLE),
      'default role' => array(OG_ADMINISTRATOR_ROLE),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function og_sm_feature_menu() {
  $items = array();

  $items['admin/config/group/features'] = array(
    'title' => 'OG Features',
    'description' => 'Configuration of the OG features.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('og_sm_feature_admin_overview'),
    'access arguments' => array(OG_SM_FEATURE_PERM_ADMINISTER_SITE_FEATURES),
    'file' => 'og_sm_feature.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['group/%/%og_sm_site/admin/features'] = array(
    'title' => 'Features',
    'description' => 'Enable/Disable features.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('og_sm_feature_og_admin_overview', 2),
    'access callback' => 'og_sm_site_permission_access',
    'access arguments' => array(2, OG_SM_FEATURE_OG_PERM_ADMINISTER_FEATURES),
    'file' => 'og_sm_feature.og_admin.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 *
 * Alter menu items access checks if they are related to features.
 */
function og_sm_feature_menu_alter(&$items) {
  // Only required if the Content module is enabled.
  if (!module_exists('og_sm_content')) {
    return;
  }

  $features = og_sm_feature_info();
  foreach ($features as $feature => $info) {
    if (empty($info['content types'])) {
      continue;
    }

    // Alter the access callbacks for content types.
    foreach ($info['content types'] as $content_type) {
      $path_add = 'group/%/%og_sm_site/content/add/' . $content_type;
      $items[$path_add]['access callback'] = 'og_sm_feature_access_content_add';
      $items[$path_add]['access arguments'] = array(2, $feature, 5);

      $path_type = 'group/%/%og_sm_site/admin/structure/types/' . $content_type;
      $items[$path_type]['access callback'] = 'og_sm_feature_access_admin_content_type';
      $items[$path_type]['access arguments'] = array(2, $feature);
    }
  }
}

/**
 * Custom access callback for adding new content within a Site.
 *
 * @param object $site
 *   The Site object.
 * @param string $feature
 *   The feature name.
 * @param string $node_type
 *   The Node type.
 * @param object $account
 *   The optional account to test the access for.
 *
 * @return bool
 *   Has access TRUE/FALSE.
 */
function og_sm_feature_access_content_add($site, $feature, $node_type, $account = NULL) {
  if (!og_sm_feature_site_is_enabled($site, $feature)) {
    return FALSE;
  }

  return og_sm_content_add_content_access($site, $node_type, $account);
}

/**
 * Custom access callback for administrating a content type within a Site.
 *
 * @param object $site
 *   The Site object.
 * @param string $feature
 *   The feature name.
 * @param object $account
 *   The optional account to test the access for.
 *
 * @return bool
 *   Has access TRUE/FALSE.
 */
function og_sm_feature_access_admin_content_type($site, $feature, $account = NULL) {
  if (!og_sm_feature_site_is_enabled($site, $feature)) {
    return FALSE;
  }

  return og_sm_site_permission_access($site, OG_SM_PERMISSION_SITE_ADMIN, $account);
}

/**
 * Access callback to see if a permission is enabled for an optional Site.
 *
 * If no Site is provided, the current (if any) will be used.
 *
 * @param string $feature
 *   The feature name.
 * @param object $site
 *   Optional site to check the access for. If no Site is provided, the current
 *   Site from OG context will be used.
 *
 * @return bool
 *   Has access.
 */
function og_sm_feature_access($feature, $site = NULL) {
  if (is_null($site)) {
    $site = og_sm_current_site();
  }

  if (!$site) {
    return FALSE;
  }

  return og_sm_feature_site_is_enabled($site, $feature);
}

/**
 * Get the information about all features.
 *
 * The information titles & description will be available in the current
 * language.
 *
 * @return array
 *   The information array grouped per feature.
 */
function og_sm_feature_info() {
  // We cache per language as the name & description are translated and the
  // items are ordered by their translated name.
  global $language;
  $cid = __FUNCTION__ . ':' . $language->language;

  // Check if we already cached the information.
  $cache = cache_get($cid);
  if ($cache) {
    return $cache->data;
  }

  $items = array();
  $modules = module_implements('og_sm_feature_info');
  foreach ($modules as $module) {
    $module_items = call_user_func($module . '_og_sm_feature_info');
    foreach (array_keys($module_items) as $item_key) {
      // Add defaults.
      $module_items[$item_key] += array(
        'description' => NULL,
        'content types' => array(),
        'global configuration' => NULL,
        'site configuration' => NULL,
      );
    }

    if ($module_items) {
      $items = array_merge($items, $module_items);
    }
  }

  // Allow modules to alter information from each other.
  drupal_alter('og_sm_feature_info', $items);

  // Order the items by name.
  uasort($items, 'og_sm_feature_info_sort');

  // Store in cache.
  cache_set($cid, $items);

  // Return data.
  return $items;
}

/**
 * Array sorting callback; sorts info by their name.
 */
function og_sm_feature_info_sort($a, $b) {
  return strcasecmp($a['name'], $b['name']);
}

/**
 * Check if a feature exists by its name.
 *
 * This will check in the og_sm_feature_info() array if the feature is
 * listed.
 *
 * @param string $feature_name
 *   The feature name.
 *
 * @return bool
 *   Exists TRUE/FALSE.
 */
function og_sm_feature_exists($feature_name) {
  $features = og_sm_feature_info();
  return array_key_exists($feature_name, $features);
}

/**
 * Enable a feature for the given Site.
 *
 * @param object $site
 *   The Site node object.
 * @param string $feature_name
 *   The name of the feature.
 */
function og_sm_feature_site_enable($site, $feature_name) {
  if (!og_sm_feature_exists($feature_name)) {
    return;
  }

  $variable_key = og_sm_feature_variable_key($feature_name);
  og_sm_variable_set($site->nid, $variable_key, TRUE);
}

/**
 * Disable a feature for the given Site.
 *
 * @param object $site
 *   The Site node object.
 * @param string $feature_name
 *   The name of the feature.
 */
function og_sm_feature_site_disable($site, $feature_name) {
  if (!og_sm_feature_exists($feature_name)) {
    return;
  }

  $variable_key = og_sm_feature_variable_key($feature_name);
  og_sm_variable_set($site->nid, $variable_key, FALSE);
}

/**
 * Check if a feature is enabled for the given Site.
 *
 * @param object $site
 *   The Site node object.
 * @param string $feature_name
 *   The name of the feature.
 *
 * @return bool
 *   Is enabled TRUE/FALSE.
 */
function og_sm_feature_site_is_enabled($site, $feature_name) {
  $variable_key = og_sm_feature_variable_key($feature_name);
  return (bool) og_sm_variable_get($site->nid, $variable_key, FALSE);
}

/**
 * Helper to create the variable name for a feature.
 *
 * @param string $feature_name
 *   The feature name to create the variable key for.
 *
 * @return string
 *   The variable key.
 */
function og_sm_feature_variable_key($feature_name) {
  $clean_name = trim(strtolower($feature_name));
  $clean_name = preg_replace('/[^\da-z]/i', '_', $clean_name);
  return sprintf(OG_SM_FEATURE_NAMESPACE, $clean_name);
}


/**
 * Implements hook_views_api().
 */
function og_sm_feature_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implements hook_ctools_plugin_api().
 */
function og_sm_feature_ctools_plugin_api($module, $api) {
  if ($module == 'context' && $api == 'plugins') {
    return array('version' => 3);
  }
}

/**
 * Implements hook_context_plugins().
 */
function og_sm_feature_context_plugins() {
  $plugins = array();
  $plugins['og_sm_feature_condition_status'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'og_sm_feature') . '/plugins',
      'file' => 'OgSmFeatureContextConditionStatus.inc',
      'class' => 'OgSmFeatureContextConditionStatus',
      'parent' => 'context_condition',
    ),
  );
  return $plugins;
}

/**
 * Implements hook_context_registry().
 */
function og_sm_feature_context_registry() {
  return array(
    'conditions' => array(
      'og_sm_feature_condition_status' => array(
        'title' => t('OG SM Feature status'),
        'description' => t('Set this context when a Site feature is enabled.'),
        'plugin' => 'og_sm_feature_condition_status',
      ),
    ),
  );
}

/**
 * Implements hook_context_page_reaction().
 */
function og_sm_feature_context_page_reaction() {
  $site = og_sm_current_site();
  if (!$site) {
    return;
  }

  $plugin = context_get_plugin('condition', 'og_sm_feature_condition_status');
  if ($plugin) {
    $plugin->execute($site);
  }
}
