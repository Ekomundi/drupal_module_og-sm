<?php
/**
 * @file
 * Feature module file.
 */

/**
 * Variable "Namespace" to store the og_sm_feature settings.
 */
define('OG_SM_FEATURE_NAMESPACE', 'og_sm_feature_%s');

/**
 * Permission to manage the Site features.
 */
define('OG_SM_FEATURE_OG_PERM_ADMIN', 'Administer features');

/**
 * Implements hook_hook_info().
 */
function og_sm_feature_hook_info() {
  $hooks = array(
    'og_sm_feature_info' => array(
      'group' => 'og_sm',
    ),
    'og_sm_feature_info_alter' => array(
      'group' => 'og_sm',
    ),
  );

  return $hooks;
}

/**
 * Implements hook_og_permission().
 */
function og_sm_feature_og_permission() {
  return array(
    OG_SM_FEATURE_OG_PERM_ADMIN => array(
      'title' => t('Administer Features'),
      'description' => t('Enable/disable Site features.'),
      'roles' => array(OG_AUTHENTICATED_ROLE),
      'default role' => array(OG_ADMINISTRATOR_ROLE),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function og_sm_feature_menu() {
  $file = 'og_sm_feature.admin.inc';

  $items = array();
  $items['group/%/%og_sm_site/admin/features'] = array(
    'title' => 'Features',
    'description' => 'Enable/Disable features.',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('og_sm_feature_admin_overview', 2),
    'access callback' => 'og_sm_site_permission_access',
    'access arguments' => array(2, OG_SM_FEATURE_OG_PERM_ADMIN),
    'file' => $file,
  );

  return $items;
}

/**
 * Get the information about all features.
 *
 * The information titles & description will be available in the current
 * language.
 *
 * @return array
 *   The information array grouped per feature.
 */
function og_sm_feature_info() {
  // Check if we already cached the information.
  $cid = __FUNCTION__;
  $cache = cache_get($cid);
  if ($cache) {
    return $cache->data;
  }

  $items = array();
  $modules = module_implements('og_sm_feature_info');
  foreach ($modules as $module) {
    $module_items = call_user_func($module . '_og_sm_feature_info');
    foreach (array_keys($module_items) as $item_key) {
      // Add defaults.
      $module_items[$item_key] += array(
        'description' => NULL,
        'configuration' => NULL,
        'default status' => FALSE,
      );
    }

    if ($module_items) {
      $items = array_merge($items, $module_items);
    }
  }

  // Allow modules to alter information from each other.
  drupal_alter('og_sm_feature_info', $items);

  // Store in cache.
  cache_set($cid, $items);

  // Return data.
  return $items;
}

/**
 * Check if a feature exists by its name.
 *
 * This will check in the og_sm_feature_info() array if the feature is
 * listed.
 *
 * @param string $feature_name
 *   The feature name.
 *
 * @return bool
 *   Exists TRUE/FALSE.
 */
function og_sm_feature_exists($feature_name) {
  $features = og_sm_feature_info();
  return array_key_exists($feature_name, $features);
}

/**
 * Enable a feature for the given Site.
 *
 * @param object $site
 *   The Site node object.
 * @param string $feature_name
 *   The name of the feature.
 */
function og_sm_feature_site_enable($site, $feature_name) {
  if (!og_sm_feature_exists($feature_name)) {
    return;
  }

  $variable_key = og_sm_feature_variable_key($feature_name);
  og_sm_variable_set($site->nid, $variable_key, TRUE);
}

/**
 * Disable a feature for the given Site.
 *
 * @param object $site
 *   The Site node object.
 * @param string $feature_name
 *   The name of the feature.
 */
function og_sm_feature_site_disable($site, $feature_name) {
  if (!og_sm_feature_exists($feature_name)) {
    return;
  }

  $variable_key = og_sm_feature_variable_key($feature_name);
  og_sm_variable_set($site->nid, $variable_key, FALSE);
}

/**
 * Check if a feature is enabled for the given Site.
 *
 * @param object $site
 *   The Site node object.
 * @param string $feature_name
 *   The name of the feature.
 *
 * @return bool
 *   Is enabled TRUE/FALSE.
 */
function og_sm_feature_site_is_enabled($site, $feature_name) {
  $variable_key = og_sm_feature_variable_key($feature_name);
  return (bool) og_sm_variable_get($site->nid, $variable_key, FALSE);
}

/**
 * Helper to create the variable name for a feature.
 *
 * @param string $feature_name
 *   The feature name to create the variable key for.
 *
 * @return string
 *   The variable key.
 */
function og_sm_feature_variable_key($feature_name) {
  $clean_name = trim(strtolower($feature_name));
  $clean_name = preg_replace('/[^\da-z]/i', '_', $clean_name);
  return sprintf(OG_SM_FEATURE_NAMESPACE, $clean_name);
}
