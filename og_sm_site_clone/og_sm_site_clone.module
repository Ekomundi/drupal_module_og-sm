<?php

/**
 * @file
 * Organic Groups Site Clone functionality.
 */

/**
 * Permission constants.
 */
define('OG_SM_SITE_CLONE_PERM_ALL', 'clone any site');
define('OG_SM_SITE_CLONE_PERM_ADMIN', 'clone admin site');
define('OG_SM_SITE_CLONE_PERM_OWN', 'clone own site');

/**
 * Implements hook_admin_paths().
 */
function og_sm_site_clone_admin_paths() {
  $paths = array(
    'node/*/clone' => TRUE,
  );
  return $paths;
}

/**
 * Implements hook_hook_info().
 */
function og_sm_site_clone_hook_info() {
  $group = array('group' => 'og_sm');
  return array(
    'og_sm_site_clone_object_prepare_alter' => $group,
    'og_sm_site_clone' => $group,
  );
}

/**
 * Implements hook_module_implements_alter().
 */
function og_sm_site_clone_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'og_sm_site_insert') {
    // We use this hook to trigger the clone hook. Force this as last so its is
    // executed after all other site insert hooks.
    $group = $implementations['og_sm_site_clone'];
    unset($implementations['og_sm_site_clone']);
    $implementations['og_sm_site_clone'] = $group;
  }
}

/**
 * Implements hook_permission().
 */
function og_sm_site_clone_permission() {
  return array(
    OG_SM_SITE_CLONE_PERM_ALL => array(
      'title' => t('Clone any Site'),
      'description' => t('Clone any site without further permission check.'),
      'restrict access' => TRUE,
      'warning' => t('Warning: give to trusted roles only as this allows to create a copy of any Site.'),
    ),
    OG_SM_SITE_CLONE_PERM_ADMIN => array(
      'title' => t('Clone Site the user administers'),
      'description' => t('Allows a user to clone the Sites he can administer.'),
    ),
    OG_SM_SITE_CLONE_PERM_OWN => array(
      'title' => t('Clone own Site'),
      'description' => t('Allows a user to clone only the Sites he is the owner (author) of.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function og_sm_site_clone_menu() {
  $items  = array();

  $file_page = 'og_sm_site_clone.pages.inc';

  $items['node/%og_sm_site/clone'] = array(
    'title' => 'Clone',
    'description' => 'Create a new Site based on an existing one.',
    'page callback' => 'og_sm_site_clone_node_form',
    'page arguments' => array(1),
    'access callback' => 'og_sm_site_clone_access_page',
    'access arguments' => array(1),
    'file' => $file_page,
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );

  // Redirect for the Site admin menu item.
  $items['group/%/%og_sm_site/admin/site-clone'] = array(
    'title callback' => 'Clone Site',
    'type' => MENU_CALLBACK,
    'page callback' => 'og_sm_site_clone_redirect',
    'page arguments' => array(2),
    'access callback' => 'og_sm_site_clone_access_page',
    'access arguments' => array(2),
    'file' => $file_page,
  );

  return $items;
}

/**
 * Site clone page access callback.
 *
 * @param object $site
 *   The Site node that will be cloned.
 * @param object $account
 *   The account for who to check access.
 *
 * @return bool
 *   Has access.
 */
function og_sm_site_clone_access_page($site, $account = NULL) {
  if (!og_sm_is_site($site)) {
    return FALSE;
  }

  // Fallback to current user.
  if (!$account) {
    global $user;
    $account = $user;
  }

  // Only if user can create Site type content.
  if (!node_access('create', $site->type, $account)) {
    return FALSE;
  }

  if (user_access(OG_SM_SITE_CLONE_PERM_ALL, $account)) {
    return TRUE;
  }

  // Site administer permission (OG).
  if (user_access(OG_SM_SITE_CLONE_PERM_ADMIN, $account) && og_sm_site_permission_access($site, 'administer group', $account)) {
    return TRUE;
  }
  // Site administer permission (OG_SM).
  if (user_access(OG_SM_SITE_CLONE_PERM_ADMIN, $account) && og_sm_site_permission_access($site, OG_SM_PERMISSION_SITE_ADMIN, $account)) {
    return TRUE;
  }

  if (user_access(OG_SM_SITE_CLONE_PERM_OWN, $account) && $site->uid === $account->uid) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Prepares a node to be cloned.
 *
 * Code based on node_clone module (https://www.drupal.org/project/node_clone).
 *
 * @param object $site_original
 *   The Site node to create the clone for.
 * @param object $account
 *   The owner of the new Site.
 *
 * @return object
 *   The new node object (not saved).
 */
function og_sm_site_clone_object_prepare($site_original, $account = NULL) {
  $site_new = clone $site_original;

  // Fallback to current user.
  if (!isset($account->uid)) {
    $account = $GLOBALS['user'];
  }

  // We are creating a new node.
  $site_new->is_new = TRUE;

  // Clear values that are filled in automatically for new nodes.
  $site_new->title = NULL;
  $site_new->nid = NULL;
  $site_new->tnid = NULL;
  $site_new->log = NULL;
  $site_new->created = NULL;
  $site_new->changed = NULL;
  $site_new->path = NULL;
  $site_new->files = array();
  $site_new->menu = NULL;

  // By default not published.
  $site_new->status = 0;

  // Revisions.
  $site_new->vid = NULL;
  $site_new->revision_timestamp = NULL;
  $site_new->revision_uid = (int) $account->uid;

  // Also handle modules that attach a UUID to the node.
  $site_new->uuid = NULL;
  $site_new->vuuid = NULL;

  // Support comments.
  $site_new->last_comment_timestamp = NULL;
  $site_new->last_comment_name = NULL;
  $site_new->last_comment_uid = NULL;
  $site_new->comment_count = 0;

  // Support Sites that are part of book structure.
  if (isset($site_new->book['mlid'])) {
    $site_new->book['mlid'] = NULL;
    $site_new->book['has_children'] = 0;
  }

  // Inform other modules that this is a clone.
  $site_new->site_is_clone = TRUE;
  $site_new->site_is_clone_of_nid = (int) $site_original->nid;

  // Node prepare as with any other node.
  node_object_prepare($site_new);

  // Override the default owner by the one passed to this function.
  $site_new->uid = (int) $account->uid;
  $site_new->name = isset($account->name) ? $account->name : NULL;

  // Allow other modules to alter the prepared cloned Site node object.
  $context = array('site_original' => $site_original);
  drupal_alter('og_sm_site_clone_object_prepare', $site_new, $context);

  return $site_new;
}
