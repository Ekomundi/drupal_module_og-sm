<?php
/**
 * @file
 * Tests about the Site Taxonomies.
 */

/**
 * Tests about the Site Taxonomy API.
 */
class OgSmSiteCloneTestCase extends OgSmWebTestCase {
  /**
   * Site Nodes to run the tests with.
   *
   * @var object
   */
  private $site;
  private $siteOther;

  /**
   * Users to test with.
   *
   * @var object
   */
  private $userWhoCanCloneAll;
  private $userWhoCanCloneAllCanNotCreateSite;
  private $siteUserWhoCanAdminister;
  private $siteUserWhoCanManage;
  private $siteOwnerWhoCanClone;
  private $siteOwnerWhoCanNotClone;

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => t('Site Clone : Functionality'),
      'description' => t('Tests Site Clone functionality.'),
      'group' => t('Organic Groups Site Manager'),
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    // Enable required modules (we need context to filter the terms!).
    $modules = array('og_sm_site_clone', 'og_sm_context');
    parent::setUp($modules);

    // Setup OG context?
    $context_enabled = array(
      'og_sm_context_node' => new stdClass(),
      'og_sm_context_admin' => new stdClass(),
    );
    variable_set('og_context_negotiation_group_context', $context_enabled);
    $context_order = array(
      'og_sm_context_node' => -50,
      'og_sm_context_admin' => -49,
    );
    variable_set('og_context_providers_weight_group_context', $context_order);

    // Create the Site type.
    $type = $this->ogSmCreateGroupNodeType();
    og_sm_site_type_add($type);

    // Reset all so the test environment picks up the new permissions.
    $this->resetAll();

    // Create the Site node.
    $this->site = $this->ogSmCreateGroup($type);
    $this->siteOther = $this->ogSmCreateGroup($type);

    // Create the users.
    $permCreateSite = 'create og_sm_node_type_is_group content';
    $this->userWhoCanCloneAll = $this->drupalCreateUser(array(OG_SM_SITE_CLONE_PERM_ALL, $permCreateSite));
    $this->userWhoCanCloneAllCanNotCreateSite = $this->drupalCreateUser(array(OG_SM_SITE_CLONE_PERM_ALL));
    $this->siteUserWhoCanAdminister = $this->ogSmCreateGroupUser(array(OG_SM_SITE_CLONE_PERM_ADMIN, $permCreateSite), array($this->site));
    $this->siteUserWhoCanManage = $this->ogSmCreateGroupUser(array(OG_SM_SITE_CLONE_PERM_ADMIN, $permCreateSite), array($this->site));
    $this->siteOwnerWhoCanClone = $this->ogSmCreateGroupUser(array(OG_SM_SITE_CLONE_PERM_OWN, $permCreateSite), array($this->site));
    $this->siteOwnerWhoCanNotClone = $this->ogSmCreateGroupUser(array($permCreateSite), array($this->siteOther));

    // Update the owner of the Sites.
    $this->site->uid = $this->siteOwnerWhoCanClone->uid;
    node_save($this->site);
    $this->siteOther->uid = $this->siteOwnerWhoCanNotClone->uid;
    node_save($this->siteOther);

    // Grant the site administrator & managers the proper Site permissions.
    $roleAdministrator = og_role_create('site_administrator', 'node', 0, $type);
    $roleManager = og_role_create('site_manager', 'node', 0, $type);
    og_role_save($roleAdministrator);
    og_role_save($roleManager);
    og_role_grant_permissions($roleAdministrator->rid, array('administer group'));
    og_role_grant_permissions($roleManager->rid, array(OG_SM_PERMISSION_SITE_ADMIN));
    og_role_grant('node', $this->site->nid, $this->siteUserWhoCanAdminister->uid, $roleAdministrator->rid);
    og_role_grant('node', $this->site->nid, $this->siteUserWhoCanManage->uid, $roleManager->rid);
  }

  /**
   * Test the access page callback.
   */
  public function testAccessPage() {
    // Not a Site node.
    $node = $this->drupalCreateNode();
    $this->assertFalse(
      og_sm_site_clone_access_page($node, $this->userWhoCanCloneAll),
      'No access if given node is not a Site.'
    );

    // Global role.
    $this->assertTrue(
      og_sm_site_clone_access_page($this->site, $this->userWhoCanCloneAll),
      'User with "clone any site" permission can clone Site.'
    );
    $this->assertTrue(
      og_sm_site_clone_access_page($this->siteOther, $this->userWhoCanCloneAll),
      'User with "clone any site" permission can clone other Site.'
    );

    // Global role without create Site permission.
    $this->assertFalse(
      og_sm_site_clone_access_page($this->siteOther, $this->userWhoCanCloneAllCanNotCreateSite),
      'Users who are not allowed to create new Sites can not clone existing Sites.'
    );

    // Site Administrators.
    $this->assertTrue(
      og_sm_site_clone_access_page($this->site, $this->siteUserWhoCanAdminister),
      'User with "clone admin site" permission can clone Site if he is a Site administrator.'
    );
    $this->assertFalse(
      og_sm_site_clone_access_page($this->siteOther, $this->siteUserWhoCanAdminister),
      'User with "clone admin site" permission can not clone Site if he is not a Site administrator.'
    );

    // Site Manager with permission.
    $this->assertTrue(
      og_sm_site_clone_access_page($this->site, $this->siteUserWhoCanManage),
      'User with "clone admin site" permission can clone Site if he is a Site manager.'
    );
    $this->assertFalse(
      og_sm_site_clone_access_page($this->siteOther, $this->siteUserWhoCanManage),
      'User with "clone admin site" permission can not clone Site he is not a Site manager.'
    );

    // Site owner with permission.
    $this->assertTrue(
      og_sm_site_clone_access_page($this->site, $this->siteOwnerWhoCanClone),
      'User with "clone admin site" permission can clone own Site.'
    );
    $this->assertFalse(
      og_sm_site_clone_access_page($this->siteOther, $this->siteOwnerWhoCanClone),
      'User with "clone admin site" permission can not clone other Site.'
    );

    // Site owner without permission.
    $this->assertFalse(
      og_sm_site_clone_access_page($this->siteOther, $this->siteOwnerWhoCanNotClone),
      'User without "clone admin site" permission can not clone own Site.'
    );
  }

}
