<?php

/**
 * @file
 * Tests about the Site Taxonomies.
 */

/**
 * Tests about the Site Taxonomy API.
 */
class OgSmSiteCloneTestCase extends OgSmWebTestCase {
  /**
   * Site Nodes to run the tests with.
   *
   * @var object
   */
  private $site;
  private $siteOther;

  /**
   * Users to test with.
   *
   * @var object
   */
  private $userWhoCanCloneAll;
  private $userWhoCanCloneAllCanNotCreateSite;
  private $siteUserWhoCanAdminister;
  private $siteUserWhoCanManage;
  private $siteOwnerWhoCanClone;
  private $siteOwnerWhoCanNotClone;

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => t('Site Clone : Functionality'),
      'description' => t('Tests Site Clone functionality.'),
      'group' => t('Organic Groups Site Manager'),
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    // Enable required modules.
    $modules = array('og_sm_site_clone', 'og_sm_variable');
    parent::setUp($modules);

    // Create the Site type.
    $type = $this->ogSmCreateGroupNodeType();
    og_sm_site_type_add($type);

    // Reset all so the test environment picks up the new permissions.
    $this->resetAll();

    // Create the Site node.
    $this->site = $this->ogSmCreateGroup($type);
    $this->siteOther = $this->ogSmCreateGroup($type);

    // Create the users.
    $permCreateSite = 'create og_sm_node_type_is_group content';
    $this->userWhoCanCloneAll = $this->drupalCreateUser(array(OG_SM_SITE_CLONE_PERM_ALL, $permCreateSite));
    $this->userWhoCanCloneAllCanNotCreateSite = $this->drupalCreateUser(array(OG_SM_SITE_CLONE_PERM_ALL));
    $this->siteUserWhoCanAdminister = $this->ogSmCreateGroupUser(array(OG_SM_SITE_CLONE_PERM_ADMIN, $permCreateSite), array($this->site));
    $this->siteUserWhoCanManage = $this->ogSmCreateGroupUser(array(OG_SM_SITE_CLONE_PERM_ADMIN, $permCreateSite), array($this->site));
    $this->siteOwnerWhoCanClone = $this->ogSmCreateGroupUser(array(OG_SM_SITE_CLONE_PERM_OWN, $permCreateSite), array($this->site));
    $this->siteOwnerWhoCanNotClone = $this->ogSmCreateGroupUser(array($permCreateSite), array($this->siteOther));

    // Update the owner of the Sites.
    $this->site->uid = $this->siteOwnerWhoCanClone->uid;
    node_save($this->site);
    $this->siteOther->uid = $this->siteOwnerWhoCanNotClone->uid;
    node_save($this->siteOther);

    // Grant the site administrator & managers the proper Site permissions.
    $roleAdministrator = og_role_create('site_administrator', 'node', 0, $type);
    $roleManager = og_role_create('site_manager', 'node', 0, $type);
    og_role_save($roleAdministrator);
    og_role_save($roleManager);
    og_role_grant_permissions($roleAdministrator->rid, array('administer group'));
    og_role_grant_permissions($roleManager->rid, array(OG_SM_PERMISSION_SITE_ADMIN));
    og_role_grant('node', $this->site->nid, $this->siteUserWhoCanAdminister->uid, $roleAdministrator->rid);
    og_role_grant('node', $this->site->nid, $this->siteUserWhoCanManage->uid, $roleManager->rid);
  }

  /**
   * Test the access page callback.
   */
  public function testAccessPage() {
    // Not a Site node.
    $node = $this->drupalCreateNode();
    $this->assertFalse(
      og_sm_site_clone_access_page($node, $this->userWhoCanCloneAll),
      'No access if given node is not a Site.'
    );

    // Global role.
    $this->assertTrue(
      og_sm_site_clone_access_page($this->site, $this->userWhoCanCloneAll),
      'User with "clone any site" permission can clone Site.'
    );
    $this->assertTrue(
      og_sm_site_clone_access_page($this->siteOther, $this->userWhoCanCloneAll),
      'User with "clone any site" permission can clone other Site.'
    );

    // Global role without create Site permission.
    $this->assertFalse(
      og_sm_site_clone_access_page($this->siteOther, $this->userWhoCanCloneAllCanNotCreateSite),
      'Users who are not allowed to create new Sites can not clone existing Sites.'
    );

    // Site Administrators.
    $this->assertTrue(
      og_sm_site_clone_access_page($this->site, $this->siteUserWhoCanAdminister),
      'User with "clone admin site" permission can clone Site if he is a Site administrator.'
    );
    $this->assertFalse(
      og_sm_site_clone_access_page($this->siteOther, $this->siteUserWhoCanAdminister),
      'User with "clone admin site" permission can not clone Site if he is not a Site administrator.'
    );

    // Site Manager with permission.
    $this->assertTrue(
      og_sm_site_clone_access_page($this->site, $this->siteUserWhoCanManage),
      'User with "clone admin site" permission can clone Site if he is a Site manager.'
    );
    $this->assertFalse(
      og_sm_site_clone_access_page($this->siteOther, $this->siteUserWhoCanManage),
      'User with "clone admin site" permission can not clone Site he is not a Site manager.'
    );

    // Site owner with permission.
    $this->assertTrue(
      og_sm_site_clone_access_page($this->site, $this->siteOwnerWhoCanClone),
      'User with "clone admin site" permission can clone own Site.'
    );
    $this->assertFalse(
      og_sm_site_clone_access_page($this->siteOther, $this->siteOwnerWhoCanClone),
      'User with "clone admin site" permission can not clone other Site.'
    );

    // Site owner without permission.
    $this->assertFalse(
      og_sm_site_clone_access_page($this->siteOther, $this->siteOwnerWhoCanNotClone),
      'User without "clone admin site" permission can not clone own Site.'
    );
  }

  /**
   * Test the function to clone a given Site.
   */
  public function testSiteCloneObjectPrepare() {
    // Test without implemented hook.
    $original = (object) array(
      'nid' => 1234,
      'vid' => 4321,
      'title' => 'FooBar',
      'uid' => 666,
      'name' => 'Lucifer',
      'type' => $this->site->type,
    );
    $expected = array(
      'nid' => NULL,
      'vid' => NULL,
      'title' => NULL,
      'uid' => (int) $this->userWhoCanCloneAll->uid,
      'name' => $this->userWhoCanCloneAll->name,
      'type' => $this->site->type,
      'is_new' => TRUE,
      'tnid' => NULL,
      'log' => NULL,
      'created' => REQUEST_TIME,
      'changed' => NULL,
      'path' => NULL,
      'files' => array(),
      'menu' => array(
        'link_title' => '',
        'mlid' => 0,
        'plid' => 0,
        'menu_name' => 'main-menu',
        'weight' => 0,
        'options' => array(),
        'module' => 'menu',
        'expanded' => 0,
        'hidden' => 0,
        'has_children' => 0,
        'customized' => 0,
        'parent_depth_limit' => 8,
      ),
      'status' => 0,
      'revision_timestamp' => NULL,
      'revision_uid' => (int) $this->userWhoCanCloneAll->uid,
      'uuid' => NULL,
      'vuuid' => NULL,
      'last_comment_timestamp' => NULL,
      'last_comment_name' => NULL,
      'last_comment_uid' => NULL,
      'comment_count' => 0,
      'site_is_clone' => TRUE,
      'site_is_clone_of_nid' => 1234,
      'promote' => 1,
      'sticky' => 0,
      'revision' => FALSE,
      'comment' => 2,
    );
    $new = og_sm_site_clone_object_prepare($original, $this->userWhoCanCloneAll);
    $this->assertEqual($expected, (array) $new, 'New Site object is clone of original.');

    // Test with module that implements hook.
    module_enable(array('og_sm_site_clone_test'));

    $expected['extra_field_to_test'] = 'Test Hook 1234';
    $new = og_sm_site_clone_object_prepare($original, $this->userWhoCanCloneAll);
    $this->assertEqual($expected, (array) $new, 'Extra value added by hook implementation.');
  }

  /**
   * Test cloning a site programmatically.
   */
  public function testSiteCloneProgrammatically() {
    module_enable(array('og_sm_site_clone_test'));

    // Clone the Site.
    $site_original = $this->site;
    $site_new_owner = $this->userWhoCanCloneAll;
    $site_new = og_sm_site_clone_object_prepare($site_original, $site_new_owner);
    $site_new->title = $this->randomString();
    node_save($site_new);

    // Check if the hook_og_sm_site_clone hook was triggered.
    $this->assertEqual(
      $site_original->nid,
      og_sm_variable_get($site_new->nid, 'test_site_is_copy_of'),
      'Cloning a Site triggers the "hook_og_sm_site_clone" hook.'
    );
  }

  /**
   * Test cloning UI.
   */
  public function testSiteCloneUi() {
    $site_original = $this->site;
    $this->drupalLogin($this->userWhoCanCloneAll);

    // Check if the Clone tab is on the page.
    $this->drupalGet('node/' . $site_original->nid);
    $tabs = $this->xpath('//ul[@class=:class]/li', array(':class' => 'tabs primary'));
    $tab = array_pop($tabs);
    $tab_label = (string) $tab->a;
    $tab_url = (string) $tab->a['href'][0];
    $this->assertEqual(t('Clone'), $tab_label, 'Clone link is on the page.');
    $this->assertEqual('/node/' . $site_original->nid . '/clone', $tab_url, 'Tab links to /node/NID/clone');

    // Create a new Site as clone of the existing.
    $edit = array('title' => 'Test Site clone');
    $this->drupalPost('/node/' . $site_original->nid . '/clone', $edit, t('Save'));
    $this->assertText(
      t('@type @title has been created.', array('@type' => $site_original->type, '@title' => $edit['title'])),
      'Cloned Site is saved.'
    );

    // Open the admin/site-clone link, we should be redirected to the form on
    // node/NID/clone.
    $this->drupalGet('group/node/' . $site_original->nid . '/admin/site-clone');
    $url = parse_url($this->getUrl());
    $this->assertEqual('/node/' . $site_original->nid . '/clone', $url['path'], 'User is redirected to /node/NID/clone');

    // Check the title on the clone form page.
    $this->drupalGet('node/' . $site_original->nid . '/clone');
    $this->assertTitle(
      t('Clone @title', array('@title' => $this->site->title)) . ' | Drupal',
      'Page title is set to "Clone [original site title]".'
    );
  }

}
