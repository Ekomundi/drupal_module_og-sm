<?php
/**
 * @file
 * Tests about the Site nodes.
 */

/**
 * Tests about the node type settings.
 */
class OgSmSiteTestCase extends OgSmWebTestCase {

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => t('Site node'),
      'description' => t('Tests Site nodes and helpers.'),
      'group' => t('Organic Groups Site Manager'),
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    // Enable required modules.
    $modules = array('og', 'og_ui', 'og_sm');
    parent::setUp($modules);
  }

  /**
   * Test Site helpers.
   */
  public function testSite() {
    $type_group = $this->ogSmCreateGroupNodeType();
    $node = $this->drupalCreateNode();
    $group = $this->ogSmCreateGroup($type_group);

    // Test og_sm_is_site.
    $this->assertFalse(og_sm_is_site($node));
    $this->assertFalse(og_sm_is_site($group));
    og_sm_site_type_add($type_group);
    $this->assertTrue(og_sm_is_site($group));

    // Test og_sm_site_load.
    $site = og_sm_site_load($group->nid);
    $this->assertEqual($group->title, $site->title);
    og_sm_site_type_remove($type_group);
    $this->assertFalse(og_sm_site_load($group->nid));

    // Test og_sm_site_load with non-existing node id.
    $this->assertFalse(og_sm_site_load(9877654321));

    // Test getting all site Nodes ID's.
    $group2 = $this->ogSmCreateGroup($type_group);
    $group3 = $this->ogSmCreateGroup($type_group);
    $this->assertEqual(array(), og_sm_site_all_nids());
    og_sm_site_type_add($type_group);
    $expected = array(
      $group->nid => $group->nid,
      $group2->nid => $group2->nid,
      $group3->nid => $group3->nid,
    );
    $this->assertEqual($expected, og_sm_site_all_nids());
  }

  /**
   * Test filtering an array of groups by only sites.
   */
  public function testFilterSitesFromGroups() {
    $type_is_group = $this->ogSmCreateGroupNodeType();
    $type_not_group = $this->ogSmCreateNodeType();
    og_sm_site_type_add(self::TYPE_IS_GROUP);

    $group1 = $this->ogSmCreateGroup($type_is_group);
    $group2 = $this->ogSmCreateGroup($type_is_group);
    $group3 = $this->ogSmCreateGroup($type_not_group);
    $groups = array('node' => array($group3->nid, $group2->nid, $group1->nid));

    $expected = array($group2->nid => $group2, $group1->nid => $group1);
    $sites = _og_sm_filter_sites_from_groups($groups);
    $this->assertEqual($expected, $sites);
  }

  /**
   * Test Site access callbacks.
   */
  public function testSiteAccessCallbacks() {
    $site_type = $this->ogSmCreateGroupNodeType();
    og_sm_site_type_add($site_type);

    // Path Auto support.
    module_load_include('inc', 'og_sm', 'og_sm.tokens');
    variable_set('pathauto_node_' . $site_type . '_pattern', '[node:title]');

    // Create the Site.
    $site = $this->ogSmCreateGroup($site_type);
    $sites = array($site);

    // Create group role.
    $role_manager = og_role_create('role_group_manager', 'node', 0, $site_type);
    og_role_save($role_manager);
    og_role_grant_permissions($role_manager->rid, array(OG_SM_PERMISSION_SITE_ADMIN));

    // Create users.
    $user = $this->drupalCreateUser();
    $site_user = $this->ogSmCreateGroupUser(array(), $sites);
    $site_manager = $this->ogSmCreateGroupUser(array(), $sites);
    og_role_grant('node', $site->nid, $site_manager->uid, $role_manager->rid);

    // No access for non site member.
    $this->assertFalse(og_sm_site_permission_access($site, OG_SM_PERMISSION_SITE_ADMIN, $user));
    $this->assertFalse(og_sm_site_nid_permission_access($site->nid, OG_SM_PERMISSION_SITE_ADMIN, $user));

    // No access for site members who has not the proper role(s).
    $this->assertFalse(og_sm_site_permission_access($site, OG_SM_PERMISSION_SITE_ADMIN, $site_user));
    $this->assertFalse(og_sm_site_nid_permission_access($site->nid, OG_SM_PERMISSION_SITE_ADMIN, $site_user));

    // Access for site members with the proper role(s).
    $this->assertTrue(og_sm_site_permission_access($site, OG_SM_PERMISSION_SITE_ADMIN, $site_manager));
    $this->assertTrue(og_sm_site_nid_permission_access($site->nid, OG_SM_PERMISSION_SITE_ADMIN, $site_manager));
  }

}
