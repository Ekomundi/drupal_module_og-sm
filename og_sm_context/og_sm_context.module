<?php
/**
 * @file
 * Functionality to support setting and detecting Site Context.
 */

/**
 * Implements hook_og_context_negotiation_info().
 *
 * Add context negotiation info based on the path alias.
 */
function og_sm_context_og_context_negotiation_info() {
  $providers = array();

  $providers['og_sm_context_alias'] = array(
    'name' => t('Site Alias'),
    'description' => t('Determine Site context based on the fact that the current URL starts with the path alias of a Site node.'),
    'callback' => 'og_sm_context_handler_alias',
  );
  $providers['og_sm_context_node'] = array(
    'name' => t('Site Content'),
    'description' => t('Determine Site context based on the fact that we are on a Site page or a Site content page.'),
    'callback' => 'og_sm_context_handler_content',
  );
  $providers['og_sm_context_admin'] = array(
    'name' => t('Site Administration'),
    'description' => t('Determine Site context based on the fact that we are on a Site administration page.'),
    'callback' => 'og_sm_context_handler_admin',
  );
  $providers['og_sm_context_get'] = array(
    'name' => t('Site Get parameter'),
    'description' => t('Determine Site context based on the fact that there is a GET parameter "og_sm_context_site_id" set.'),
    'callback' => 'og_sm_context_handler_get',
  );

  return $providers;
}

/**
 * Tries to get the context based on the first part of the URL.
 *
 * If the first part is the alias of a Site, that Site becomes the active
 * context.
 *
 * @return array|NULL
 *   Contexts grouped by the entity type.
 *
 * @see og_sm_context_negotiation_info
 */
function og_sm_context_handler_alias() {
  // Get the alias of the current URL.
  $page_alias = drupal_get_path_alias(current_path());
  $parts = explode('/', $page_alias);
  $site_alias = reset($parts);

  // Get the normal path by the possible Site alias.
  $site_path = drupal_get_normal_path($site_alias);
  if (!$site_path) {
    return NULL;
  }

  // Get the site_nid from the path.
  preg_match('#^node/([0-9]+)$#', $site_path, $parts);
  if (empty($parts[1])) {
    return NULL;
  }

  // Get the Site.
  $site = og_sm_site_load($parts[1]);
  if (!$site) {
    return NULL;
  }

  return array('node' => array((int) $site->nid));
}

/**
 * Tries to get the context based on the fact that we are on a node page.
 *
 * @return array|NULL
 *   Contexts grouped by the entity type.
 *
 * @see og_sm_context_negotiation_info
 */
function og_sm_context_handler_content() {
  // Get the content nid from the path.
  $path = current_path();
  preg_match('#^node/([0-9]+)#', $path, $parts);
  if (empty($parts[1])) {
    return NULL;
  }

  // Get the Node.
  $node = node_load($parts[1]);
  if (!$node) {
    return NULL;
  }

  // Is the node a Site?
  if (og_sm_is_site($node)) {
    return array('node' => array((int) $node->nid));
  }

  // Is the node Site Content?
  $site = og_sm_content_get_site($node);
  if ($site) {
    return array('node' => array((int) $site->nid));
  }

  return NULL;
}

/**
 * Tries to get the context based on the fact that we are on a site admin page.
 *
 * Will check if:
 * - The path starts with group/node/[nid]
 * - If the group is a Site node type.
 *
 * @return array|NULL
 *   Contexts grouped by the entity type.
 *
 * @see og_sm_context_negotiation_info
 */
function og_sm_context_handler_admin() {
  // Get nid from the current URL.
  $path = current_path();
  preg_match('#^group/node/([0-9]+)#', $path, $parts);
  if (empty($parts[1])) {
    return NULL;
  }

  // Get the Site.
  $site = og_sm_site_load($parts[1]);
  if (!$site) {
    return NULL;
  }

  return array('node' => array((int) $site->nid));
}

/**
 * Tries to get the context based on a Site ID in a get parameter.
 *
 * Will check if there is a get parameter "og_sm_context_site_id" with a valid
 * Site Node ID.
 *
 * @return array|NULL
 *   Contexts grouped by the entity type.
 *
 * @see og_sm_context_negotiation_info
 */
function og_sm_context_handler_get() {
  if (empty($_GET['og_sm_context_site_id'])) {
    return NULL;
  }

  // Get the Site.
  $site = og_sm_site_load($_GET['og_sm_context_site_id']);
  if (!$site) {
    return NULL;
  }

  return array('node' => array((int) $site->nid));
}
