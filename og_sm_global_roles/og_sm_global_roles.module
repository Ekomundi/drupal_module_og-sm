<?php
/**
 * @file
 * Module og_sm_global_roles.
 */

/**
 * Implements hook_module_implements_alter().
 */
function og_sm_global_roles_module_implements_alter(&$implementations, $hook) {
  if ($hook === 'custom_theme' && isset($implementations['og_sm_global_roles'])) {
    $group = $implementations['og_sm_global_roles'];
    unset($implementations['og_sm_global_roles']);
    $implementations = array('og_sm_global_roles' => $group) + $implementations;
  }
}

/**
 * Determine whether the user has a given privilege within a site context.
 *
 * This is based on user_access() but adds site context.
 *
 * @param object $site
 *   The site node.
 * @param string $string
 *   The permission, such as "administer nodes", being checked for.
 * @param object $account
 *   (optional) The account to check, if not given use currently logged in user.
 *
 * @return bool
 *   Boolean TRUE if the user has the requested permission.
 */
function og_sm_global_roles_user_access($site, $string, $account = NULL) {
  global $user;

  if (!isset($account)) {
    $account = $user;
  }

  // User #1 has all privileges:
  if ($account->uid == 1) {
    return TRUE;
  }

  // To reduce the number of SQL queries, we cache the user's permissions
  // in a static variable.
  // Use the advanced drupal_static() pattern, since this is called very often.
  static $drupal_static_fast;
  if (!isset($drupal_static_fast)) {
    $drupal_static_fast['perm'] = &drupal_static(__FUNCTION__);
  }
  $perm = &$drupal_static_fast['perm'];
  if (!isset($perm[$site->nid][$account->uid])) {
    $temp_account = clone $account;
    og_sm_global_roles_user_load_roles($site, $temp_account);
    $role_permissions = user_role_permissions($temp_account->roles);

    $perms = array();
    foreach ($role_permissions as $one_role) {
      $perms += $one_role;
    }
    $perm[$site->nid][$account->uid] = $perms;
  }

  return isset($perm[$site->nid][$account->uid][$string]);
}

/**
 * Implements hook_custom_theme().
 *
 * This implementation does not change anything about the theme. We only use
 * this to get add extra roles to the current user (when in a Site context)
 * before the first call to user_access().
 */
function og_sm_global_roles_custom_theme() {
  // Load a user and its custom roles before anything else calls node_access.
  global $user;

  // Only if not one of the system accounts.
  if ($user->uid < 2) {
    return;
  }

  // We can't use og_context or og_sm_current_site here as this will trigger a
  // user_load() and user_access().
  $path = current_path();
  $gid = og_context_determine_context('node', array('path' => $path), FALSE);
  if (!$gid) {
    return;
  }

  $site = og_sm_site_load($gid);
  if (!$site) {
    return;
  }

  og_sm_global_roles_user_load_roles($site, $user);
}

/**
 * Implements hook_menu().
 */
function og_sm_global_roles_menu() {
  $items = array();

  $items['admin/config/group/global-roles']  = array(
    'title' => 'OG Global Roles',
    'description' => 'Give users global roles when they are within a Site context.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('og_sm_global_roles_settings'),
    'access arguments' => array('administer group'),
    'file' => 'og_sm_global_roles.admin.inc',
  );

  return $items;
}

/**
 * Check and load global roles for users within a Site context.
 *
 * @param object $site
 *   The Site object to load the roles by.
 * @param object $account
 *   The user object to load the roles for.
 */
function og_sm_global_roles_user_load_roles($site, $account) {
  $og_roles = og_get_user_roles('node', $site->nid, $account->uid);
  if (!$og_roles) {
    return;
  }

  // Load the extra roles.
  $mappings = og_sm_global_roles_mappings();
  $extra_roles = array();
  foreach ($og_roles as $og_role) {
    if (empty($mappings[$og_role])) {
      continue;
    }

    $extra_roles = array_merge($extra_roles, $mappings[$og_role]);
  }

  if (!$extra_roles) {
    return;
  }

  // Add the extra roles to the user.
  $global_roles = user_roles(TRUE);
  foreach ($extra_roles as $rid) {
    if (isset($account->roles[$rid])) {
      continue;
    }

    if (!isset($global_roles[$rid])) {
      continue;
    }

    $account->roles[$rid] = $global_roles[$rid];
  }
}

/**
 * Load all the mappings between Site roles & Global roles.
 *
 * @return array
 *   Array with all site roles who have global roles mappings.
 */
function og_sm_global_roles_mappings() {
  $cache = cache_get(__FUNCTION__);
  if ($cache) {
    return $cache->data;
  }

  $mappings = array();

  $site_roles = _og_sm_global_roles_get_all_site_roles();
  foreach ($site_roles as $site_role) {
    // The roles are saved by their name.
    // We need to map them to their role ID's.
    $global_roles = _og_sm_global_roles_variable_get_mapping($site_role);
    foreach ($global_roles as $global_role_name) {
      $role = user_role_load_by_name($global_role_name);
      if (!$role) {
        continue;
      }

      $rid = (int) $role->rid;
      $mappings[$site_role][$rid] = $rid;
    }
  }

  cache_set(__FUNCTION__, $mappings);
  return $mappings;
}

/**
 * Helper to get all the Site user roles.
 *
 * @return array
 *   Group roles keyed by their id.
 */
function _og_sm_global_roles_get_all_site_roles() {
  $rows = db_select('og_role', 'ogr')
    ->distinct()
    ->fields('ogr', array('name'))
    ->condition('ogr.group_type', 'node')
    ->condition('ogr.group_bundle', og_sm_get_site_types())
    ->execute();

  $roles = array();
  foreach ($rows as $row) {
    $roles[$row->name] = $row->name;
  }

  ksort($roles);
  return $roles;
}

/**
 * Create a variable name from a Site role name.
 *
 * @param string $site_role_name
 *   The site role name to create the variable name from.
 *
 * @return string
 *   The variable key.
 */
function _og_sm_global_roles_variable_key($site_role_name) {
  $machine_name = drupal_strtolower($site_role_name);
  $machine_name = preg_replace('/[^a-z0-9_]+/', '_', $machine_name);

  return sprintf('og_sm_global_roles_%s', $machine_name);
}

/**
 * Get a mapping from the variables.
 *
 * @param string $site_role_name
 *   The site role name to create the variable name from.
 *
 * @return array
 *   The mapping.
 */
function _og_sm_global_roles_variable_get_mapping($site_role_name) {
  $key = _og_sm_global_roles_variable_key($site_role_name);
  return array_filter(variable_get($key, array()));
}
