<?php
/**
 * @file
 * Tests for OG SM Theme Logo settings.
 */

/**
 * Test class for the logo settings.
 */
class OgSmThemeLogoTestCase extends OgSmWebTestCase {
  /**
   * Test data.
   */
  protected $site;
  protected $siteType;
  protected $themeKey;
  protected $sitePath;

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => t('Site Theme : Logo'),
      'description' => t('Tests the theme logo settings.'),
      'group' => t('Organic Groups Site Manager'),
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    // Enable required modules.
    $modules = array('og_sm_theme', 'og_sm_context');
    parent::setUp($modules);

    // Create a Site.
    $this->siteType = $this->ogSmCreateGroupNodeType();
    og_sm_site_type_add($this->siteType);
    $this->site = $this->ogSmCreateGroup($this->siteType);
    $this->sitePath = 'node/' . $this->site->nid;

    // We need an enabled Site theme to run tests. Use Bartik.
    $theme = 'bartik';
    variable_set('theme_default', $theme);
    theme_enable(array($theme));
    variable_set('og_sm_theme_site_themes', array($theme));
    og_sm_variable_set($this->site->nid, 'theme', $theme);
    menu_rebuild();

    $this->themeKey = $theme;
  }

  /**
   * Test the logo settings.
   */
  public function testLogoThemeSettings() {
    // Default logo theme settings.
    $settings = og_sm_theme_get_theme_settings($this->site);
    $this->assertEqual(
      0,
      $settings['toggle_logo_link'],
      'Logo link toggle is by default set to 0.'
    );
    $this->assertNull(
      $settings['logo_link_url'],
      'Logo link URL is by default NULL.'
    );
    $this->assertEqual(
      0,
      $settings['logo_link_target'],
      'Logo link target is by default set to _self.'
    );

    // Save new settings.
    og_sm_theme_set_theme_settings(
      array(
        'toggle_logo_link' => 1,
        'logo_link_url' => 'http://google.com',
        'logo_link_target' => '_blank',
      ),
      $this->site
    );

    $settings = og_sm_theme_get_theme_settings($this->site);
    $this->assertEqual(
      1,
      $settings['toggle_logo_link'],
      'Logo link toggle has changed to 1.'
    );
    $this->assertEqual(
      'http://google.com',
      $settings['logo_link_url'],
      'Logo link URL has changed to http://google.com.'
    );
    $this->assertEqual(
      '_blank',
      $settings['logo_link_target'],
      'Logo link target has changed to _blank.'
    );
  }

  /**
   * Test adding the extra variables to the page.tpl variables.
   */
  public function testPreprocessPage() {
    // Default values.
    $front_page = 'default-front-page';

    // Default to site frontpage (outside Site context).
    $expected_url = $front_page;
    $expected_target = '_self';
    $variables = array('front_page' => $front_page);
    og_sm_theme_preprocess_page($variables);
    $this->assertEqual(
      $expected_url,
      $variables['logo_link_url'],
      'Default link is set to the platform front_page value.'
    );
    $this->assertEqual(
      $expected_target,
      $variables['logo_link_target'],
      'The default link target is set to _self.'
    );

    // Links to site detail page when context is active.
    $this->ogSmSetOgContextToGroup($this->site);
    $expected_url = '/node/' . $this->site->nid;
    $expected_target = '_self';
    $variables = array('front_page' => $front_page);
    og_sm_theme_preprocess_page($variables);
    $this->assertEqual(
      $expected_url,
      $variables['logo_link_url'],
      'Default link, with active Site context, is the Site homepage value.'
    );
    $this->assertEqual(
      $expected_target,
      $variables['logo_link_target'],
      'The default link target, with active Site context, is set to _self.'
    );

    // Custom Site logo link.
    $this->ogSmSetOgContextToGroup($this->site);
    og_sm_theme_set_theme_settings(
      array(
        'toggle_logo_link' => 1,
        'logo_link_url' => 'http://google.com',
        'logo_link_target' => '_blank',
      ),
      $this->site
    );
    $expected_url = 'http://google.com';
    $expected_target = '_blank';
    $variables = array('front_page' => $front_page);
    og_sm_theme_preprocess_page($variables);
    $this->assertEqual(
      $expected_url,
      $variables['logo_link_url'],
      'Custom link, with active Site context, is to external URL.'
    );
    $this->assertEqual(
      $expected_target,
      $variables['logo_link_target'],
      'Custom link target, with active Site context, is set to _blank.'
    );
  }

}
