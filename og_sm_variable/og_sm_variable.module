<?php
/**
 * @file
 * OG SM Variable.
 */

// The base cache ID for variables.
define('OG_SM_VARIABLE_CID_SITE', 'site:');
define('OG_SM_VARIABLE_CID_NAME', 'name:');

// The cache bin for Site variables.
define('OG_SM_VARIABLE_CACHE_BIN', 'cache_og_sm_variable');

/**
 * Implements hook_hook_info().
 */
function og_sm_variable_hook_info() {
  $hooks = array(
    'og_sm_variable_defaults' => array(
      'group' => 'og_sm',
    ),
    'og_sm_variable_defaults_alter' => array(
      'group' => 'og_sm',
    ),
  );

  return $hooks;
}

/**
 * Implements hook_flush_caches().
 */
function og_sm_variable_flush_caches() {
  return array(OG_SM_VARIABLE_CACHE_BIN);
}

/**
 * Implements hook_node_delete().
 *
 * No need to use hook_og_sm_site_delete() here.
 */
function og_sm_variable_node_delete($node) {
  og_sm_variable_delete_all($node->nid);
}

/**
 * Get all the variables for the given group.
 *
 * @param int $site_nid
 *   The Site Node ID to get the variables for.
 *
 * @return array
 *   The arrays as retrieved from the DB.
 */
function og_sm_variable_get_all($site_nid) {
  $cid = OG_SM_VARIABLE_CID_SITE . $site_nid;

  // Try to get from cache first.
  $cache = cache_get($cid, OG_SM_VARIABLE_CACHE_BIN);
  if ($cache && !empty($cache->data)) {
    return $cache->data;
  }

  // Get from DB and store in the cache?
  $variables = _og_sm_variable_load_all($site_nid);
  cache_set($cid, $variables, OG_SM_VARIABLE_CACHE_BIN);
  return $variables;
}

/**
 * Get all the values for all sites by the variable name.
 *
 * @param string $name
 *   The variable name to get the values for.
 *
 * @return array
 *   Array of variables keyed by the Site Node ID.
 */
function og_sm_variable_get_all_sites($name) {
  $cid = OG_SM_VARIABLE_CID_NAME . $name;

  // Try to get from cache first.
  $cache = cache_get($cid, OG_SM_VARIABLE_CACHE_BIN);
  if ($cache && !empty($cache->data)) {
    return $cache->data;
  }

  $variables = _og_sm_variable_load_all_sites($name);
  cache_set($cid, $variables, OG_SM_VARIABLE_CACHE_BIN);
  return $variables;
}

/**
 * Get a single variable.
 *
 * @param int $site_nid
 *   The Site Node ID to get the variable for.
 * @param string $name
 *   The variable name to get the value for.
 * @param mixed $default
 *   The default value if the variable does not exists for the Site.
 *
 * @return mixed
 *   The variable value.
 */
function og_sm_variable_get($site_nid, $name, $default = NULL) {
  $variables = og_sm_variable_get_all($site_nid);

  // Return default if not exists.
  if (!array_key_exists($name, $variables)) {
    return $default;
  }

  return $variables[$name];
}

/**
 * Set a variable for a Site by its variable name.
 *
 * @param int $site_nid
 *   The Site Node ID to set the variable for.
 * @param string $name
 *   The variable name to set the value for.
 * @param mixed $value
 *   The value to set.
 */
function og_sm_variable_set($site_nid, $name, $value) {
  _og_sm_variable_save($site_nid, $name, $value);
  _og_sm_variable_cache_clear_site($site_nid);
  _og_sm_variable_cache_clear_name($name);
}

/**
 * Delete a variable.
 *
 * @param int $site_nid
 *   The Site Node ID to delete the variable for.
 * @param string $name
 *   The variable name to delete.
 */
function og_sm_variable_delete($site_nid, $name) {
  _og_sm_variable_delete($site_nid, $name);
  _og_sm_variable_cache_clear_site($site_nid);
  _og_sm_variable_cache_clear_name($name);
}

/**
 * Delete all variables for a Site.
 *
 * @param int $site_nid
 *   The Site Node ID to delete all variable for.
 */
function og_sm_variable_delete_all($site_nid) {
  _og_sm_variable_delete_all($site_nid);
  _og_sm_variable_cache_clear_site($site_nid);
  _og_sm_variable_cache_clear_name_all();
}

/**
 * Helper to load all variables from the DB.
 *
 * @param int $site_nid
 *   The Site Node ID to get the variables for.
 *
 * @return array
 *   All the variables as stored in the DB.
 */
function _og_sm_variable_load_all($site_nid) {
  $query = db_select('og_sm_variable', 'vars');
  $query->fields('vars');
  $query->condition('site_nid', $site_nid);
  $query->orderBy('name', 'ASC');

  $variables = array();
  $results = $query->execute();
  if (!$results) {
    return $variables;
  }

  foreach ($results as $row) {
    $variables[$row->name] = unserialize($row->value);
  }

  return $variables;
}

/**
 * Helper to load a variable for all Sites.
 *
 * This will return an array with the values keyed by the Site nid they belong
 * to.
 *
 * @param string $name
 *   The variable name to get the values for.
 *
 * @return array
 *   The values keyed by the group they belong to.
 */
function _og_sm_variable_load_all_sites($name) {
  $query = db_select('og_sm_variable', 'vars');
  $query->fields('vars');
  $query->condition('name', $name);
  $query->orderBy('site_nid', 'ASC');

  $variables = array();
  $results = $query->execute();
  if (!$results) {
    return $variables;
  }

  foreach ($results as $row) {
    $variables[$row->site_nid] = unserialize($row->value);
  }

  return $variables;
}

/**
 * Save a single variable in the DB.
 *
 * @param int $site_nid
 *   The Site Node ID to save the variable for.
 * @param string $name
 *   The variable name to store the value for.
 * @param string $value
 *   The value to store in the DB.
 *
 * @return int
 *   Result of the operation:
 *   - MergeQuery::STATUS_INSERT (1)
 *   - MergeQuery::STATUS_UPDATE (2)
 */
function _og_sm_variable_save($site_nid, $name, $value) {
  return db_merge('og_sm_variable')
    ->key(array('site_nid' => $site_nid, 'name' => $name))
    ->fields(array('value' => serialize($value)))
    ->execute();
}

/**
 * Delete a variable in the database.
 *
 * @param int $site_nid
 *   The Site Node ID to delete the variable for.
 * @param string $name
 *   The variable name to delete the value for.
 */
function _og_sm_variable_delete($site_nid, $name) {
  db_delete('og_sm_variable')
    ->condition('site_nid', $site_nid)
    ->condition('name', $name)
    ->execute();
}

/**
 * Delete all variabled in the database for the given Site Node ID.
 *
 * @param int $site_nid
 *   The Site Node ID to delete all the variables for.
 */
function _og_sm_variable_delete_all($site_nid) {
  db_delete('og_sm_variable')
    ->condition('site_nid', $site_nid)
    ->execute();
}

/**
 * Helper to clear the cache for a given Site Node ID.
 *
 * @param int $site_nid
 *   The Site Node ID to clear the cache for.
 */
function _og_sm_variable_cache_clear_site($site_nid) {
  cache_clear_all(OG_SM_VARIABLE_CID_SITE . $site_nid, OG_SM_VARIABLE_CACHE_BIN);
}

/**
 * Helper to clear the cache for the given Variable name.
 *
 * @param string $name
 *   The variable name to clear the cache for.
 */
function _og_sm_variable_cache_clear_name($name) {
  cache_clear_all(OG_SM_VARIABLE_CID_NAME . $name, OG_SM_VARIABLE_CACHE_BIN);
}

/**
 * Helper to clear all variable name caches.
 */
function _og_sm_variable_cache_clear_name_all() {
  cache_clear_all(OG_SM_VARIABLE_CID_NAME, OG_SM_VARIABLE_CACHE_BIN, TRUE);
}

/**
 * Sets up a form to save Site variables automatically.
 *
 * Same as Drupal's system_settings_form, but stores the form values in
 * Site variables instead of global variables.
 *
 * @param array $form
 *   An associative array containing the structure of the form.
 * @param array $form_state
 *   The form_state array.
 * @param object $site
 *   The Site node.
 *
 * @return array $form
 *   The form structure.
 *
 * @see system_settings_form()
 * @see og_sm_variable_settings_form_submit()
 *
 * @ingroup forms
 */
function og_sm_variable_settings_form(array $form, array &$form_state, $site) {
  // Store the site in our form_state as we need the site context to store
  // the variables in our submit handler.
  $form_state['site'] = $site;

  $form['actions']['#type'] = 'actions';
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save configuration'),
  );

  if (!empty($_POST) && form_get_errors()) {
    drupal_set_message(t('The settings have not been saved because of the errors.'), 'error');
  }
  $form['#submit'][] = 'og_sm_variable_settings_form_submit';

  // By default, render the form using theme_system_settings_form().
  if (!isset($form['#theme'])) {
    $form['#theme'] = 'system_settings_form';
  }

  return $form;
}

/**
 * Form submission handler for og_sm_variable_settings_form().
 *
 * @param array $form
 *   The form array.
 * @param array $form_state
 *   The form_state array.
 */
function og_sm_variable_settings_form_submit($form, &$form_state) {
  // Exclude unnecessary elements.
  form_state_values_clean($form_state);
  $site = $form_state['site'];

  foreach ($form_state['values'] as $key => $value) {
    if (is_array($value) && isset($form_state['values']['array_filter'])) {
      $value = array_keys(array_filter($value));
    }

    // We save the variable & clear the caches manually to improve speed.
    _og_sm_variable_save($site->nid, $key, $value);
    _og_sm_variable_cache_clear_name($key);
  }
  _og_sm_variable_cache_clear_site($site->nid);

  drupal_set_message(t('The configuration options have been saved.'));
}
