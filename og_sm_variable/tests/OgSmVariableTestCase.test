<?php
/**
 * @file
 * Tests about the Site Variables.
 */

/**
 * Tests about the node type settings.
 */
class OgSmVariableTestCase extends OgSmWebTestCase {

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => t('Site Variable : API'),
      'description' => t('Tests Site Variables API.'),
      'group' => t('Organic Groups Site Manager'),
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    // Enable required modules.
    $modules = array('og_sm_variable');
    parent::setUp($modules);
  }

  /**
   * Test DB operations.
   */
  public function testDbCrud() {
    $site_nid1 = 11;
    $site_nid2 = 12;

    // By default no variables.
    $this->assertEqual(array(), _og_sm_variable_load_all($site_nid1));
    $this->assertEqual(array(), _og_sm_variable_load_all_sites('var3'));

    // Store some variables.
    $var11 = TRUE;
    $var12 = NULL;
    $var13 = 123;
    $var14 = '123';
    $var15 = array();
    $var16 = array(123, 'test123', 'key' => 'value');
    $var21 = FALSE;

    $this->assertEqual(MergeQuery::STATUS_INSERT, _og_sm_variable_save($site_nid2, 'var1', $var21));
    $this->assertEqual(MergeQuery::STATUS_INSERT, _og_sm_variable_save($site_nid1, 'var3', $var13));
    $this->assertEqual(MergeQuery::STATUS_INSERT, _og_sm_variable_save($site_nid1, 'var1', $var11));
    $this->assertEqual(MergeQuery::STATUS_INSERT, _og_sm_variable_save($site_nid1, 'var5', $var15));
    $this->assertEqual(MergeQuery::STATUS_INSERT, _og_sm_variable_save($site_nid1, 'var2', $var12));
    $this->assertEqual(MergeQuery::STATUS_INSERT, _og_sm_variable_save($site_nid1, 'var6', $var16));
    $this->assertEqual(MergeQuery::STATUS_INSERT, _og_sm_variable_save($site_nid1, 'var4', $var14));

    // Update variable.
    $var14 = '321';
    $this->assertEqual(MergeQuery::STATUS_UPDATE, _og_sm_variable_save($site_nid1, 'var4', $var14));

    // Get all variables (expected ordered by name).
    $expected = array(
      'var1' => $var11,
      'var2' => $var12,
      'var3' => $var13,
      'var4' => $var14,
      'var5' => $var15,
      'var6' => $var16,
    );
    $this->assertEqual($expected, _og_sm_variable_load_all($site_nid1));

    // Get a variable for all Sites.
    $expected_by_name = array($site_nid1 => $var11, $site_nid2 => $var21);
    $this->assertEqual($expected_by_name, _og_sm_variable_load_all_sites('var1'));

    // Delete a variable.
    _og_sm_variable_delete($site_nid1, 'var4');
    $expected = array(
      'var1' => $var11,
      'var2' => $var12,
      'var3' => $var13,
      'var5' => $var15,
      'var6' => $var16,
    );
    $this->assertEqual($expected, _og_sm_variable_load_all($site_nid1));

    // Delete all variables.
    _og_sm_variable_delete_all($site_nid1);
    $this->assertEqual(array(), _og_sm_variable_load_all($site_nid1));
  }

  /**
   * Test the variable functions.
   */
  public function testOperations() {
    $site_nid1 = 21;
    $site_nid2 = 22;

    // Store some values in the DB.
    $var11 = TRUE;
    $var12 = 2;
    $var13 = array(1 => 'test1', 'two' => 'test two');
    $var21 = FALSE;
    _og_sm_variable_save($site_nid1, 'var1', $var11);
    _og_sm_variable_save($site_nid1, 'var2', $var12);
    _og_sm_variable_save($site_nid1, 'var3', $var13);
    _og_sm_variable_save($site_nid2, 'var1', $var21);

    // Get all the variables for a Site.
    $expected = array('var1' => $var11, 'var2' => $var12, 'var3' => $var13);
    $variables = og_sm_variable_get_all($site_nid1);
    $this->assertEqual($expected, $variables);

    // Get the variable values for all sites.
    $expected = array($site_nid1 => $var11, $site_nid2 = $var21);
    $this->assertEqual($expected, og_sm_variable_get_all_sites('var1'));

    // Get non existing variable.
    $this->assertNull(og_sm_variable_get($site_nid1, 'non_existing'));
    $default = array(1, 2, 3);
    $this->assertEqual($default, og_sm_variable_get($site_nid1, 'non_existing', $default));

    // Get single existing variable.
    $this->assertEqual($var12, og_sm_variable_get($site_nid1, 'var2'));

    // Set a variable.
    $var4 = 'test var 4';
    og_sm_variable_set($site_nid1, 'var4', $var4);
    $expected = array(
      'var1' => $var11,
      'var2' => $var12,
      'var3' => $var13,
      'var4' => $var4,
    );
    $this->assertEqual($expected, og_sm_variable_get_all($site_nid1));

    // Delete a variable.
    og_sm_variable_delete($site_nid1, 'var2');
    $expected = array('var1' => $var11, 'var3' => $var13, 'var4' => $var4);
    $this->assertEqual($expected, og_sm_variable_get_all($site_nid1));

    // Delete all variables.
    og_sm_variable_delete_all($site_nid1);
    $this->assertEqual(array(), og_sm_variable_get_all($site_nid1));
  }

  /**
   * Test the caching layer.
   */
  public function testCaching() {
    $site_nid1 = 21;
    $site_nid2 = 22;
    $site_nid3 = 33;
    $cid1 = OG_SM_VARIABLE_CID_SITE . $site_nid1;
    $cid2 = OG_SM_VARIABLE_CID_SITE . $site_nid2;
    $cid_var2 = OG_SM_VARIABLE_CID_NAME . 'var2';

    // Store some variables in the DB.
    $var11 = TRUE;
    $var12 = 2;
    $var13 = array(1 => 'test1', 'two' => 'test two');
    _og_sm_variable_save($site_nid1, 'var1', $var11);
    _og_sm_variable_save($site_nid1, 'var2', $var12);
    _og_sm_variable_save($site_nid1, 'var3', $var13);
    $vars1 = array('var1' => $var11, 'var2' => $var12, 'var3' => $var13);

    $var21 = FALSE;
    $var22 = (object) array('test' => 1, 'foo' => 'bar');
    _og_sm_variable_save($site_nid2, 'var1', $var21);
    _og_sm_variable_save($site_nid2, 'var2', $var22);
    $vars2 = array('var1' => $var21, 'var2' => $var22);

    $var31 = 'fizz-buzz';
    _og_sm_variable_save($site_nid3, 'var1', $var31);

    // Check the empty cache first.
    $this->assertFalse(cache_get($cid1, 'cache_og_sm_variable'));
    $this->assertFalse(cache_get($cid2, 'cache_og_sm_variable'));
    $this->assertFalse(cache_get($cid_var2, OG_SM_VARIABLE_CACHE_BIN));

    // Get all variables for site 1, this should store them in the cache.
    og_sm_variable_get_all($site_nid1);
    $cache1 = cache_get($cid1, 'cache_og_sm_variable');
    $this->assertEqual($vars1, $cache1->data);

    // Get a single variables for site 2, this should also load all in cache.
    $this->assertFalse(cache_get($cid2));
    og_sm_variable_get($site_nid2, 'var2');
    $cache2 = cache_get($cid2, 'cache_og_sm_variable');
    $this->assertEqual($vars2, $cache2->data);

    // Get all variable values for all sites by the variable name, this should
    // be stored in the cache.
    og_sm_variable_get_all_sites('var2');
    $expected = array($site_nid1 => $var12, $site_nid2 => $var22);
    $cache_var2 = cache_get($cid_var2, OG_SM_VARIABLE_CACHE_BIN);
    $this->assertEqual($expected, $cache_var2->data);

    // Setting the variable for one site should clear the variable name cache.
    $var22 = 'foo-bar';
    $vars2 = array('var1' => $var21, 'var2' => $var22);
    og_sm_variable_set($site_nid2, 'var2', $var22);
    $this->assertFalse(cache_get($cid_var2, OG_SM_VARIABLE_CACHE_BIN));

    // Cache of first not altered.
    $cache1 = cache_get($cid1, 'cache_og_sm_variable');
    $this->assertEqual($vars1, $cache1->data);

    // Deleting a variable for a site should clear the variable name cache.
    og_sm_variable_get_all_sites('var2');
    $this->assertTrue((bool) cache_get($cid_var2, OG_SM_VARIABLE_CACHE_BIN));
    og_sm_variable_delete($site_nid1, 'var2');
    $this->assertFalse(cache_get($cid_var2, OG_SM_VARIABLE_CACHE_BIN));

    // Clearing the cache for 1 site should not affect other sites.
    og_sm_variable_get_all($site_nid2);
    _og_sm_variable_cache_clear_site($site_nid1);
    $this->assertFalse(cache_get($cid1, 'cache_og_sm_variable'));
    $cache2 = cache_get($cid2, 'cache_og_sm_variable');
    $this->assertEqual($vars2, $cache2->data);

    // Delete all variables for 1 Site, should:
    // - Not affect the other site caches.
    // - Delete all variable name caches.
    og_sm_variable_get_all($site_nid2);
    og_sm_variable_get_all_sites('var2');
    og_sm_variable_delete_all($site_nid3);
    $cache2 = cache_get($cid2, 'cache_og_sm_variable');
    $this->assertEqual($vars2, $cache2->data);
    $this->assertFalse(cache_get($cid_var2, OG_SM_VARIABLE_CACHE_BIN));

    // Delete all caches, should also clear the variables cache.
    og_sm_variable_get_all($site_nid1);
    og_sm_variable_get_all($site_nid2);

    drupal_flush_all_caches();
    $this->assertFalse(cache_get($cid1, 'cache_og_sm_variable'));
    $this->assertFalse(cache_get($cid2, 'cache_og_sm_variable'));
  }

  /**
   * Check if the variables are deleted when the site is deleted.
   */
  public function testVariablesDeleteOnSiteDelete() {
    $content_type = $this->ogSmCreateGroupNodeType();
    og_sm_site_type_add($content_type);
    $site = $this->ogSmCreateGroup($content_type);
    $site_nid = $site->nid;

    og_sm_variable_set($site_nid, 'var1', 'foo');
    og_sm_variable_set($site_nid, 'var2', 'bar');
    $expected = array('var1' => 'foo', 'var2' => 'bar');
    $this->assertEqual($expected, og_sm_variable_get_all($site_nid));

    node_delete($site->nid);
    $this->assertEqual(array(), og_sm_variable_get_all($site_nid));
  }

}
