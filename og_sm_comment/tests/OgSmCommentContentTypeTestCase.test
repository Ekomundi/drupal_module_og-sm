<?php
/**
 * @file
 * Tests for the og_sm_comment module.
 */

/**
 * Test the integration with the og_sm_content type settings.
 */
class OgSmCommentContentTypeTestCase extends OgSmWebTestCase {
  /**
   * Site node to test with.
   *
   * @param object
   */
  protected $siteNode;

  /**
   * Content type outside Sites.
   *
   * @var object
   */
  protected $noNodeTypeSiteContent;

  /**
   * Content type inside Sites.
   *
   * @var object
   */
  protected $nodeTypeSiteContent;

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => t('Site Comment : Content type integration'),
      'description' => t('Tests the integration of Comments wth the Site content type functionality.'),
      'group' => t('Organic Groups Site Manager'),
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    // Enable required modules.
    $modules = array('og_sm_content', 'og_sm_comment');
    parent::setUp($modules);

    // Create site.
    $site_type = $this->ogSmCreateGroupNodeType();
    og_sm_site_type_add($site_type);
    $this->siteNode = $this->ogSmCreateGroup($site_type);

    // Create content type outside Sites.
    $this->noNodeTypeSiteContent = $this->drupalCreateContentType();
    variable_set('comment_' . $this->noNodeTypeSiteContent->type, COMMENT_NODE_OPEN);

    // Create content type inside Sites.
    $this->nodeTypeSiteContent = node_type_load(
      $this->ogSmCreateGroupContentNodeType()
    );
    variable_set('comment_' . $this->nodeTypeSiteContent->type, COMMENT_NODE_OPEN);
  }

  /**
   * Test getting the Site specific content type settings.
   */
  public function testGetTypeInfoBySite() {
    // Content type outside Sites.
    $this->verbose('Global content type : Info retrieved from node_type.');
    drupal_static_reset('og_sm_content_get_type_info_by_site');
    $noNodeTypeSiteContent = og_sm_content_get_type_info_by_site(
      $this->siteNode,
      $this->noNodeTypeSiteContent
    );
    $this->assertEqual(
      COMMENT_NODE_OPEN,
      $noNodeTypeSiteContent->comment,
      'Default comment = global comment settings.'
    );

    // Site content type without settings.
    $this->verbose('Site content type : Info retrieved from node_type.');
    drupal_static_reset('og_sm_content_get_type_info_by_site');
    $nodeTypeSiteContent = og_sm_content_get_type_info_by_site(
      $this->siteNode,
      $this->nodeTypeSiteContent
    );
    $this->assertEqual(
      COMMENT_NODE_OPEN,
      $nodeTypeSiteContent->comment,
      'Default comment = global comment settings.'
    );

    // Site content with Site specific settings.
    $this->verbose('Site content type : Info overwritten by Site config.');
    $key_base = 'og_sm_content_' . $this->nodeTypeSiteContent->type . '_';
    og_sm_variable_set(
      $this->siteNode->nid, $key_base . 'comment', COMMENT_NODE_CLOSED
    );
    drupal_static_reset('og_sm_content_get_type_info_by_site');
    $nodeTypeSiteContent = og_sm_content_get_type_info_by_site(
      $this->siteNode,
      $this->nodeTypeSiteContent
    );
    $this->assertEqual(
      COMMENT_NODE_CLOSED,
      $nodeTypeSiteContent->comment,
      'Comment settings (comment) is overridden by Site config.'
    );

    // Global comment configuration restricts Site configuration.
    variable_set('comment_' . $this->nodeTypeSiteContent->type, COMMENT_NODE_HIDDEN);
    drupal_static_reset('og_sm_content_get_type_info_by_site');
    $content_type = clone $this->nodeTypeSiteContent;
    $content_type = og_sm_content_get_type_info_by_site($this->siteNode, $content_type);
    $this->assertEqual(
      COMMENT_NODE_HIDDEN,
      $content_type->comment,
      'Site Comment settings is overruled by stricter global config (hidden).'
    );

    variable_set('comment_' . $this->nodeTypeSiteContent->type, COMMENT_NODE_CLOSED);
    drupal_static_reset('og_sm_content_get_type_info_by_site');
    $content_type = clone $this->nodeTypeSiteContent;
    $content_type = og_sm_content_get_type_info_by_site($this->siteNode, $content_type);
    $this->assertEqual(
      COMMENT_NODE_CLOSED,
      $content_type->comment,
      'Site Comment settings is overruled by stricter global config (closed).'
    );
  }

  /**
   * Test the content type settings form.
   */
  public function testContentTypeSettingsForm() {
    $path = sprintf(
      'group/node/%d/admin/structure/types/%s',
      $this->siteNode->nid,
      drupal_html_class($this->nodeTypeSiteContent->type)
    );

    $admin = $this->ogSmCreateAdminUser();
    $this->drupalLogin($admin);

    // Check if the content type fields are available.
    $this->drupalGet($path);
    $this->assertResponse(200, 'Administrator can access the Site specific node type settings.');
    $this->assertFieldById(
      'edit-og-sm-content-og-sm-node-type-is-group-content-comment',
      COMMENT_NODE_OPEN,
      'Field in the form to override the content type machine name (type).'
    );

    // Field is not in form if omments are globally not open.
    variable_set('comment_' . $this->nodeTypeSiteContent->type, COMMENT_NODE_CLOSED);
    $this->drupalGet($path);
    $this->assertNoFieldById(
      'edit-og-sm-content-og-sm-node-type-is-group-content-comment',
      '',
      'Field is not in the form if the comment settings are globally not open.'
    );
  }

  /**
   * Test setting site specific info for a content type.
   */
  public function testSiteSpecificContentType() {
    $admin = $this->ogSmCreateAdminUser();
    $this->drupalLogin($admin);

    $site_id = $this->siteNode->nid;
    $key_global = 'comment_' . $this->nodeTypeSiteContent->type;
    $key_site = 'og_sm_content_' . $this->nodeTypeSiteContent->type . '_comment';

    // Create a Site content node.
    $node = $this->ogSmCreateGroupContent(
      $this->nodeTypeSiteContent->type,
      array($this->siteNode)
    );

    // Check if the comment form is rendered.
    $this->drupalGet('node/' . $node->nid);
    $this->assertText(t('Add new comment'), 'Comment section is on the page');
    $this->assertFieldById('edit-subject', '', 'Comment form is on the page.');

    // Create comment.
    $comment_edit = array(
      'subject' => $this->randomName(),
      'comment_body[und][0][value]' => $this->randomName(),
    );
    $this->drupalPost(NULL, $comment_edit, t('Save'));
    $this->assertText($comment_edit['subject'], 'Comment is posted to node.');

    // Hide the comments via the site specific settings.
    og_sm_variable_set($site_id, $key_site, COMMENT_NODE_HIDDEN);
    $this->drupalGet('node/' . $node->nid);
    $this->assertNoText(t('Add new comment'), 'No comment section on the page.');
    $this->assertNoText(t('Add new comment'), 'No option to add new comments.');
    $this->assertNoText($comment_edit['subject'], 'No comments listed on the page.');

    // Close the comment form, this means existing comments are still shown but
    // the comment form itself is not displayed.
    og_sm_variable_set($site_id, $key_site, COMMENT_NODE_CLOSED);
    $this->drupalGet('node/' . $node->nid);
    $this->assertNoText(t('Add new comment'), 'No option to add new comments.');
    $this->assertText($comment_edit['subject'], 'Existing comments are listed.');

    // Override the settings globally.
    variable_set($key_global, COMMENT_NODE_HIDDEN);
    $this->drupalGet('node/' . $node->nid);
    $this->assertNoText(t('Add new comment'), 'No comment section on the page.');
    $this->assertNoText(t('Add new comment'), 'No option to add new comments.');
    $this->assertNoText($comment_edit['subject'], 'No comments listed on the page.');
  }

}
