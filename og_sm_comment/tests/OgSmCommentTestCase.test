<?php

/**
 * @file
 * Tests for the og_sm_comment module.
 */

/**
 * Tests the OG SM Comment functionality.
 */
class OgSmCommentTestCase extends OgSmWebTestCase {
  protected $site;
  protected $siteUser1;
  protected $siteUser2;
  protected $siteAdmin;
  protected $siteContentTypeName = 'og_sm_site_content_type_page';
  protected $siteType;

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => t('Site Comment : Management'),
      'description' => t('Tests the Site Comment management functionality.'),
      'group' => t('Organic Groups Site Manager'),
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    // Enable required modules.
    $modules = array('og_sm_comment');
    parent::setUp($modules);

    // Create site.
    $this->siteType = $this->ogSmCreateGroupNodeType();
    og_sm_site_type_add($this->siteType);
    $this->site = $site = $this->ogSmCreateGroup($this->siteType);
    $sites = array($site);

    $roles = array_flip(og_roles('node', $this->siteType));

    // Grant comments permissions to og group roles.
    og_role_grant_permissions($roles[OG_ADMINISTRATOR_ROLE], array(
      OG_SM_COMMENT_OG_PERM_DELETE_ALL_COMMENTS,
      OG_SM_COMMENT_OG_PERM_DELETE_OWN_COMMENTS,
      OG_SM_COMMENT_OG_PERM_ADMINISTER_COMMENTS,
    ));
    og_role_grant_permissions($roles[OG_AUTHENTICATED_ROLE], array(
      OG_SM_COMMENT_OG_PERM_DELETE_OWN_COMMENTS,
      OG_SM_COMMENT_OG_PERM_EDIT_OWN_COMMENTS,
    ));

    // Create Site admin.
    $this->siteAdmin = $this->ogSmCreateGroupUser(array(), $sites);
    og_role_grant('node', $this->site->nid, $this->siteAdmin->uid, $roles[OG_ADMINISTRATOR_ROLE]);

    // Create Site users.
    $this->siteUser1 = $this->ogSmCreateGroupUser(array(), $sites);
    og_role_grant('node', $this->site->nid, $this->siteUser1->uid, $roles[OG_AUTHENTICATED_ROLE]);
    $this->siteUser2 = $this->ogSmCreateGroupUser(array(), $sites);
    og_role_grant('node', $this->site->nid, $this->siteUser2->uid, $roles[OG_AUTHENTICATED_ROLE]);

    // Create a content type which is open for comments.
    $this->siteContentTypeName = $this->ogSmCreateGroupContentNodeType();
  }

  /**
   * Helper function to create a new comment.
   *
   * @param object $node
   *   The node the comment should be linked to.
   * @param object $user
   *   The user who made the comment.
   *
   * @return object
   *   The comment object.
   */
  private function createComment($node, $user) {
    $comment = (object) array(
      'cid' => NULL,
      'nid' => $node->nid,
      'node_type' => $node->type,
      'pid' => 0,
      'uid' => $user->uid,
      'status' => COMMENT_PUBLISHED,
      'subject' => $this->randomName(),
      'hostname' => ip_address(),
      'language' => LANGUAGE_NONE,
    );
    $comment->comment_body[LANGUAGE_NONE][0] = array('value' => $this->randomName());
    comment_save($comment);
    return $comment;
  }

  /**
   * Test the access callbacks.
   */
  public function testAccessCallbacks() {
    $node = $this->ogSmCreateGroupContent($this->siteContentTypeName, array($this->site));
    $comment = $this->createComment($node, $this->siteUser1);

    // Verify that user1 has access to delete or edit his own comment.
    $this->drupalLogin($this->siteUser1);
    $this->drupalGet('comment/' . $comment->cid . '/delete');
    $this->assertResponse(200);
    $this->assertRaw(t('Are you sure you want to delete the comment %title?', array('%title' => $comment->subject)));
    $this->drupalGet('comment/' . $comment->cid . '/edit');
    $this->assertResponse(200);
    $this->assertRaw(t('Edit comment %comment', array('%comment' => $comment->subject)));

    // Verify that user2 doesn't has access to delete or edit user1's comment.
    $this->drupalLogin($this->siteUser2);
    $this->drupalGet('comment/' . $comment->cid . '/delete');
    $this->assertResponse(403);
    $this->drupalGet('comment/' . $comment->cid . '/edit');
    $this->assertResponse(403);

    // Verify that site-admin has access to delete or edit user1's comment.
    $this->drupalLogin($this->siteAdmin);
    $this->drupalGet('comment/' . $comment->cid . '/delete');
    $this->assertResponse(200);
    $this->drupalGet('comment/' . $comment->cid . '/edit');
    $this->assertResponse(200);
  }

  /**
   * Test the og_sm_comment_access() callback.
   */
  public function testCommentAccessCallback() {
    $node = $this->ogSmCreateGroupContent($this->siteContentTypeName, array($this->site));
    $comment = $this->createComment($node, $this->siteUser1);

    // Verify that user 1 can view, delete and edit his own comment.
    $access = og_sm_comment_access('view', $comment, $this->siteUser1);
    $this->assertTrue($access, 'User 1 can view his own comment');
    $access = og_sm_comment_access('delete', $comment, $this->siteUser1);
    $this->assertTrue($access, 'User 1 can delete his own comment');
    $access = og_sm_comment_access('edit', $comment, $this->siteUser1);
    $this->assertTrue($access, 'User 1 can edit his own comment');

    // Verify that user 2 can view the comment of user 1 but cannot delete or
    // edit it.
    $access = og_sm_comment_access('view', $comment, $this->siteUser2);
    $this->assertTrue($access, 'User 2 can view the comment of user 1');
    $access = og_sm_comment_access('delete', $comment, $this->siteUser2);
    $this->assertFalse($access, 'User 2 cannot delete the comment of user 1');
    $access = og_sm_comment_access('edit', $comment, $this->siteUser2);
    $this->assertFalse($access, 'User 2 cannot edit the comment of user 1');

    // Verify that the site-admin can edit and delete the comment of user 1.
    $access = og_sm_comment_access('delete', $comment, $this->siteAdmin);
    $this->assertTrue($access, 'Site-admin can delete the comment of user 1');
    $access = og_sm_comment_access('edit', $comment, $this->siteAdmin);
    $this->assertTrue($access, 'Site-admin can edit the comment of user 1');

    // Verify that user 1 cannot delete or edit his comment anymore when he
    // doesn't have access to the node on which the comment was made.
    drupal_static_reset('node_access');
    $node->status = NODE_NOT_PUBLISHED;
    node_save($node);
    $access = node_access('view', $node, $this->siteUser1);
    $this->assertFalse($access, 'User 1 cannot access the node on which the comment was made');
    $access = og_sm_comment_access('view', $comment, $this->siteUser1);
    $this->assertFalse($access, 'User 1 cannot view his own comment');
    $access = og_sm_comment_access('delete', $comment, $this->siteUser1);
    $this->assertFalse($access, 'User 1 cannot delete his own comment');
    $access = og_sm_comment_access('edit', $comment, $this->siteUser1);
    $this->assertFalse($access, 'User 1 cannot edit his own comment');
  }

  /**
   * Test the site comment overview.
   */
  public function testCommentOverview() {
    module_enable(array('views_bulk_operations'));
    $context_providers = og_context_negotiation_info();
    og_context_negotiation_set(array($context_providers['og_sm_context_comment']));
    $this->drupalLogin($this->siteAdmin);

    // Verify that the site admin can see an overview of the comments made on
    // his site.
    $this->drupalGet('group/node/' . $this->site->nid . '/admin/comments');
    $this->assertResponse(200);

    // Verify that there is a message when no comments are made yet.
    $this->assertText('There are no comments in this Site.');

    // Create a comment.
    $node = $this->ogSmCreateGroupContent($this->siteContentTypeName, array($this->site));
    $comment = $this->createComment($node, $this->siteUser1);

    // Verify that the comment appears in the comment overview.
    $this->drupalGet('group/node/' . $this->site->nid . '/admin/comments');
    $element = $this->xpath('//table[contains(@class, :class)]//td[contains(@class, :field_class)]//input[contains(@value, :cid)]', array(
      ':class' => 'views-table',
      ':field_class' => 'views-field-views-bulk-operations',
      ':cid' => $comment->cid,
    ));
    $this->assertTrue($element, 'The comment is shown in the site overview');

    // Verify that the comment is not shown in other site overviews.
    $new_site = $this->ogSmCreateGroup($this->siteType);
    og_group('node', $new_site->nid,
      array(
        'entity_type' => 'user',
        'entity' => $this->siteAdmin,
      )
    );
    $this->drupalGet('group/node/' . $new_site->nid . '/admin/comments');
    $this->assertText('There are no comments in this Site.');
  }

}
