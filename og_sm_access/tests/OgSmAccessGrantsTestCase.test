<?php
/**
 * @file
 * Tests about the Site Access Grants.
 */

/**
 * Tests about the Site access grants hook.
 */
class OgSmAccessGrantsTestCase extends OgSmWebTestCase {

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => t('Site Access Grants'),
      'description' => t('Tests Site Access grants hook.'),
      'group' => t('Organic Groups Site Manager'),
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    // Enable required modules.
    $modules = array('og_sm_access');
    parent::setUp($modules);
  }

  /**
   * Test the Site Access grants hook implementation.
   */
  public function testSiteUnpublishedAccessGrants() {
    // Content types.
    $group_type = $this->ogSmCreateGroupNodeType();

    // Create group.
    $site_published = $this->ogSmCreateGroup($group_type);
    $site_unpublished = $this->ogSmCreateGroup($group_type, array('status' => 0));
    $groups = array($site_published, $site_unpublished);

    // Create group role.
    $role_manager = og_role_create('role_group_manager', 'node', 0, $group_type);
    og_role_save($role_manager);
    og_role_grant_permissions($role_manager->rid, array(OG_SM_ACCESS_PERMISSION_SITE));

    // Create users.
    $anonymous = user_load(0);
    $user = $this->drupalCreateUser();
    $group_user = $this->ogSmCreateGroupUser(array(), $groups);
    $group_manager = $this->ogSmCreateGroupUser(array(), $groups);
    og_role_grant('node', $site_published->nid, $group_manager->uid, $role_manager->rid);
    og_role_grant('node', $site_unpublished->nid, $group_manager->uid, $role_manager->rid);

    // Default grants.
    $grants = array(OG_SM_ACCESS_REALM_SITE => array(OG_SM_ACCESS_GRANT_ALL));

    // Only default grants if user is not member of a Site group.
    $this->assertEqual($grants, og_sm_access_node_grants($anonymous, 'view'));
    $this->assertEqual($grants, og_sm_access_node_grants($user, 'view'));
    $this->assertEqual($grants, og_sm_access_node_grants($group_user, 'view'));
    $this->assertEqual($grants, og_sm_access_node_grants($group_manager, 'view'));

    // Make group a Site type.
    og_sm_site_type_add($group_type);

    // Group is published, grants should be default.
    $this->assertEqual($grants, og_sm_access_node_grants($anonymous, 'view'));
    $this->assertEqual($grants, og_sm_access_node_grants($user, 'view'));
    $this->assertEqual($grants, og_sm_access_node_grants($group_user, 'view'));

    // The Site manager should also get grants for the unpublished group.
    $expected = $grants;
    $expected[OG_SM_ACCESS_REALM_SITE][] = $site_unpublished->nid;
    $this->assertEqual($expected, og_sm_access_node_grants($group_manager, 'view'));
  }

  /**
   * Test the access grants to manage all Site nodes.
   */
  public function testManageSiteContentAccessGrants() {
    // Content types.
    $site_type = $this->ogSmCreateGroupNodeType();
    og_sm_site_type_add($site_type);

    // Create Site.
    $site = $this->ogSmCreateGroup($site_type);
    $sites = array($site);

    // Create Site role.
    $role_manager = og_role_create('role_site_manager', 'node', 0, $site_type);
    og_role_save($role_manager);
    og_role_grant_permissions($role_manager->rid, array(OG_SM_ACCESS_PERMISSION_CONTENT));

    // Create users.
    $anonymous = user_load(0);
    $user = $this->drupalCreateUser();
    $site_user = $this->ogSmCreateGroupUser(array(), $sites);
    $site_manager = $this->ogSmCreateGroupUser(array(), $sites);
    og_role_grant('node', $site->nid, $site_manager->uid, $role_manager->rid);

    // Check grants.
    $expected = array(OG_SM_ACCESS_REALM_SITE => array(OG_SM_ACCESS_GRANT_ALL));
    $this->assertEqual($expected, og_sm_access_node_grants($anonymous, 'view'));
    $this->assertEqual($expected, og_sm_access_node_grants($user, 'edit'));
    $this->assertEqual($expected, og_sm_access_node_grants($site_user, 'delete'));

    $expected[OG_SM_ACCESS_REALM_CONTENT] = array($site->nid);
    $this->assertEqual($expected, og_sm_access_node_grants($site_manager, 'view'));
    $this->assertEqual($expected, og_sm_access_node_grants($site_manager, 'edit'));
    $this->assertEqual($expected, og_sm_access_node_grants($site_manager, 'delete'));
  }

}
