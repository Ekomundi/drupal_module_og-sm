<?php
/**
 * @file
 * Tests about the Site Access callbacks.
 */

/**
 * Tests about the Site Access callbacks to use in menu hooks.
 */
class OgSmAccessCallbacksTestCase extends OgSmWebTestCase {

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => t('Site Access Callbacks'),
      'description' => t('Tests Site Access callbacks.'),
      'group' => t('Organic Groups Site Manager'),
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    // Enable required modules.
    $modules = array('og_sm_access');
    parent::setUp($modules);
  }

  /**
   * Test the callbacks to be used in menu hooks.
   */
  public function testAccessCallbacks() {
    // Content types.
    $group_type = $this->ogSmCreateGroupNodeType();

    // Create group.
    $group = $this->ogSmCreateGroup($group_type);
    $groups = array($group);

    // Create group role.
    $role_manager = og_role_create('role_group_manager', 'node', 0, $group_type);
    og_role_save($role_manager);
    og_role_grant_permissions($role_manager->rid, array(OG_SM_ACCESS_PERMISSION_SITE));

    // Create users.
    $anonymous = user_load(0);
    $user = $this->drupalCreateUser();
    $group_user = $this->ogSmCreateGroupUser(array(), $groups);
    $group_manager = $this->ogSmCreateGroupUser(array(), $groups);
    og_role_grant('node', $group->nid, $group_manager->uid, $role_manager->rid);

    // Group is not a Site.
    $this->assertFalse(og_sm_access_site_nid_callback($group->nid, $anonymous));
    $this->assertFalse(og_sm_access_site_nid_callback($group->nid, $user));
    $this->assertFalse(og_sm_access_site_nid_callback($group->nid, $group_user));
    $this->assertFalse(og_sm_access_site_nid_callback($group->nid, $group_manager));

    // Group is a site & is published.
    og_sm_site_type_add($group_type);
    $this->assertTrue(og_sm_access_site_nid_callback($group->nid, $anonymous));
    $this->assertTrue(og_sm_access_site_nid_callback($group->nid, $user));
    $this->assertTrue(og_sm_access_site_nid_callback($group->nid, $group_user));
    $this->assertTrue(og_sm_access_site_nid_callback($group->nid, $group_manager));

    // Site is not published.
    $group->status = 0;
    node_save($group);
    // node_access is statically cached, we need to reset manually.
    drupal_static_reset('node_access');
    $this->assertFalse(og_sm_access_site_nid_callback($group->nid, $anonymous));
    $this->assertFalse(og_sm_access_site_nid_callback($group->nid, $user));
    $this->assertFalse(og_sm_access_site_nid_callback($group->nid, $group_user));
    $this->assertTrue(og_sm_access_site_nid_callback($group->nid, $group_manager));
  }

}
