<?php
/**
 * @file
 * Tests about the Site Access Records.
 */

/**
 * Tests about the Site Access Records hook.
 */
class OgSmAccessRecordsTestCase extends OgSmWebTestCase {

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => t('Site Access Records'),
      'description' => t('Tests Site Access records hook.'),
      'group' => t('Organic Groups Site Manager'),
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    // Enable required modules.
    $modules = array('og_sm_access');
    parent::setUp($modules);
  }

  /**
   * Test the site node & site content node access records.
   */
  public function testAccessRecords() {
    // Content types.
    $group_type = $this->ogSmCreateGroupNodeType();
    $group_content_type = $this->ogSmCreateGroupContentNodeType();

    // Create groups.
    $group_published = $this->ogSmCreateGroup($group_type);
    $group_unpublished = $this->ogSmCreateGroup($group_type);
    $group_unpublished->status = 0;
    node_save($group_unpublished);

    // Create nodes.
    $group_published_content_published = $this->ogSmCreateGroupContent($group_content_type, array($group_published));
    $group_published_content_unpublished = $this->ogSmCreateGroupContent($group_content_type, array($group_published));
    $group_published_content_unpublished->status = 0;
    node_save($group_published_content_unpublished);

    $group_unpublished_content_published = $this->ogSmCreateGroupContent($group_content_type, array($group_unpublished));
    $group_unpublished_content_unpublished = $this->ogSmCreateGroupContent($group_content_type, array($group_unpublished));
    $group_unpublished_content_unpublished->status = 0;
    node_save($group_unpublished_content_unpublished);

    // Test for non Site group types.
    $this->assertNull(og_sm_access_node_access_records($group_published));
    $this->assertNull(og_sm_access_node_access_records($group_published_content_published));
    $this->assertNull(og_sm_access_node_access_records($group_published_content_unpublished));
    $this->assertNull(og_sm_access_node_access_records($group_unpublished));
    $this->assertNull(og_sm_access_node_access_records($group_unpublished_content_published));
    $this->assertNull(og_sm_access_node_access_records($group_unpublished_content_unpublished));

    // Test for Site group types.
    og_sm_site_type_add($group_type);

    // Published Sites.
    $expected_group_published = array(
      array(
        'realm' => OG_SM_ACCESS_REALM_SITE,
        'gid' => 0,
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 0,
      ),
    );
    $expected_group_published_content_published = $expected_group_published;
    $expected_group_published_content_published[] = array(
      'realm' => OG_SM_ACCESS_REALM_CONTENT,
      'gid' => $group_published->nid,
      'grant_view' => 1,
      'grant_update' => 1,
      'grant_delete' => 1,
      'priority' => 0,
    );
    $expected_group_published_content_unpublished = array(
      array(
        'realm' => OG_SM_ACCESS_REALM_SITE,
        'gid' => 0,
        'grant_view' => 0,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 0,
      ),
      array(
        'realm' => OG_SM_ACCESS_REALM_CONTENT,
        'gid' => $group_published->nid,
        'grant_view' => 1,
        'grant_update' => 1,
        'grant_delete' => 1,
        'priority' => 0,
      ),
    );

    $this->assertEqual(
      $expected_group_published,
      og_sm_access_node_access_records($group_published)
    );
    $this->assertEqual(
      $expected_group_published_content_published,
      og_sm_access_node_access_records($group_published_content_published)
    );
    $this->assertEqual(
      $expected_group_published_content_unpublished,
      og_sm_access_node_access_records($group_published_content_unpublished)
    );

    // Unpublished Sites.
    $expected_group_unpublished = array(
      array(
        'realm' => OG_SM_ACCESS_REALM_SITE,
        'gid' => $group_unpublished->nid,
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 0,
      ),
    );
    $expected_group_unpublished_content_published = $expected_group_unpublished;
    $expected_group_unpublished_content_published[] = array(
      'realm' => OG_SM_ACCESS_REALM_CONTENT,
      'gid' => $group_unpublished->nid,
      'grant_view' => 1,
      'grant_update' => 1,
      'grant_delete' => 1,
      'priority' => 0,
    );
    $expected_group_unpublished_content_unpublished = array(
      array(
        'realm' => OG_SM_ACCESS_REALM_SITE,
        'gid' => $group_unpublished->nid,
        'grant_view' => 0,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 0,
      ),
      array(
        'realm' => OG_SM_ACCESS_REALM_CONTENT,
        'gid' => $group_unpublished->nid,
        'grant_view' => 1,
        'grant_update' => 1,
        'grant_delete' => 1,
        'priority' => 0,
      ),
    );
    $this->assertEqual(
      $expected_group_unpublished,
      og_sm_access_node_access_records($group_unpublished)
    );
    $this->assertEqual(
      $expected_group_unpublished_content_published,
      og_sm_access_node_access_records($group_unpublished_content_published)
    );
    $this->assertEqual(
      $expected_group_unpublished_content_unpublished,
      og_sm_access_node_access_records($group_unpublished_content_unpublished)
    );
  }

}
