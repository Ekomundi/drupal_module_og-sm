<?php
/**
 * @file
 * Tests for OG SM Breadcrumb settings.
 */

/**
 * Test class for the breadcrumb settings and alters.
 */
class OgSmBreadcrumbTestCase extends OgSmWebTestCase {
  /**
   * Test data.
   */
  protected $site;
  protected $siteType;
  protected $sitePath;

  /**
   * Test users.
   *
   * @var object
   */
  protected $userAdmin;

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => t('Site Breadcrumb : Feature'),
      'description' => t('Tests the Breadcrumb settings.'),
      'group' => t('Organic Groups Site Manager'),
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    // Enable required modules.
    $modules = array('og_sm_breadcrumb', 'og_sm_context');
    parent::setUp($modules);

    // Setup OG context.
    $context_enabled = array(
      'og_sm_context_node' => new stdClass(),
      'og_sm_context_admin' => new stdClass(),
    );
    variable_set('og_context_negotiation_group_context', $context_enabled);
    $context_order = array(
      'og_sm_context_node' => -50,
      'og_sm_context_admin' => -49,
    );
    variable_set('og_context_providers_weight_group_context', $context_order);

    // Create a Site.
    $this->siteType = $this->ogSmCreateGroupNodeType();
    og_sm_site_type_add($this->siteType);
    $this->site = $this->ogSmCreateGroup($this->siteType);
    $this->sitePath = 'node/' . $this->site->nid;

    // Create users.
    $this->userAdmin = $this->ogSmCreateAdminUser();
  }

  /**
   * Test the preprocessor without the og_sm_feature module enabled.
   */
  public function testPreprocessBreadcrumbWithoutFeatureModule() {
    // Defaults.
    $original = array(
      'breadcrumb' => array(
        '<a href="0">Home</a>',
        '<a href="/node/' . $this->site->nid . '">' . $this->site->title . '</a>',
        '<a href="1">1</a>',
        '<a href="2">2</a>',
      ),
    );
    $page_title = 'Current page title';
    drupal_set_title($page_title);

    // Disable all global options.
    variable_set('og_sm_breadcrumb_enable', 0);
    variable_set('og_sm_breadcrumb_hide_on_frontpage', 0);
    variable_set('og_sm_breadcrumb_force_home', 0);
    variable_set('og_sm_breadcrumb_append_title', 0);

    // No Site context => no preprocess.
    $variables = $original;
    drupal_set_breadcrumb($variables['breadcrumb']);
    og_sm_breadcrumb_preprocess_breadcrumb($variables);
    $this->assertEqual($original, $variables, 'No changes when no active Site context.');

    // Set Site context & set Site frontpage as current page.
    $this->ogSmSetOgContextToGroup($this->site);
    $_GET['q'] = $this->sitePath;

    // Breadcrumbs are disabled => empty breadcrumbs array.
    $variables = $original;
    drupal_set_breadcrumb($variables['breadcrumb']);
    $expected = array('breadcrumb' => array());
    og_sm_breadcrumb_preprocess_breadcrumb($variables);
    $this->assertEqual(
      $expected,
      $variables,
      'Breadcrumbs are removed when disabled for all Sites.'
    );

    // Admin paths are not affected.
    $_GET['q'] = 'admin/content';
    $variables = $original;
    drupal_set_breadcrumb($variables['breadcrumb']);
    $expected = $original;
    og_sm_breadcrumb_preprocess_breadcrumb($variables);
    $this->assertEqual(
      $expected,
      $variables,
      'Breadcrumbs on admin paths are not removed.'
    );

    // Reset path to Site frontpage.
    $_GET['q'] = $this->sitePath;

    // Enable breadcrumbs.
    variable_set('og_sm_breadcrumb_enable', 1);
    $variables = $original;
    drupal_set_breadcrumb($variables['breadcrumb']);
    $expected = $original;
    og_sm_breadcrumb_preprocess_breadcrumb($variables);
    $this->assertEqual(
      $expected,
      $variables,
      'Breadcrumbs are shown when enabled for all Sites.'
    );

    // Enable force homepage & append title.
    variable_set('og_sm_breadcrumb_force_home', 1);
    variable_set('og_sm_breadcrumb_append_title', 1);
    $variables = $original;
    drupal_set_breadcrumb($variables['breadcrumb']);
    $expected = array(
      'breadcrumb' => array(
        '<a href="/node/' . $this->site->nid . '" class="active">Home</a>',
        '<a href="1">1</a>',
        '<a href="2">2</a>',
        $page_title,
      ),
    );
    og_sm_breadcrumb_preprocess_breadcrumb($variables);
    $this->assertEqual(
      $expected,
      $variables,
      'Home link is replaced by link to Site homepage, page title is appended.'
    );

    // Disable breadcrumbs on the Site homepage.
    variable_set('og_sm_breadcrumb_hide_on_frontpage', 1);
    $variables = $original;
    drupal_set_breadcrumb($variables['breadcrumb']);
    $expected = array('breadcrumb' => array());
    og_sm_breadcrumb_preprocess_breadcrumb($variables);
    $this->assertEqual(
      $expected,
      $variables,
      'No breadcrumbs on the Site homepage when hide_on_frontpage is enabled.'
    );

    // Check if only disabled on Site frontpage.
    $_GET['q'] = 'fake/path/whatever';
    $variables = $original;
    drupal_set_breadcrumb($variables['breadcrumb']);
    $expected = array(
      'breadcrumb' => array(
        '<a href="/node/' . $this->site->nid . '">Home</a>',
        '<a href="1">1</a>',
        '<a href="2">2</a>',
        $page_title,
      ),
    );
    og_sm_breadcrumb_preprocess_breadcrumb($variables);
    $this->assertEqual(
      $expected,
      $variables,
      'Breadcrumb is shown on pages other then the Site frontpage.'
    );
  }

  /**
   * Test the preprocessor with the og_sm_feature module enabled.
   */
  public function testPreprocessBreadcrumbWithFeatureModule() {
    module_enable(array('og_sm_feature'));

    // Defaults.
    $original = array(
      'breadcrumb' => array(
        '<a href="0">Home</a>',
        '<a href="/node/' . $this->site->nid . '">' . $this->site->title . '</a>',
        '<a href="1">1</a>',
        '<a href="2">2</a>',
      ),
    );
    $page_title = 'Current page title';
    drupal_set_title($page_title);

    // Disable the Site feature options.
    og_sm_feature_site_disable($this->site, OG_SM_BREADCRUMB_FEATURE);
    og_sm_variable_set($this->site->nid, 'og_sm_breadcrumb_hide_on_frontpage', 0);
    og_sm_variable_set($this->site->nid, 'og_sm_breadcrumb_force_home', 0);
    og_sm_variable_set($this->site->nid, 'og_sm_breadcrumb_append_title', 0);
    og_sm_variable_set($this->site->nid, 'og_sm_breadcrumb_override_root', 0);
    og_sm_variable_set($this->site->nid, 'og_sm_breadcrumb_override_root_parts', array());

    // Set the path to the Site frontpage.
    $_GET['q'] = $this->sitePath;

    // Feature is disabled => no breadcrumb.
    $variables = $original;
    drupal_set_breadcrumb($variables['breadcrumb']);
    $expected = array('breadcrumb' => array());
    og_sm_breadcrumb_preprocess_breadcrumb($variables);
    $this->assertEqual(
      $expected,
      $variables,
      'Breadcrumbs are removed when Site feature is not enabled.'
    );

    // Enable the feature => breadcrumbs.
    og_sm_feature_site_enable($this->site, OG_SM_BREADCRUMB_FEATURE);
    $variables = $original;
    drupal_set_breadcrumb($variables['breadcrumb']);
    $expected = $original;
    og_sm_breadcrumb_preprocess_breadcrumb($variables);
    $this->assertEqual(
      $expected,
      $variables,
      'Breadcrumbs are available on the Site homepage when the feature is enabled.'
    );

    // Force home & append title.
    og_sm_variable_set($this->site->nid, 'og_sm_breadcrumb_force_home', 1);
    og_sm_variable_set($this->site->nid, 'og_sm_breadcrumb_append_title', 1);
    $variables = $original;
    drupal_set_breadcrumb($variables['breadcrumb']);
    $expected = array(
      'breadcrumb' => array(
        '<a href="/node/' . $this->site->nid . '" class="active">Home</a>',
        '<a href="1">1</a>',
        '<a href="2">2</a>',
        $page_title,
      ),
    );
    og_sm_breadcrumb_preprocess_breadcrumb($variables);
    $this->assertEqual(
      $expected,
      $variables,
      'Home link is replaced by link to Site homepage, page title is appended.'
    );

    // Disable on the Site frontpage.
    og_sm_variable_set($this->site->nid, 'og_sm_breadcrumb_hide_on_frontpage', 1);
    $variables = $original;
    drupal_set_breadcrumb($variables['breadcrumb']);
    $expected = array('breadcrumb' => array());
    og_sm_breadcrumb_preprocess_breadcrumb($variables);
    $this->assertEqual(
      $expected,
      $variables,
      'Breadcrumbs are not displayed on the Site frontpage.'
    );

    // Disabled on the Site frontpage does not disable it on other Site pages.
    $_GET['q'] = 'fake/path/whatever';
    $variables = $original;
    drupal_set_breadcrumb($variables['breadcrumb']);
    $expected = array(
      'breadcrumb' => array(
        '<a href="/node/' . $this->site->nid . '">Home</a>',
        '<a href="1">1</a>',
        '<a href="2">2</a>',
        $page_title,
      ),
    );
    og_sm_breadcrumb_preprocess_breadcrumb($variables);
    $this->assertEqual(
      $expected,
      $variables,
      'Breadcrumb is shown on pages other then the Site frontpage.'
    );

    // Custom breadcrumb root.
    og_sm_variable_set($this->site->nid, 'og_sm_breadcrumb_override_root', 1);
    og_sm_variable_set($this->site->nid, 'og_sm_breadcrumb_override_root_parts', array(
      array('text' => 'Custom 1', 'path' => 'path1'),
      array('text' => 'Custom 2', 'path' => 'path2'),
    ));
    $variables = $original;
    drupal_set_breadcrumb($variables['breadcrumb']);
    $expected = array(
      'breadcrumb' => array(
        '<a href="/path1">Custom 1</a>',
        '<a href="/path2">Custom 2</a>',
        '<a href="/node/' . $this->site->nid . '">' . $this->site->title . '</a>',
        '<a href="1">1</a>',
        '<a href="2">2</a>',
        $page_title,
      ),
    );
    og_sm_breadcrumb_preprocess_breadcrumb($variables);
    $this->assertEqual(
      $expected,
      $variables,
      'Breadcrumb root is replaced by custom path.'
    );
  }

  /**
   * Test the administrative pages depending on the og_sm_feature module.
   */
  public function testAdministrativePages() {
    $path_default = 'admin/config/group/breadcrumb';
    $path_feature = 'admin/config/group/features/breadcrumb';
    $path_feature_site = 'group/node/' . $this->site->nid . '/admin/features/breadcrumb';
    $this->drupalLogin($this->userAdmin);

    // Default only global form.
    $this->drupalGet($path_default);
    $this->assertRaw('<h1 class="page-title">OG Breadcrumb</h1>', 'Global OG Breadcrumb page is available.');
    $this->drupalGet($path_feature);
    $this->assertNoRaw('<h1 class="page-title">Breadcrumb</h1>', 'Global feature settings are not available when og_sm_feature is not enabled.');
    $this->drupalGet($path_feature_site);
    $this->assertNoRaw('<h1 class="page-title">Breadcrumb</h1>', 'Site feature settings is not available when og_sm_feature is not enabled.');

    // When og_sm_feature module is enabled.
    module_enable(array('og_sm_feature'));
    menu_rebuild();
    $this->drupalGet($path_default);
    $this->assertNoRaw('<h1 class="page-title">OG Breadcrumb</h1>', 'Global OG Breadcrumb page is not available when og_sm_feature is enabled..');
    $this->drupalGet($path_feature);
    $this->assertRaw('<h1 class="page-title">Breadcrumb</h1>', 'Global feature settings are available when og_sm_feature is enabled.');
    $this->drupalGet($path_feature_site);
    $this->assertRaw('<h1 class="page-title">Breadcrumb</h1>', 'Site feature settings is available when og_sm_feature is enabled.');
  }

  /**
   * Test visibility of breadcrumb on page.
   */
  public function testBreadcrumbOnPage() {
    // Feature module not enabled.
    variable_set('og_sm_breadcrumb_enable', 0);
    variable_set('og_sm_breadcrumb_hide_on_frontpage', 0);
    variable_set('og_sm_breadcrumb_force_home', 0);
    variable_set('og_sm_breadcrumb_append_title', 0);

    $this->drupalGet('user/login');
    $this->assertBreadcrumbOnPage('Breadcrumb is available outside Site context.');

    $this->drupalGet($this->sitePath);
    $this->assertNoBreadcrumbOnPage('No breadcrumb on Site pages when not enabled globally.');

    variable_set('og_sm_breadcrumb_enable', 1);
    $this->drupalGet($this->sitePath);
    $this->assertBreadcrumbOnPage('Breadcrumb on Site pages when enabled globally.');
    $this->assertNoBreadcrumbAppendedSiteTitle('The Site title is not appended to the breadcrumb.');
    $this->assertNoBreadcrumbRootToSiteFrontpage('The root element of the breadcrumb does not link to Site frontpage.');

    variable_set('og_sm_breadcrumb_append_title', 1);
    variable_set('og_sm_breadcrumb_force_home', 1);
    $this->drupalGet($this->sitePath);
    $this->assertBreadcrumbAppendedSiteTitle('The Site title is appended to the breadcrumb.');
    $this->assertBreadcrumbRootToSiteFrontpage('The root element of the breadcrumb links to the Site frontpage.');

    $this->verbose('nothing');
    $this->verbose($this->getBreadcrumbRootLink());

    variable_set('og_sm_breadcrumb_hide_on_frontpage', 1);
    $this->drupalGet($this->sitePath);
    $this->assertNoBreadcrumbOnPage('No breadcrumb on Site frontpage when hidden globally.');

    // Feature module enabled.
    module_enable(array('og_sm_feature'));
    og_sm_feature_site_disable($this->site, OG_SM_BREADCRUMB_FEATURE);
    og_sm_variable_set($this->site->nid, 'og_sm_breadcrumb_hide_on_frontpage', 0);
    og_sm_variable_set($this->site->nid, 'og_sm_breadcrumb_force_home', 0);
    og_sm_variable_set($this->site->nid, 'og_sm_breadcrumb_append_title', 0);
    og_sm_variable_set($this->site->nid, 'og_sm_breadcrumb_override_root', 0);
    og_sm_variable_set($this->site->nid, 'og_sm_breadcrumb_override_root_parts', array());

    $this->drupalGet($this->sitePath);
    $this->assertNoBreadcrumbOnPage('No breadcrumb on Site frontpage when feature is disabled.');

    og_sm_feature_site_enable($this->site, OG_SM_BREADCRUMB_FEATURE);
    $this->drupalGet($this->sitePath);
    $this->assertBreadcrumbOnPage('Breadcrumb on Site pages when feature is enabled.');
    $this->assertNoBreadcrumbAppendedSiteTitle('The Site title is not appended to the breadcrumb.');
    $this->assertNoBreadcrumbRootToSiteFrontpage('The root element of the breadcrumb does not link to Site frontpage.');

    og_sm_variable_set($this->site->nid, 'og_sm_breadcrumb_append_title', 1);
    og_sm_variable_set($this->site->nid, 'og_sm_breadcrumb_force_home', 1);
    $this->drupalGet($this->sitePath);
    $this->assertBreadcrumbAppendedSiteTitle('The Site title is appended to the breadcrumb.');
    $this->assertBreadcrumbRootToSiteFrontpage('The root element of the breadcrumb links to the Site frontpage.');

    og_sm_variable_set($this->site->nid, 'og_sm_breadcrumb_override_root', 1);
    og_sm_variable_set($this->site->nid, 'og_sm_breadcrumb_override_root_parts', array(array('text' => 'custom_root', 'path' => 'custom-path')));
    $this->drupalGet($this->sitePath);
    $this->assertEqual('/custom-path', $this->getBreadcrumbRootLink(), 'Root element is replaced by custom path.');

    og_sm_variable_set($this->site->nid, 'og_sm_breadcrumb_hide_on_frontpage', 1);
    $this->drupalGet($this->sitePath);
    $this->assertNoBreadcrumbOnPage('No breadcrumb on Site frontpage when hidden in feature settings.');
  }

  /**
   * Helper to check if there is a breadcrumb.
   *
   * @param string $message
   *   Optional message to show.
   */
  public function assertBreadcrumbOnPage($message = NULL) {
    $items = $this->getBreadcrumb();
    $this->assertFalse(empty($items), $message);
  }

  /**
   * Helper to check if there is a breadcrumb.
   *
   * @param string $message
   *   Optional message to show.
   */
  public function assertNoBreadcrumbOnPage($message = NULL) {
    $items = $this->getBreadcrumb();
    $this->assertTrue(empty($items), $message);
  }

  /**
   * Helper to get the breadcrumb.
   *
   * @return array
   *   Breadcrumb elements.
   */
  protected function getBreadcrumb() {
    return $this->xpath('//div[@class=:class]/a', array(':class' => 'breadcrumb'));
  }

  /**
   * Helper to check if the title is appended to the breadcrumb.
   *
   * @param string $message
   *   Optional message to show.
   */
  public function assertBreadcrumbAppendedSiteTitle($message = NULL) {
    $items = $this->getBreadcrumbAppendedSiteTitle();
    $this->assertFalse(empty($items), $message);
  }

  /**
   * Helper to check if the title is appended to the breadcrumb.
   *
   * @param string $message
   *   Optional message to show.
   */
  public function assertNoBreadcrumbAppendedSiteTitle($message = NULL) {
    $items = $this->getBreadcrumbAppendedSiteTitle();
    $this->assertTrue(empty($items), $message);
  }

  /**
   * Helper to get the title part of the breadcrumb.
   *
   * @return array
   *   Title elements.
   */
  protected function getBreadcrumbAppendedSiteTitle() {
    return $this->xpath(
      "//div[@class=:class and contains(text(), :title)]",
      array(
        ':class' => 'breadcrumb',
        ':title' => $this->site->title,
      )
    );
  }

  /**
   * Check if the first items link to the Site node.
   *
   * @param string $message
   *   Optional message to show.
   */
  protected function assertBreadcrumbRootToSiteFrontpage($message = NULL) {
    $this->assertEqual(
      '/' . $this->sitePath,
      $this->getBreadcrumbRootLink(),
      $message
    );
  }

  /**
   * Check if the first items link to the Site node.
   *
   * @param string $message
   *   Optional message to show.
   */
  protected function assertNoBreadcrumbRootToSiteFrontpage($message = NULL) {
    $this->assertNotEqual(
      '/' . $this->sitePath,
      $this->getBreadcrumbRootLink(),
      $message
    );
  }

  /**
   * Helper to get the href value of the first item.
   *
   * @return string|NULL
   *   The href value of the first item.
   */
  protected function getBreadcrumbRootLink() {
    $items = $this->getBreadcrumb();
    if (empty($items)) {
      return NULL;
    }

    $item = array_shift($items);
    $attributes = $item->attributes();
    if (!isset($attributes['href'])) {
      return NULL;
    }

    return $attributes['href'];
  }

}
