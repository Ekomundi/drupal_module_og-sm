<?php
/**
 * @file
 * Site taxonomy support.
 */

/**
 * OG permissions.
 */
define('OG_SM_TAXONOMY_OG_PERM_ADMIN', 'administer taxonomy');
define('OG_SM_TAXONOMY_OG_PERM_VOCAB', 'edit terms in %s');

/**
 * Implements hook_og_permission().
 */
function og_sm_taxonomy_og_permission() {
  $items = array();

  $items[OG_SM_TAXONOMY_OG_PERM_ADMIN] = array(
    'title' => t('Administer taxonomy'),
    'description' => t('Manage all taxonomy terms.'),
  );

  $vocabularies = og_sm_taxonomy_get_vocabularies();
  foreach ($vocabularies as $vocabulary) {
    $perm = sprintf(OG_SM_TAXONOMY_OG_PERM_VOCAB, $vocabulary->machine_name);

    $items[$perm] = array(
      'title' => t(
        'Edit terms in %name',
        array('%name' => $vocabulary->machine_name)
      ),
      'description' => t(
        'Edit all terms for the %name vocabulary',
        array('%name' => $vocabulary->name)
      ),
    );
  }

  return $items;
}

/**
 * Implements hook_menu().
 */
function og_sm_taxonomy_menu() {
  $items = array();
  $file_admin = 'og_sm_taxonomy.admin.inc';

  $item['group/node/%site/admin/taxonomy'] = array(
    'title' => 'Administer taxonomy',
    'page callback' => 'og_sm_taxonomy_admin_overview',
    'page arguments' => array(2),
    'access callback' => 'og_sm_taxonomy_admin_access_overview',
    'access arguments' => array(2),
    'weight' => 11,
    'file' => $file_admin,
  );

  return $items;
}

/**
 * Get a list of vocabulary names that have the OG group audience field.
 *
 * @return array
 *   Vocabulary names (labels) keyed by their machine name.
 */
function og_sm_taxonomy_get_vocabulary_names() {
  $vocabularies = &drupal_static(__FUNCTION__, array());
  if (!$vocabularies) {
    $bundles = og_get_all_group_content_bundle();
    if (!empty($bundles['taxonomy_term'])) {
      $vocabularies = $bundles['taxonomy_term'];
    }
  }

  return $vocabularies;
}

/**
 * Get all vocabular objects that have the OG group audience field.
 *
 * @return array
 *   Vocabulary objects keyed by their machine name.
 */
function og_sm_taxonomy_get_vocabularies() {
  $vocabularies = &drupal_static(__FUNCTION__, array());
  if (!$vocabularies) {
    $names = array_keys(og_sm_taxonomy_get_vocabulary_names());
    foreach ($names as $name) {
      $vocabularies[$name] = taxonomy_vocabulary_machine_name_load($name);
    }
  }

  return $vocabularies;
}

/**
 * Check if a given taxonomy vocabulary has the OG group audience field.
 *
 * @param string $name
 *   The vocbulary name.
 *
 * @return bool
 *   Is an OG vocabulary.
 */
function og_sm_taxonomy_is_vocabulary($name) {
  $names = og_sm_taxonomy_get_vocabulary_names();
  return array_key_exists($name, $names);
}

/**
 * Get all the Sites a taxonomy term belongs to.
 *
 * @param object $term
 *   The term to get the Sites for.
 *
 * @return array
 *   All Site nodes keyed by their nid.
 */
function og_sm_taxonomy_term_get_sites($term) {
  $groups = og_get_entity_groups('taxonomy_term', $term);
  return _og_sm_filter_sites_from_groups($groups);
}

/**
 * Get the Site object the taxonomy term belongs to.
 *
 * If a term belongs to multiple Sites, only the first will be returned.
 *
 * @param object $term
 *   The term to get the Sites for.
 *
 * @return object|FALSE
 *   The site node (if any).
 */
function og_sm_taxonomy_term_get_site($term) {
  $sites = og_sm_taxonomy_term_get_sites($term);
  if (empty($sites)) {
    return FALSE;
  }

  return reset($sites);
}

/**
 * Check if a term is used within at least one Site.
 *
 * @param object $term
 *   The Term object.
 *
 * @return bool
 *   Is used within a Site.
 */
function og_sm_taxonomy_term_is_site_term($term) {
  return (bool) og_sm_taxonomy_term_get_site($term);
}

/**
 * Check if a Term is a member of the given Site.
 *
 * @param object $term
 *   The Term object.
 * @param object $site
 *   The Site object.
 *
 * @return bool
 *   Is a Site member.
 */
function og_sm_taxonomy_term_is_site_member($term, $site) {
  $sites = og_sm_taxonomy_term_get_sites($term);
  return !empty($sites[$site->nid]);
}
