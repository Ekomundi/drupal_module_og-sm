<?php
/**
 * @file
 * Tests about the Site Taxonomies.
 */

/**
 * Tests about the Site Taxonomy API.
 */
class OgSmTaxonomyAdminTestCase extends OgSmTaxonomyWebTestCase {
  /**
   * Site Nodes to run the tests with.
   *
   * @var object
   */
  private $siteNode;

  /**
   * Vocabulary "categories" to run tests with.
   *
   * @var object
   */
  private $vocabCategories;

  /**
   * Vocabulary "tags" to run tests with.
   *
   * @var object
   */
  private $vocabTags;

  /**
   * The admin user to test with.
   */
  private $userAdministrator;

  /**
   * Global user without any special permissions.
   */
  private $userPermissionNone;

  /**
   * Global user with edit all permission.
   */
  private $userPermissionAll;

  /**
   * The site user without taxonomy permissions.
   */
  private $siteUserPermissionNone;

  /**
   * The site user with taxonomy administration permission.
   */
  private $siteUserPermissionAll;

  /**
   * The site user with the permission to administer the categories.
   */
  private $siteUserPermissionCategories;

  /**
   * The site user with the permission to administer the tags.
   */
  private $siteUserPermissionTags;

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => t('Site Taxonomy Administration'),
      'description' => t('Tests Site Taxonomy administration functionality.'),
      'group' => t('Organic Groups Site Manager'),
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    // Enable required modules (we need context to filter the terms!).
    $modules = array('og_sm_taxonomy', 'og_sm_context');
    parent::setUp($modules);

    // Setup OG context.
    $context_enabled = array(
      'og_sm_context_node' => new stdClass(),
      'og_sm_context_admin' => new stdClass(),
    );
    variable_set('og_context_negotiation_group_context', $context_enabled);
    $context_order = array(
      'og_sm_context_node' => -50,
      'og_sm_context_admin' => -49,
    );
    variable_set('og_context_providers_weight_group_context', $context_order);

    // Create the Site type.
    $type = $this->ogSmCreateGroupNodeType();
    og_sm_site_type_add($type);

    // Create the Site node.
    $this->siteNode = $this->ogSmCreateGroup($type);

    // Create vocabularies.
    $this->vocabCategories = $this->ogSmCreateVocabulary('test_categories');
    $this->vocabTags = $this->ogSmCreateVocabulary('test_tags');

    // Create users.
    $this->userAdministrator = $this->ogSmCreateAdminUser();
    $this->userPermissionNone = $this->drupalCreateUser();
    $this->userPermissionAll = $this->drupalCreateUser(array(OG_SM_TAXONOMY_PERM_ALL));

    // Site user without permissions.
    $this->siteUserPermissionNone = $this->ogSmCreateGroupUser(
      array(),
      array($this->siteNode)
    );

    // Site user with taxonomy administration permissions.
    $site_role_all = og_role_create('site taxonomy all', 'node', 0, $type);
    og_role_save($site_role_all);
    og_role_grant_permissions($site_role_all->rid, array(OG_SM_TAXONOMY_OG_PERM_ALL));
    $this->siteUserPermissionAll = $this->ogSmCreateGroupUser(
      array(),
      array($this->siteNode)
    );
    og_role_grant(
      'node',
      $this->siteNode->nid,
      $this->siteUserPermissionAll->uid,
      $site_role_all->rid
    );

    // Site user who can manage only categories.
    $site_role_categories = og_role_create('site taxonomy categories', 'node', 0, $type);
    og_role_save($site_role_categories);
    og_role_grant_permissions(
      $site_role_categories->rid,
      array(sprintf(OG_SM_TAXONOMY_OG_PERM_VOCAB, 'test_categories'))
    );
    $this->siteUserPermissionCategories = $this->ogSmCreateGroupUser(
      array(),
      array($this->siteNode)
    );
    og_role_grant(
      'node',
      $this->siteNode->nid,
      $this->siteUserPermissionCategories->uid,
      $site_role_categories->rid
    );

    // Site user who can manage only tags.
    $site_role_tags = og_role_create('site taxonomy tags', 'node', 0, $type);
    og_role_save($site_role_tags);
    og_role_grant_permissions(
      $site_role_tags->rid,
      array(sprintf(OG_SM_TAXONOMY_OG_PERM_VOCAB, 'test_tags'))
    );
    $this->siteUserPermissionTags = $this->ogSmCreateGroupUser(
      array(),
      array($this->siteNode)
    );
    og_role_grant(
      'node',
      $this->siteNode->nid,
      $this->siteUserPermissionTags->uid,
      $site_role_tags->rid
    );
  }

  /**
   * Test the taxonomy administration overview access.
   */
  public function testTaxonomyAdministrationOverviewAccess() {
    // Global Administrators should always have access.
    $this->assertTrue(
      og_sm_taxonomy_admin_vocabulary_overview_access(
        $this->siteNode,
        $this->userAdministrator
      ),
      'Site Taxonomy administration overview : Global administrators have always access.'
    );

    // Global user without permissions should not have access.
    $this->assertFalse(
      og_sm_taxonomy_admin_vocabulary_overview_access(
        $this->siteNode,
        $this->userPermissionNone
      ),
      'Site Taxonomy administration overview : Global user without permissions has no access.'
    );

    // Global user with the permission should have access.
    $this->assertTrue(
      og_sm_taxonomy_admin_vocabulary_overview_access(
        $this->siteNode,
        $this->userPermissionAll
      ),
      'Site Taxonomy administration overview : Global user with permission has access.'
    );

    // Site users without permissions should not have access.
    $this->assertFalse(
      og_sm_taxonomy_admin_vocabulary_overview_access(
        $this->siteNode,
        $this->siteUserPermissionNone
      ),
      'Site Taxonomy administration overview : Site user without permissions has no access.'
    );

    // Site users with all taxonomy permission should have access.
    $this->assertTrue(
      og_sm_taxonomy_admin_vocabulary_overview_access(
        $this->siteNode,
        $this->siteUserPermissionAll
      ),
      'Site Taxonomy administration overview : Site user with edit all permissions has access.'
    );

    // Site users with at least one vocabulary edit access have access.
    $this->assertTrue(
      og_sm_taxonomy_admin_vocabulary_overview_access(
        $this->siteNode,
        $this->siteUserPermissionCategories
      ),
      'Site Taxonomy administration overview : Site user with edit one of the vocabulary permissions has access.'
    );
  }

  /**
   * Test access to edit the terms of a vocabulary.
   */
  public function testTaxonomyAdministrationVocabularyAccess() {
    // Global Administrators should always have access.
    $this->assertTrue(
      og_sm_taxonomy_admin_vocabulary_access(
        $this->siteNode,
        $this->vocabCategories,
        $this->userAdministrator
      ),
      'Site Taxonomy administrate vocabulary : Global administrators have always access.'
    );

    // Global user without permissions should not have access.
    $this->assertFalse(
      og_sm_taxonomy_admin_vocabulary_access(
        $this->siteNode,
        $this->vocabTags,
        $this->userPermissionNone
      ),
      'Site Taxonomy administrate vocabulary : Global user without permissions has no access.'
    );

    // Global user with the permission should have access.
    $this->assertTrue(
      og_sm_taxonomy_admin_vocabulary_access(
        $this->siteNode,
        $this->vocabCategories,
        $this->userPermissionAll
      ),
      'Site Taxonomy administrate vocabulary : Global user with permission has access.'
    );

    // Site users without permissions should not have access.
    $this->assertFalse(
      og_sm_taxonomy_admin_vocabulary_access(
        $this->siteNode,
        $this->vocabCategories,
        $this->siteUserPermissionNone
      ),
      'Site Taxonomy administrate vocabulary : Site user without permissions has no access.'
    );

    // Site users with all taxonomy permission should have access.
    $this->assertTrue(
      og_sm_taxonomy_admin_vocabulary_access(
        $this->siteNode,
        $this->vocabTags,
        $this->siteUserPermissionAll
      ),
      'Site Taxonomy administrate vocabulary : Site user with edit all permissions has access.'
    );

    // Site users with at taxonomy specific permission.
    $this->assertTrue(
      og_sm_taxonomy_admin_vocabulary_access(
        $this->siteNode,
        $this->vocabCategories,
        $this->siteUserPermissionCategories
      ),
      'Site Taxonomy administrate vocabulary : Site user with vocabulary specific permissions has access to it.'
    );

    // Site user with taxonomy he has no access to.
    $this->assertFalse(
      og_sm_taxonomy_admin_vocabulary_access(
        $this->siteNode,
        $this->vocabTags,
        $this->siteUserPermissionCategories
      ),
      'Site Taxonomy administrate vocabulary : Site user without vocabulary specific permissions has no access to it.'
    );
  }

  /**
   * Test the taxonomy overview page.
   */
  public function testTaxonomyAdministrationOverviewPage() {
    $path_overview = 'group/node/' . $this->siteNode->nid . '/admin/taxonomy';
    $this->drupalLogin($this->userPermissionNone);
    $this->drupalGet($path_overview);
    $this->assertResponse(403, 'Site Taxonomy administration overview : No access without proper permissions.');

    // User with access to administer all taxonomies should see all in the list.
    $this->drupalLogin($this->userPermissionAll);
    $this->drupalGet($path_overview);
    $this->assertResponse(200, 'Site Taxonomy administration overview : Access when having edit all taxonomies permission.');
    $this->assertText($this->vocabCategories->name, 'Category vocabulary is in the list.');
    $this->assertText($this->vocabTags->name, 'Tags vocabulary is in the list.');

    // User with access to only 1 vocabulary should not see other taxonomies.
    $this->drupalLogin($this->siteUserPermissionCategories);
    $this->drupalGet($path_overview);
    $this->assertResponse(200, 'Site Taxonomy administration overview : Access when having edit at least one taxonomy permission.');
    $this->assertText($this->vocabCategories->name, 'Category vocabulary is in the list.');
    $this->assertNoText($this->vocabTags->name, 'Tags vocabulary is not in the list.');
  }

  /**
   * Test the taxonomy list page.
   */
  public function testTaxonomyAdministrationVocabularyPage() {
    $path_categories = 'group/node/' . $this->siteNode->nid . '/admin/taxonomy/test_categories';
    $this->drupalLogin($this->siteUserPermissionNone);
    $this->drupalGet($path_categories);
    $this->assertResponse(403, 'Site Taxonomy administration overview : No access without proper permissions.');

    $this->drupalLogin($this->userAdministrator);
    $this->drupalGet($path_categories);
    $this->assertResponse(200, 'Site Taxonomy administration overview : Administrator has access to all vocabularies.');

    // Add some category terms.
    $sites = array($this->siteNode);
    $this->ogSmCreateTerm($this->vocabCategories, 'term_outside');
    $this->ogSmCreateTerm($this->vocabCategories, 'term_1', $sites);
    $this->ogSmCreateTerm($this->vocabCategories, 'term_2', $sites);
    $this->ogSmCreateTerm($this->vocabCategories, 'term_3', $sites);

    // Check if the terms are listed.
    $this->drupalGet($path_categories);
    $this->assertNoText('term_outside', 'The no-site term is not in the list.');
    $this->assertText('term_1', 'Term "term_1" is in the list.');
    $this->assertText('term_2', 'Term "term_2" is in the list.');
    $this->assertText('term_3', 'Term "term_3" is in the list.');

    // Check if the add button is available.
    $this->assertText('Add term');
  }

  /**
   * Test ordering the taxonomy terms.
   */
  public function _testTaxonomyAdministrationVocabularyPageOrder() {
    $path_categories = 'group/node/' . $this->siteNode->nid . '/admin/taxonomy/test_categories';

    // Login to the platform.
    $this->drupalLogin($this->userAdministrator);

    // Add some terms.
    $sites = array($this->siteNode);
    $this->ogSmCreateTerm($this->vocabCategories, 'term_1', $sites);
    $this->ogSmCreateTerm($this->vocabCategories, 'term_2', $sites);
    $this->ogSmCreateTerm($this->vocabCategories, 'term_3', $sites);

    // Reset the order of the terms, we should return to the overview within the
    // Site context.
    $this->drupalPost($path_categories, array(), 'Reset to alphabetical');
    $this->drupalPost(NULL, array(), t('Reset to alphabetical'));
    $this->assertUrl(
      $path_categories,
      array(),
      'The user is redirected back to the Site vocabulary terms overview page.'
    );

    // Open the reset order confirmation page, using the cancel button should
    // redirect back to the Site vocabulary terms overview page.
    $this->drupalPost($path_categories, array(), 'Reset to alphabetical');
    $this->clickLink('Cancel');
    $this->assertUrl(
      $path_categories,
      array(),
      'The user is redirected back to the Site vocabulary terms overview page.'
    );
  }

  /**
   * Test adding a vocabulary term.
   */
  public function testTaxonomyAdministrationTermAdd() {
    $path_categories = 'group/node/' . $this->siteNode->nid . '/admin/taxonomy/test_categories';
    $path_add = $path_categories . '/add';

    // Login to the platform as user without proper permissions.
    $this->drupalLogin($this->siteUserPermissionNone);
    $this->drupalGet($path_add);
    $this->assertResponse(403, 'Site Taxonomy term add : No access without proper permissions.');
    $this->assertNoFieldById('edit-name', NULL, 'There should be no form on the page.');

    // Login to the platform as user with proper permissions.
    $this->drupalLogin($this->siteUserPermissionAll);
    $this->drupalGet($path_add);
    $this->assertResponse(200, 'Site Taxonomy term add : Administrator has access to all vocabularies.');
    $this->assertFieldById('edit-name', NULL, 'Term field is on the page.');

    // Post the form.
    $data = array(
      'name' => 'test_term_post',
      'description[value]' => 'test_term_description',
      'og_group_ref[und][0][default][]' => $this->siteNode->nid,
    );
    $this->drupalPost($path_add, $data, 'Save');
    $this->drupalGet($path_categories);
    $this->assertText(
      'test_term_post',
      'The new term is saved for the site.'
    );

    // Check if the term is created linked to the Site.
    $term = array_shift(taxonomy_get_term_by_name('test_term_post'));
    $this->assertTrue(
      og_sm_taxonomy_term_is_site_member($term, $this->siteNode),
      'The term is a member of the Site.'
    );
  }

  /**
   * Test editing a vocabulary term.
   */
  public function testTaxonomyAdministrationtermEdit() {
    $sites = array($this->siteNode);
    $term = $this->ogSmCreateTerm($this->vocabCategories, 'term_1', $sites);
    $path_edit = 'taxonomy/term/' . $term->tid . '/edit';

    // Not logged in.
    $this->drupalGet($path_edit);
    $this->assertResponse(403, 'Site Taxonomy term edit : No access without proper permissions.');
    $this->assertNoFieldById('edit-description-value', NULL, 'There should be no form on the page.');

    // No permission.
    $this->drupalLogin($this->userPermissionNone);
    $this->drupalGet($path_edit);
    $this->assertResponse(403, 'Site Taxonomy term edit : No access without proper permissions.');

    // Administrator has always access.
    $this->drupalLogin($this->userAdministrator);
    $this->drupalGet($path_edit);
    $this->assertResponse(200, 'Site Taxonomy term edit : Platform administrator has access.');
    $expected = $this->siteNode->title . ' (' . $this->siteNode->nid . ')';
    $this->assertFieldById(
      'edit-og-group-ref-und-0-admin-0-target-id',
      $expected,
      'Site field is filled in correctly.'
    );

    // Global user with proper permissions.
    $this->drupalLogin($this->userPermissionAll);
    $this->drupalGet($path_edit);
    $this->assertResponse(200, 'Site Taxonomy term edit : Global user with edit all has access.');

    // Site user without access.
    $this->drupalLogin($this->siteUserPermissionNone);
    $this->drupalGet($path_edit);
    $this->assertResponse(403, 'Site Taxonomy term edit : Site user without proper permissions has no access.');

    // Site user who can manage all.
    $this->drupalLogin($this->siteUserPermissionAll);
    $this->drupalGet($path_edit);
    $this->assertResponse(200, 'Site Taxonomy term edit : Site user with edit all has access.');

    // Site user with specific vocabulary.
    $this->drupalLogin($this->siteUserPermissionCategories);
    $this->drupalGet($path_edit);
    $this->assertResponse(200, 'Site Taxonomy term edit : Site user with categories edit has access.');

    // Site user without specific vocabulary access.
    $this->drupalLogin($this->siteUserPermissionTags);
    $this->drupalGet($path_edit);
    $this->assertResponse(403, 'Site Taxonomy term edit : Site user without categories permissions has no access.');
  }

}
