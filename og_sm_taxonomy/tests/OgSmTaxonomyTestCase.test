<?php
/**
 * @file
 * Tests about the Site Taxonomies.
 */

/**
 * Tests about the Site Taxonomy API.
 */
class OgSmTaxonomyTestCase extends OgSmWebTestCase {
  /**
   * Site Node to run the tests with.
   *
   * @var object
   */
  private $siteNode;

  /**
   * Vocabulary "categories" to run tests with.
   *
   * @var object
   */
  private $vocabCategories;

  /**
   * Vocbulary "tags" to run tests with.
   *
   * @var object
   */
  private $vocabTags;

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => t('Site Taxonomy'),
      'description' => t('Tests Site Taxonomy terms functionality.'),
      'group' => t('Organic Groups Site Manager'),
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    // Enable required modules.
    $modules = array('og_sm_taxonomy');
    parent::setUp($modules);

    // Create the Site type.
    $type = $this->ogSmCreateGroupNodeType();
    og_sm_site_type_add($type);
    $this->siteNode = $this->ogSmCreateGroup($type);

    // Create vocabularies.
    $this->vocabCategories = $this->ogSmCreateVocabulary('test_categories');
    $this->vocabTags = $this->ogSmCreateVocabulary('test_tags');
  }

  /**
   * Test the vocabulary API.
   */
  public function testApi() {
    // Test loading all vocabularies.
    $vocabs = og_sm_taxonomy_get_vocabularies();
    $this->assertEqual(2, count($vocabs), 'There are 2 vocabularies with OG audience field.');

    // Test check if vocbulary has the OG Audience field.
    $this->assertFalse(
      og_sm_taxonomy_is_vocabulary('tags'),
      'Tags vocabulary has no OG audience field.'
    );
    $this->assertTrue(
      og_sm_taxonomy_is_vocabulary($this->vocabCategories->machine_name),
      'Test Categories has the OG Audience field.'
    );
    $this->assertTrue(
      og_sm_taxonomy_is_vocabulary($this->vocabTags->machine_name),
      'Test Categories has the OG Audience field.'
    );
  }

  /**
   * Helper to create a taxonomy with OG field.
   *
   * @param string $name
   *   The machine name for the taxonomy.
   *
   * @return object
   *   The vocbulary object.
   */
  public function ogSmCreateVocabulary($name) {
    // Create the vocabulary.
    $vocab = new stdClass();
    $vocab->name = $name;
    $vocab->description = 'Test the ' . $name;
    $vocab->machine_name = $name;
    taxonomy_vocabulary_save($vocab);

    // Add the group field.
    og_create_field(OG_AUDIENCE_FIELD, 'taxonomy_term', $name);

    return $vocab;
  }

}
